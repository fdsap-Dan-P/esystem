// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: kplus_message.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KPLUSAddressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iiid          int64  `protobuf:"varint,1,opt,name=iiid,proto3" json:"iiid,omitempty"`
	Series        int64  `protobuf:"varint,2,opt,name=series,proto3" json:"series,omitempty"`
	AddressTypeID int64  `protobuf:"varint,3,opt,name=addressTypeID,proto3" json:"addressTypeID,omitempty"`
	AddressType   string `protobuf:"bytes,4,opt,name=addressType,proto3" json:"addressType,omitempty"`
	Details       string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	Barangay      string `protobuf:"bytes,6,opt,name=barangay,proto3" json:"barangay,omitempty"`
	Municipality  string `protobuf:"bytes,7,opt,name=municipality,proto3" json:"municipality,omitempty"`
	Province      string `protobuf:"bytes,8,opt,name=province,proto3" json:"province,omitempty"`
	Country       string `protobuf:"bytes,9,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *KPLUSAddressInfo) Reset() {
	*x = KPLUSAddressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSAddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSAddressInfo) ProtoMessage() {}

func (x *KPLUSAddressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSAddressInfo.ProtoReflect.Descriptor instead.
func (*KPLUSAddressInfo) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{0}
}

func (x *KPLUSAddressInfo) GetIiid() int64 {
	if x != nil {
		return x.Iiid
	}
	return 0
}

func (x *KPLUSAddressInfo) GetSeries() int64 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *KPLUSAddressInfo) GetAddressTypeID() int64 {
	if x != nil {
		return x.AddressTypeID
	}
	return 0
}

func (x *KPLUSAddressInfo) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *KPLUSAddressInfo) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *KPLUSAddressInfo) GetBarangay() string {
	if x != nil {
		return x.Barangay
	}
	return ""
}

func (x *KPLUSAddressInfo) GetMunicipality() string {
	if x != nil {
		return x.Municipality
	}
	return ""
}

func (x *KPLUSAddressInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *KPLUSAddressInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type KPLUSContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iiid          int64  `protobuf:"varint,1,opt,name=iiid,proto3" json:"iiid,omitempty"`
	Series        int64  `protobuf:"varint,2,opt,name=series,proto3" json:"series,omitempty"`
	ContactTypeID int64  `protobuf:"varint,3,opt,name=contactTypeID,proto3" json:"contactTypeID,omitempty"`
	ContactType   string `protobuf:"bytes,4,opt,name=contactType,proto3" json:"contactType,omitempty"`
	Contact       string `protobuf:"bytes,5,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *KPLUSContact) Reset() {
	*x = KPLUSContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSContact) ProtoMessage() {}

func (x *KPLUSContact) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSContact.ProtoReflect.Descriptor instead.
func (*KPLUSContact) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{1}
}

func (x *KPLUSContact) GetIiid() int64 {
	if x != nil {
		return x.Iiid
	}
	return 0
}

func (x *KPLUSContact) GetSeries() int64 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *KPLUSContact) GetContactTypeID() int64 {
	if x != nil {
		return x.ContactTypeID
	}
	return 0
}

func (x *KPLUSContact) GetContactType() string {
	if x != nil {
		return x.ContactType
	}
	return ""
}

func (x *KPLUSContact) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

type KPLUSCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *KPLUSCustomerRequest) Reset() {
	*x = KPLUSCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSCustomerRequest) ProtoMessage() {}

func (x *KPLUSCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSCustomerRequest.ProtoReflect.Descriptor instead.
func (*KPLUSCustomerRequest) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{2}
}

func (x *KPLUSCustomerRequest) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

type KPLUSCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid                   int64               `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	LastName              string              `protobuf:"bytes,2,opt,name=lastName,proto3" json:"lastName,omitempty"`
	FirstName             string              `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	MiddleName            string              `protobuf:"bytes,4,opt,name=middleName,proto3" json:"middleName,omitempty"`
	MaidenFName           string              `protobuf:"bytes,5,opt,name=maidenFName,proto3" json:"maidenFName,omitempty"`
	MaidenLName           string              `protobuf:"bytes,6,opt,name=maidenLName,proto3" json:"maidenLName,omitempty"`
	MaidenMName           string              `protobuf:"bytes,7,opt,name=maidenMName,proto3" json:"maidenMName,omitempty"`
	DoBirth               string              `protobuf:"bytes,8,opt,name=doBirth,proto3" json:"doBirth,omitempty"`
	BirthPlace            string              `protobuf:"bytes,9,opt,name=birthPlace,proto3" json:"birthPlace,omitempty"`
	Sex                   string              `protobuf:"bytes,10,opt,name=sex,proto3" json:"sex,omitempty"`
	CivilStatus           string              `protobuf:"bytes,11,opt,name=civilStatus,proto3" json:"civilStatus,omitempty"`
	Title                 string              `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`
	Status                int64               `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	StatusDesc            string              `protobuf:"bytes,14,opt,name=statusDesc,proto3" json:"statusDesc,omitempty"`
	Classification        int64               `protobuf:"varint,15,opt,name=classification,proto3" json:"classification,omitempty"`
	ClassificationDesc    string              `protobuf:"bytes,16,opt,name=classificationDesc,proto3" json:"classificationDesc,omitempty"`
	SubClassification     int64               `protobuf:"varint,17,opt,name=subClassification,proto3" json:"subClassification,omitempty"`
	SubClassificationDesc string              `protobuf:"bytes,18,opt,name=subClassificationDesc,proto3" json:"subClassificationDesc,omitempty"`
	Business              string              `protobuf:"bytes,19,opt,name=business,proto3" json:"business,omitempty"`
	DoEntry               string              `protobuf:"bytes,20,opt,name=doEntry,proto3" json:"doEntry,omitempty"`
	DoRecognized          string              `protobuf:"bytes,21,opt,name=doRecognized,proto3" json:"doRecognized,omitempty"`
	DoResigned            string              `protobuf:"bytes,22,opt,name=doResigned,proto3" json:"doResigned,omitempty"`
	BrCode                string              `protobuf:"bytes,23,opt,name=brCode,proto3" json:"brCode,omitempty"`
	BranchName            string              `protobuf:"bytes,24,opt,name=branchName,proto3" json:"branchName,omitempty"`
	UnitCode              string              `protobuf:"bytes,25,opt,name=unitCode,proto3" json:"unitCode,omitempty"`
	UnitName              string              `protobuf:"bytes,26,opt,name=unitName,proto3" json:"unitName,omitempty"`
	CenterCode            string              `protobuf:"bytes,27,opt,name=centerCode,proto3" json:"centerCode,omitempty"`
	CenterName            string              `protobuf:"bytes,28,opt,name=centerName,proto3" json:"centerName,omitempty"`
	Dosri                 bool                `protobuf:"varint,29,opt,name=dosri,proto3" json:"dosri,omitempty"`
	Reffered              string              `protobuf:"bytes,30,opt,name=reffered,proto3" json:"reffered,omitempty"`
	Remarks               string              `protobuf:"bytes,31,opt,name=remarks,proto3" json:"remarks,omitempty"`
	AccountNumber         string              `protobuf:"bytes,32,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	SearchName            string              `protobuf:"bytes,33,opt,name=searchName,proto3" json:"searchName,omitempty"`
	Address               []*KPLUSAddressInfo `protobuf:"bytes,34,rep,name=address,proto3" json:"address,omitempty"`
	Contact               []*KPLUSContact     `protobuf:"bytes,35,rep,name=contact,proto3" json:"contact,omitempty"`
	MemberMaidenFName     string              `protobuf:"bytes,36,opt,name=memberMaidenFName,proto3" json:"memberMaidenFName,omitempty"`
	MemberMaidenLName     string              `protobuf:"bytes,37,opt,name=memberMaidenLName,proto3" json:"memberMaidenLName,omitempty"`
	MemberMaidenMName     string              `protobuf:"bytes,38,opt,name=memberMaidenMName,proto3" json:"memberMaidenMName,omitempty"`
}

func (x *KPLUSCustomerResponse) Reset() {
	*x = KPLUSCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSCustomerResponse) ProtoMessage() {}

func (x *KPLUSCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSCustomerResponse.ProtoReflect.Descriptor instead.
func (*KPLUSCustomerResponse) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{3}
}

func (x *KPLUSCustomerResponse) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *KPLUSCustomerResponse) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetMaidenFName() string {
	if x != nil {
		return x.MaidenFName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetMaidenLName() string {
	if x != nil {
		return x.MaidenLName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetMaidenMName() string {
	if x != nil {
		return x.MaidenMName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetDoBirth() string {
	if x != nil {
		return x.DoBirth
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetBirthPlace() string {
	if x != nil {
		return x.BirthPlace
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetCivilStatus() string {
	if x != nil {
		return x.CivilStatus
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *KPLUSCustomerResponse) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetClassification() int64 {
	if x != nil {
		return x.Classification
	}
	return 0
}

func (x *KPLUSCustomerResponse) GetClassificationDesc() string {
	if x != nil {
		return x.ClassificationDesc
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetSubClassification() int64 {
	if x != nil {
		return x.SubClassification
	}
	return 0
}

func (x *KPLUSCustomerResponse) GetSubClassificationDesc() string {
	if x != nil {
		return x.SubClassificationDesc
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetBusiness() string {
	if x != nil {
		return x.Business
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetDoEntry() string {
	if x != nil {
		return x.DoEntry
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetDoRecognized() string {
	if x != nil {
		return x.DoRecognized
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetDoResigned() string {
	if x != nil {
		return x.DoResigned
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetUnitCode() string {
	if x != nil {
		return x.UnitCode
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetCenterCode() string {
	if x != nil {
		return x.CenterCode
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetCenterName() string {
	if x != nil {
		return x.CenterName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetDosri() bool {
	if x != nil {
		return x.Dosri
	}
	return false
}

func (x *KPLUSCustomerResponse) GetReffered() string {
	if x != nil {
		return x.Reffered
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetSearchName() string {
	if x != nil {
		return x.SearchName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetAddress() []*KPLUSAddressInfo {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *KPLUSCustomerResponse) GetContact() []*KPLUSContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *KPLUSCustomerResponse) GetMemberMaidenFName() string {
	if x != nil {
		return x.MemberMaidenFName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetMemberMaidenLName() string {
	if x != nil {
		return x.MemberMaidenLName
	}
	return ""
}

func (x *KPLUSCustomerResponse) GetMemberMaidenMName() string {
	if x != nil {
		return x.MemberMaidenMName
	}
	return ""
}

type KPLUSCustSavingsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid        int64   `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Acc        string  `protobuf:"bytes,2,opt,name=acc,proto3" json:"acc,omitempty"`
	AcctType   int64   `protobuf:"varint,3,opt,name=acctType,proto3" json:"acctType,omitempty"`
	AccDesc    string  `protobuf:"bytes,4,opt,name=accDesc,proto3" json:"accDesc,omitempty"`
	Dopen      string  `protobuf:"bytes,5,opt,name=dopen,proto3" json:"dopen,omitempty"`
	StatusDesc string  `protobuf:"bytes,6,opt,name=statusDesc,proto3" json:"statusDesc,omitempty"`
	Balance    float64 `protobuf:"fixed64,7,opt,name=balance,proto3" json:"balance,omitempty"`
	Status     int64   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KPLUSCustSavingsList) Reset() {
	*x = KPLUSCustSavingsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSCustSavingsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSCustSavingsList) ProtoMessage() {}

func (x *KPLUSCustSavingsList) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSCustSavingsList.ProtoReflect.Descriptor instead.
func (*KPLUSCustSavingsList) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{4}
}

func (x *KPLUSCustSavingsList) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *KPLUSCustSavingsList) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *KPLUSCustSavingsList) GetAcctType() int64 {
	if x != nil {
		return x.AcctType
	}
	return 0
}

func (x *KPLUSCustSavingsList) GetAccDesc() string {
	if x != nil {
		return x.AccDesc
	}
	return ""
}

func (x *KPLUSCustSavingsList) GetDopen() string {
	if x != nil {
		return x.Dopen
	}
	return ""
}

func (x *KPLUSCustSavingsList) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

func (x *KPLUSCustSavingsList) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *KPLUSCustSavingsList) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type KPLUSCustSavingsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustSavingsList []*KPLUSCustSavingsList `protobuf:"bytes,1,rep,name=custSavingsList,proto3" json:"custSavingsList,omitempty"`
}

func (x *KPLUSCustSavingsListResponse) Reset() {
	*x = KPLUSCustSavingsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSCustSavingsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSCustSavingsListResponse) ProtoMessage() {}

func (x *KPLUSCustSavingsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSCustSavingsListResponse.ProtoReflect.Descriptor instead.
func (*KPLUSCustSavingsListResponse) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{5}
}

func (x *KPLUSCustSavingsListResponse) GetCustSavingsList() []*KPLUSCustSavingsList {
	if x != nil {
		return x.CustSavingsList
	}
	return nil
}

type KPLUSGetTransactionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acc      string `protobuf:"bytes,1,opt,name=acc,proto3" json:"acc,omitempty"`
	DateFrom string `protobuf:"bytes,2,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
	DateTo   string `protobuf:"bytes,3,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`
}

func (x *KPLUSGetTransactionHistoryRequest) Reset() {
	*x = KPLUSGetTransactionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSGetTransactionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSGetTransactionHistoryRequest) ProtoMessage() {}

func (x *KPLUSGetTransactionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSGetTransactionHistoryRequest.ProtoReflect.Descriptor instead.
func (*KPLUSGetTransactionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{6}
}

func (x *KPLUSGetTransactionHistoryRequest) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *KPLUSGetTransactionHistoryRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *KPLUSGetTransactionHistoryRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

type KPLUSTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    int64   `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Acc          string  `protobuf:"bytes,2,opt,name=acc,proto3" json:"acc,omitempty"`
	Trndate      string  `protobuf:"bytes,3,opt,name=trndate,proto3" json:"trndate,omitempty"`
	TrnHeadId    int64   `protobuf:"varint,4,opt,name=trnHeadId,proto3" json:"trnHeadId,omitempty"`
	Trn          int64   `protobuf:"varint,5,opt,name=trn,proto3" json:"trn,omitempty"`
	AlternateKey string  `protobuf:"bytes,6,opt,name=alternateKey,proto3" json:"alternateKey,omitempty"`
	Prin         float64 `protobuf:"fixed64,7,opt,name=prin,proto3" json:"prin,omitempty"`
	Intr         float64 `protobuf:"fixed64,8,opt,name=intr,proto3" json:"intr,omitempty"`
	TrnAmount    float64 `protobuf:"fixed64,9,opt,name=trnAmount,proto3" json:"trnAmount,omitempty"`
	BalPrin      float64 `protobuf:"fixed64,10,opt,name=balPrin,proto3" json:"balPrin,omitempty"`
	BalInt       float64 `protobuf:"fixed64,11,opt,name=balInt,proto3" json:"balInt,omitempty"`
	Balance      float64 `protobuf:"fixed64,12,opt,name=balance,proto3" json:"balance,omitempty"`
	Particulars  string  `protobuf:"bytes,13,opt,name=particulars,proto3" json:"particulars,omitempty"`
	TrnType      string  `protobuf:"bytes,14,opt,name=trnType,proto3" json:"trnType,omitempty"`
	Username     string  `protobuf:"bytes,15,opt,name=username,proto3" json:"username,omitempty"`
	IsFinancial  bool    `protobuf:"varint,16,opt,name=isFinancial,proto3" json:"isFinancial,omitempty"`
}

func (x *KPLUSTransaction) Reset() {
	*x = KPLUSTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSTransaction) ProtoMessage() {}

func (x *KPLUSTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSTransaction.ProtoReflect.Descriptor instead.
func (*KPLUSTransaction) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{7}
}

func (x *KPLUSTransaction) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *KPLUSTransaction) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *KPLUSTransaction) GetTrndate() string {
	if x != nil {
		return x.Trndate
	}
	return ""
}

func (x *KPLUSTransaction) GetTrnHeadId() int64 {
	if x != nil {
		return x.TrnHeadId
	}
	return 0
}

func (x *KPLUSTransaction) GetTrn() int64 {
	if x != nil {
		return x.Trn
	}
	return 0
}

func (x *KPLUSTransaction) GetAlternateKey() string {
	if x != nil {
		return x.AlternateKey
	}
	return ""
}

func (x *KPLUSTransaction) GetPrin() float64 {
	if x != nil {
		return x.Prin
	}
	return 0
}

func (x *KPLUSTransaction) GetIntr() float64 {
	if x != nil {
		return x.Intr
	}
	return 0
}

func (x *KPLUSTransaction) GetTrnAmount() float64 {
	if x != nil {
		return x.TrnAmount
	}
	return 0
}

func (x *KPLUSTransaction) GetBalPrin() float64 {
	if x != nil {
		return x.BalPrin
	}
	return 0
}

func (x *KPLUSTransaction) GetBalInt() float64 {
	if x != nil {
		return x.BalInt
	}
	return 0
}

func (x *KPLUSTransaction) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *KPLUSTransaction) GetParticulars() string {
	if x != nil {
		return x.Particulars
	}
	return ""
}

func (x *KPLUSTransaction) GetTrnType() string {
	if x != nil {
		return x.TrnType
	}
	return ""
}

func (x *KPLUSTransaction) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *KPLUSTransaction) GetIsFinancial() bool {
	if x != nil {
		return x.IsFinancial
	}
	return false
}

type KPLUSGetTransactionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction []*KPLUSTransaction `protobuf:"bytes,1,rep,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *KPLUSGetTransactionHistoryResponse) Reset() {
	*x = KPLUSGetTransactionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSGetTransactionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSGetTransactionHistoryResponse) ProtoMessage() {}

func (x *KPLUSGetTransactionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSGetTransactionHistoryResponse.ProtoReflect.Descriptor instead.
func (*KPLUSGetTransactionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{8}
}

func (x *KPLUSGetTransactionHistoryResponse) GetTransaction() []*KPLUSTransaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type KPLUSColShtperCID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	INAIIID         string  `protobuf:"bytes,1,opt,name=iNAIIID,proto3" json:"iNAIIID,omitempty"`
	BrCode          string  `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	AppType         int64   `protobuf:"varint,3,opt,name=appType,proto3" json:"appType,omitempty"`
	Code            int64   `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	Status          int64   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	StatusDesc      string  `protobuf:"bytes,6,opt,name=statusDesc,proto3" json:"statusDesc,omitempty"`
	Acc             string  `protobuf:"bytes,7,opt,name=acc,proto3" json:"acc,omitempty"`
	Iiid            int64   `protobuf:"varint,8,opt,name=iiid,proto3" json:"iiid,omitempty"`
	CustomerId      int64   `protobuf:"varint,9,opt,name=customerId,proto3" json:"customerId,omitempty"`
	CentralOfficeId int64   `protobuf:"varint,10,opt,name=centralOfficeId,proto3" json:"centralOfficeId,omitempty"`
	CID             int64   `protobuf:"varint,11,opt,name=cID,proto3" json:"cID,omitempty"`
	UM              string  `protobuf:"bytes,12,opt,name=uM,proto3" json:"uM,omitempty"`
	ClientName      string  `protobuf:"bytes,13,opt,name=clientName,proto3" json:"clientName,omitempty"`
	CenterCode      int64   `protobuf:"varint,14,opt,name=centerCode,proto3" json:"centerCode,omitempty"`
	CenterName      string  `protobuf:"bytes,15,opt,name=centerName,proto3" json:"centerName,omitempty"`
	ManCode         int64   `protobuf:"varint,16,opt,name=manCode,proto3" json:"manCode,omitempty"`
	Unit            string  `protobuf:"bytes,17,opt,name=unit,proto3" json:"unit,omitempty"`
	AreaCode        int64   `protobuf:"varint,18,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Area            string  `protobuf:"bytes,19,opt,name=area,proto3" json:"area,omitempty"`
	StaffName       string  `protobuf:"bytes,20,opt,name=staffName,proto3" json:"staffName,omitempty"`
	AcctType        int64   `protobuf:"varint,21,opt,name=acctType,proto3" json:"acctType,omitempty"`
	AcctDesc        string  `protobuf:"bytes,22,opt,name=acctDesc,proto3" json:"acctDesc,omitempty"`
	DisbDate        string  `protobuf:"bytes,23,opt,name=disbDate,proto3" json:"disbDate,omitempty"`
	DateStart       string  `protobuf:"bytes,24,opt,name=dateStart,proto3" json:"dateStart,omitempty"`
	Maturity        string  `protobuf:"bytes,25,opt,name=maturity,proto3" json:"maturity,omitempty"`
	Principal       float64 `protobuf:"fixed64,26,opt,name=principal,proto3" json:"principal,omitempty"`
	Interest        float64 `protobuf:"fixed64,27,opt,name=interest,proto3" json:"interest,omitempty"`
	Gives           int64   `protobuf:"varint,28,opt,name=gives,proto3" json:"gives,omitempty"`
	IbalPrin        float64 `protobuf:"fixed64,29,opt,name=ibalPrin,proto3" json:"ibalPrin,omitempty"`
	IbalInt         float64 `protobuf:"fixed64,30,opt,name=ibalInt,proto3" json:"ibalInt,omitempty"`
	BalPrin         float64 `protobuf:"fixed64,31,opt,name=balPrin,proto3" json:"balPrin,omitempty"`
	BalInt          float64 `protobuf:"fixed64,32,opt,name=balInt,proto3" json:"balInt,omitempty"`
	Amort           float64 `protobuf:"fixed64,33,opt,name=amort,proto3" json:"amort,omitempty"`
	DuePrin         float64 `protobuf:"fixed64,34,opt,name=duePrin,proto3" json:"duePrin,omitempty"`
	DueInt          float64 `protobuf:"fixed64,35,opt,name=dueInt,proto3" json:"dueInt,omitempty"`
	LoanBal         float64 `protobuf:"fixed64,36,opt,name=loanBal,proto3" json:"loanBal,omitempty"`
	SaveBal         float64 `protobuf:"fixed64,37,opt,name=saveBal,proto3" json:"saveBal,omitempty"`
	WaivedInt       float64 `protobuf:"fixed64,38,opt,name=waivedInt,proto3" json:"waivedInt,omitempty"`
	UnPaidCtr       int64   `protobuf:"varint,39,opt,name=unPaidCtr,proto3" json:"unPaidCtr,omitempty"`
	WritenOff       int64   `protobuf:"varint,40,opt,name=writenOff,proto3" json:"writenOff,omitempty"`
	Classification  int64   `protobuf:"varint,41,opt,name=classification,proto3" json:"classification,omitempty"`
	ClassDesc       int64   `protobuf:"varint,42,opt,name=classDesc,proto3" json:"classDesc,omitempty"`
	WriteOff        int64   `protobuf:"varint,43,opt,name=writeOff,proto3" json:"writeOff,omitempty"`
	Pay             float64 `protobuf:"fixed64,44,opt,name=pay,proto3" json:"pay,omitempty"`
	Withdraw        float64 `protobuf:"fixed64,45,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	Type            int64   `protobuf:"varint,46,opt,name=type,proto3" json:"type,omitempty"`
	OrgName         string  `protobuf:"bytes,47,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OrgAddress      string  `protobuf:"bytes,48,opt,name=orgAddress,proto3" json:"orgAddress,omitempty"`
	MeetingDate     string  `protobuf:"bytes,49,opt,name=meetingDate,proto3" json:"meetingDate,omitempty"`
	MeetingDay      int64   `protobuf:"varint,50,opt,name=meetingDay,proto3" json:"meetingDay,omitempty"`
	SharesOfStock   float64 `protobuf:"fixed64,51,opt,name=sharesOfStock,proto3" json:"sharesOfStock,omitempty"`
	DateEstablished string  `protobuf:"bytes,52,opt,name=dateEstablished,proto3" json:"dateEstablished,omitempty"`
	Uuid            string  `protobuf:"bytes,53,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *KPLUSColShtperCID) Reset() {
	*x = KPLUSColShtperCID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSColShtperCID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSColShtperCID) ProtoMessage() {}

func (x *KPLUSColShtperCID) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSColShtperCID.ProtoReflect.Descriptor instead.
func (*KPLUSColShtperCID) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{9}
}

func (x *KPLUSColShtperCID) GetINAIIID() string {
	if x != nil {
		return x.INAIIID
	}
	return ""
}

func (x *KPLUSColShtperCID) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *KPLUSColShtperCID) GetAppType() int64 {
	if x != nil {
		return x.AppType
	}
	return 0
}

func (x *KPLUSColShtperCID) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *KPLUSColShtperCID) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *KPLUSColShtperCID) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

func (x *KPLUSColShtperCID) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *KPLUSColShtperCID) GetIiid() int64 {
	if x != nil {
		return x.Iiid
	}
	return 0
}

func (x *KPLUSColShtperCID) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *KPLUSColShtperCID) GetCentralOfficeId() int64 {
	if x != nil {
		return x.CentralOfficeId
	}
	return 0
}

func (x *KPLUSColShtperCID) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *KPLUSColShtperCID) GetUM() string {
	if x != nil {
		return x.UM
	}
	return ""
}

func (x *KPLUSColShtperCID) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *KPLUSColShtperCID) GetCenterCode() int64 {
	if x != nil {
		return x.CenterCode
	}
	return 0
}

func (x *KPLUSColShtperCID) GetCenterName() string {
	if x != nil {
		return x.CenterName
	}
	return ""
}

func (x *KPLUSColShtperCID) GetManCode() int64 {
	if x != nil {
		return x.ManCode
	}
	return 0
}

func (x *KPLUSColShtperCID) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *KPLUSColShtperCID) GetAreaCode() int64 {
	if x != nil {
		return x.AreaCode
	}
	return 0
}

func (x *KPLUSColShtperCID) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *KPLUSColShtperCID) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *KPLUSColShtperCID) GetAcctType() int64 {
	if x != nil {
		return x.AcctType
	}
	return 0
}

func (x *KPLUSColShtperCID) GetAcctDesc() string {
	if x != nil {
		return x.AcctDesc
	}
	return ""
}

func (x *KPLUSColShtperCID) GetDisbDate() string {
	if x != nil {
		return x.DisbDate
	}
	return ""
}

func (x *KPLUSColShtperCID) GetDateStart() string {
	if x != nil {
		return x.DateStart
	}
	return ""
}

func (x *KPLUSColShtperCID) GetMaturity() string {
	if x != nil {
		return x.Maturity
	}
	return ""
}

func (x *KPLUSColShtperCID) GetPrincipal() float64 {
	if x != nil {
		return x.Principal
	}
	return 0
}

func (x *KPLUSColShtperCID) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *KPLUSColShtperCID) GetGives() int64 {
	if x != nil {
		return x.Gives
	}
	return 0
}

func (x *KPLUSColShtperCID) GetIbalPrin() float64 {
	if x != nil {
		return x.IbalPrin
	}
	return 0
}

func (x *KPLUSColShtperCID) GetIbalInt() float64 {
	if x != nil {
		return x.IbalInt
	}
	return 0
}

func (x *KPLUSColShtperCID) GetBalPrin() float64 {
	if x != nil {
		return x.BalPrin
	}
	return 0
}

func (x *KPLUSColShtperCID) GetBalInt() float64 {
	if x != nil {
		return x.BalInt
	}
	return 0
}

func (x *KPLUSColShtperCID) GetAmort() float64 {
	if x != nil {
		return x.Amort
	}
	return 0
}

func (x *KPLUSColShtperCID) GetDuePrin() float64 {
	if x != nil {
		return x.DuePrin
	}
	return 0
}

func (x *KPLUSColShtperCID) GetDueInt() float64 {
	if x != nil {
		return x.DueInt
	}
	return 0
}

func (x *KPLUSColShtperCID) GetLoanBal() float64 {
	if x != nil {
		return x.LoanBal
	}
	return 0
}

func (x *KPLUSColShtperCID) GetSaveBal() float64 {
	if x != nil {
		return x.SaveBal
	}
	return 0
}

func (x *KPLUSColShtperCID) GetWaivedInt() float64 {
	if x != nil {
		return x.WaivedInt
	}
	return 0
}

func (x *KPLUSColShtperCID) GetUnPaidCtr() int64 {
	if x != nil {
		return x.UnPaidCtr
	}
	return 0
}

func (x *KPLUSColShtperCID) GetWritenOff() int64 {
	if x != nil {
		return x.WritenOff
	}
	return 0
}

func (x *KPLUSColShtperCID) GetClassification() int64 {
	if x != nil {
		return x.Classification
	}
	return 0
}

func (x *KPLUSColShtperCID) GetClassDesc() int64 {
	if x != nil {
		return x.ClassDesc
	}
	return 0
}

func (x *KPLUSColShtperCID) GetWriteOff() int64 {
	if x != nil {
		return x.WriteOff
	}
	return 0
}

func (x *KPLUSColShtperCID) GetPay() float64 {
	if x != nil {
		return x.Pay
	}
	return 0
}

func (x *KPLUSColShtperCID) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *KPLUSColShtperCID) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *KPLUSColShtperCID) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *KPLUSColShtperCID) GetOrgAddress() string {
	if x != nil {
		return x.OrgAddress
	}
	return ""
}

func (x *KPLUSColShtperCID) GetMeetingDate() string {
	if x != nil {
		return x.MeetingDate
	}
	return ""
}

func (x *KPLUSColShtperCID) GetMeetingDay() int64 {
	if x != nil {
		return x.MeetingDay
	}
	return 0
}

func (x *KPLUSColShtperCID) GetSharesOfStock() float64 {
	if x != nil {
		return x.SharesOfStock
	}
	return 0
}

func (x *KPLUSColShtperCID) GetDateEstablished() string {
	if x != nil {
		return x.DateEstablished
	}
	return ""
}

func (x *KPLUSColShtperCID) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type KPLUSGenerateColShtperCIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KPLUSColShtperCID []*KPLUSColShtperCID `protobuf:"bytes,1,rep,name=KPLUSColShtperCID,proto3" json:"KPLUSColShtperCID,omitempty"`
}

func (x *KPLUSGenerateColShtperCIDResponse) Reset() {
	*x = KPLUSGenerateColShtperCIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSGenerateColShtperCIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSGenerateColShtperCIDResponse) ProtoMessage() {}

func (x *KPLUSGenerateColShtperCIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSGenerateColShtperCIDResponse.ProtoReflect.Descriptor instead.
func (*KPLUSGenerateColShtperCIDResponse) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{10}
}

func (x *KPLUSGenerateColShtperCIDResponse) GetKPLUSColShtperCID() []*KPLUSColShtperCID {
	if x != nil {
		return x.KPLUSColShtperCID
	}
	return nil
}

type KPLUSCallBackRefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrNumber string `protobuf:"bytes,1,opt,name=prNumber,proto3" json:"prNumber,omitempty"`
}

func (x *KPLUSCallBackRefRequest) Reset() {
	*x = KPLUSCallBackRefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSCallBackRefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSCallBackRefRequest) ProtoMessage() {}

func (x *KPLUSCallBackRefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSCallBackRefRequest.ProtoReflect.Descriptor instead.
func (*KPLUSCallBackRefRequest) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{11}
}

func (x *KPLUSCallBackRefRequest) GetPrNumber() string {
	if x != nil {
		return x.PrNumber
	}
	return ""
}

type KPLUSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode   int64  `protobuf:"varint,1,opt,name=retCode,proto3" json:"retCode,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Reference string `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *KPLUSResponse) Reset() {
	*x = KPLUSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSResponse) ProtoMessage() {}

func (x *KPLUSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSResponse.ProtoReflect.Descriptor instead.
func (*KPLUSResponse) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{12}
}

func (x *KPLUSResponse) GetRetCode() int64 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *KPLUSResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *KPLUSResponse) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

type KPLUSPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acc      string  `protobuf:"bytes,1,opt,name=acc,proto3" json:"acc,omitempty"`
	Pay      float64 `protobuf:"fixed64,2,opt,name=pay,proto3" json:"pay,omitempty"`
	Withdraw float64 `protobuf:"fixed64,3,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	AppType  int64   `protobuf:"varint,4,opt,name=appType,proto3" json:"appType,omitempty"`
}

func (x *KPLUSPayment) Reset() {
	*x = KPLUSPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSPayment) ProtoMessage() {}

func (x *KPLUSPayment) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSPayment.ProtoReflect.Descriptor instead.
func (*KPLUSPayment) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{13}
}

func (x *KPLUSPayment) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *KPLUSPayment) GetPay() float64 {
	if x != nil {
		return x.Pay
	}
	return 0
}

func (x *KPLUSPayment) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *KPLUSPayment) GetAppType() int64 {
	if x != nil {
		return x.AppType
	}
	return 0
}

type KPLUSMultiplePaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemitterCID     string          `protobuf:"bytes,1,opt,name=remitterCID,proto3" json:"remitterCID,omitempty"`
	PrNumber        string          `protobuf:"bytes,2,opt,name=prNumber,proto3" json:"prNumber,omitempty"`
	SourceId        int64           `protobuf:"varint,3,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
	OrNumber        int64           `protobuf:"varint,4,opt,name=orNumber,proto3" json:"orNumber,omitempty"`
	Username        string          `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Trndate         string          `protobuf:"bytes,6,opt,name=trndate,proto3" json:"trndate,omitempty"`
	TotalCollection float64         `protobuf:"fixed64,7,opt,name=totalCollection,proto3" json:"totalCollection,omitempty"`
	Particulars     string          `protobuf:"bytes,8,opt,name=particulars,proto3" json:"particulars,omitempty"`
	Payment         []*KPLUSPayment `protobuf:"bytes,9,rep,name=payment,proto3" json:"payment,omitempty"`
}

func (x *KPLUSMultiplePaymentRequest) Reset() {
	*x = KPLUSMultiplePaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSMultiplePaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSMultiplePaymentRequest) ProtoMessage() {}

func (x *KPLUSMultiplePaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSMultiplePaymentRequest.ProtoReflect.Descriptor instead.
func (*KPLUSMultiplePaymentRequest) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{14}
}

func (x *KPLUSMultiplePaymentRequest) GetRemitterCID() string {
	if x != nil {
		return x.RemitterCID
	}
	return ""
}

func (x *KPLUSMultiplePaymentRequest) GetPrNumber() string {
	if x != nil {
		return x.PrNumber
	}
	return ""
}

func (x *KPLUSMultiplePaymentRequest) GetSourceId() int64 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *KPLUSMultiplePaymentRequest) GetOrNumber() int64 {
	if x != nil {
		return x.OrNumber
	}
	return 0
}

func (x *KPLUSMultiplePaymentRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *KPLUSMultiplePaymentRequest) GetTrndate() string {
	if x != nil {
		return x.Trndate
	}
	return ""
}

func (x *KPLUSMultiplePaymentRequest) GetTotalCollection() float64 {
	if x != nil {
		return x.TotalCollection
	}
	return 0
}

func (x *KPLUSMultiplePaymentRequest) GetParticulars() string {
	if x != nil {
		return x.Particulars
	}
	return ""
}

func (x *KPLUSMultiplePaymentRequest) GetPayment() []*KPLUSPayment {
	if x != nil {
		return x.Payment
	}
	return nil
}

type KPLUSGetReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *KPLUSGetReferencesRequest) Reset() {
	*x = KPLUSGetReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSGetReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSGetReferencesRequest) ProtoMessage() {}

func (x *KPLUSGetReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSGetReferencesRequest.ProtoReflect.Descriptor instead.
func (*KPLUSGetReferencesRequest) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{15}
}

func (x *KPLUSGetReferencesRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

type KPLUSReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             int64  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	RefType            string `protobuf:"bytes,2,opt,name=refType,proto3" json:"refType,omitempty"`
	Code               int64  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	ShortName          string `protobuf:"bytes,4,opt,name=shortName,proto3" json:"shortName,omitempty"`
	OwnerRID           int64  `protobuf:"varint,5,opt,name=ownerRID,proto3" json:"ownerRID,omitempty"`
	StatusID           int64  `protobuf:"varint,6,opt,name=statusID,proto3" json:"statusID,omitempty"`
	Title              string `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	RefTypeID          int64  `protobuf:"varint,8,opt,name=refTypeID,proto3" json:"refTypeID,omitempty"`
	RefTypeRID         int64  `protobuf:"varint,9,opt,name=refTypeRID,proto3" json:"refTypeRID,omitempty"`
	RefTypeTitle       string `protobuf:"bytes,10,opt,name=refTypeTitle,proto3" json:"refTypeTitle,omitempty"`
	RefID              int64  `protobuf:"varint,11,opt,name=refID,proto3" json:"refID,omitempty"`
	RefRID             int64  `protobuf:"varint,12,opt,name=refRID,proto3" json:"refRID,omitempty"`
	ParentID           int64  `protobuf:"varint,13,opt,name=parentID,proto3" json:"parentID,omitempty"`
	RefTypeParentID    int64  `protobuf:"varint,14,opt,name=refTypeParentID,proto3" json:"refTypeParentID,omitempty"`
	RefTypeParent      string `protobuf:"bytes,15,opt,name=refTypeParent,proto3" json:"refTypeParent,omitempty"`
	RefTypeTitleParent string `protobuf:"bytes,16,opt,name=refTypeTitleParent,proto3" json:"refTypeTitleParent,omitempty"`
	Xml                string `protobuf:"bytes,17,opt,name=xml,proto3" json:"xml,omitempty"`
	Parent             string `protobuf:"bytes,18,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *KPLUSReferences) Reset() {
	*x = KPLUSReferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSReferences) ProtoMessage() {}

func (x *KPLUSReferences) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSReferences.ProtoReflect.Descriptor instead.
func (*KPLUSReferences) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{16}
}

func (x *KPLUSReferences) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *KPLUSReferences) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *KPLUSReferences) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *KPLUSReferences) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *KPLUSReferences) GetOwnerRID() int64 {
	if x != nil {
		return x.OwnerRID
	}
	return 0
}

func (x *KPLUSReferences) GetStatusID() int64 {
	if x != nil {
		return x.StatusID
	}
	return 0
}

func (x *KPLUSReferences) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *KPLUSReferences) GetRefTypeID() int64 {
	if x != nil {
		return x.RefTypeID
	}
	return 0
}

func (x *KPLUSReferences) GetRefTypeRID() int64 {
	if x != nil {
		return x.RefTypeRID
	}
	return 0
}

func (x *KPLUSReferences) GetRefTypeTitle() string {
	if x != nil {
		return x.RefTypeTitle
	}
	return ""
}

func (x *KPLUSReferences) GetRefID() int64 {
	if x != nil {
		return x.RefID
	}
	return 0
}

func (x *KPLUSReferences) GetRefRID() int64 {
	if x != nil {
		return x.RefRID
	}
	return 0
}

func (x *KPLUSReferences) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *KPLUSReferences) GetRefTypeParentID() int64 {
	if x != nil {
		return x.RefTypeParentID
	}
	return 0
}

func (x *KPLUSReferences) GetRefTypeParent() string {
	if x != nil {
		return x.RefTypeParent
	}
	return ""
}

func (x *KPLUSReferences) GetRefTypeTitleParent() string {
	if x != nil {
		return x.RefTypeTitleParent
	}
	return ""
}

func (x *KPLUSReferences) GetXml() string {
	if x != nil {
		return x.Xml
	}
	return ""
}

func (x *KPLUSReferences) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type KPLUSGetReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	References []*KPLUSReferences `protobuf:"bytes,1,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *KPLUSGetReferencesResponse) Reset() {
	*x = KPLUSGetReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSGetReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSGetReferencesResponse) ProtoMessage() {}

func (x *KPLUSGetReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSGetReferencesResponse.ProtoReflect.Descriptor instead.
func (*KPLUSGetReferencesResponse) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{17}
}

func (x *KPLUSGetReferencesResponse) GetReferences() []*KPLUSReferences {
	if x != nil {
		return x.References
	}
	return nil
}

type KPLUSLoan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acc         string  `protobuf:"bytes,1,opt,name=acc,proto3" json:"acc,omitempty"`
	Status      int64   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	DateRelease string  `protobuf:"bytes,3,opt,name=dateRelease,proto3" json:"dateRelease,omitempty"`
	AcctType    int64   `protobuf:"varint,4,opt,name=acctType,proto3" json:"acctType,omitempty"`
	Principal   float64 `protobuf:"fixed64,5,opt,name=principal,proto3" json:"principal,omitempty"`
	Interest    float64 `protobuf:"fixed64,6,opt,name=interest,proto3" json:"interest,omitempty"`
	Oth         float64 `protobuf:"fixed64,7,opt,name=oth,proto3" json:"oth,omitempty"`
	Balance     float64 `protobuf:"fixed64,8,opt,name=balance,proto3" json:"balance,omitempty"`
	Term        int64   `protobuf:"varint,9,opt,name=term,proto3" json:"term,omitempty"`
	PaidTerm    int64   `protobuf:"varint,10,opt,name=paidTerm,proto3" json:"paidTerm,omitempty"`
}

func (x *KPLUSLoan) Reset() {
	*x = KPLUSLoan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSLoan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSLoan) ProtoMessage() {}

func (x *KPLUSLoan) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSLoan.ProtoReflect.Descriptor instead.
func (*KPLUSLoan) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{18}
}

func (x *KPLUSLoan) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *KPLUSLoan) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *KPLUSLoan) GetDateRelease() string {
	if x != nil {
		return x.DateRelease
	}
	return ""
}

func (x *KPLUSLoan) GetAcctType() int64 {
	if x != nil {
		return x.AcctType
	}
	return 0
}

func (x *KPLUSLoan) GetPrincipal() float64 {
	if x != nil {
		return x.Principal
	}
	return 0
}

func (x *KPLUSLoan) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *KPLUSLoan) GetOth() float64 {
	if x != nil {
		return x.Oth
	}
	return 0
}

func (x *KPLUSLoan) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *KPLUSLoan) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *KPLUSLoan) GetPaidTerm() int64 {
	if x != nil {
		return x.PaidTerm
	}
	return 0
}

type KPLUSSearchLoanListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loan []*KPLUSLoan `protobuf:"bytes,1,rep,name=loan,proto3" json:"loan,omitempty"`
}

func (x *KPLUSSearchLoanListResponse) Reset() {
	*x = KPLUSSearchLoanListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSSearchLoanListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSSearchLoanListResponse) ProtoMessage() {}

func (x *KPLUSSearchLoanListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSSearchLoanListResponse.ProtoReflect.Descriptor instead.
func (*KPLUSSearchLoanListResponse) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{19}
}

func (x *KPLUSSearchLoanListResponse) GetLoan() []*KPLUSLoan {
	if x != nil {
		return x.Loan
	}
	return nil
}

type KPLUSAccRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num string `protobuf:"bytes,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *KPLUSAccRequest) Reset() {
	*x = KPLUSAccRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSAccRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSAccRequest) ProtoMessage() {}

func (x *KPLUSAccRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSAccRequest.ProtoReflect.Descriptor instead.
func (*KPLUSAccRequest) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{20}
}

func (x *KPLUSAccRequest) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

type KPLUSAmort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dnum        int64   `protobuf:"varint,1,opt,name=dnum,proto3" json:"dnum,omitempty"`
	Acc         string  `protobuf:"bytes,2,opt,name=acc,proto3" json:"acc,omitempty"`
	DueDate     string  `protobuf:"bytes,3,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	InstFlag    int64   `protobuf:"varint,4,opt,name=instFlag,proto3" json:"instFlag,omitempty"`
	Prin        float64 `protobuf:"fixed64,5,opt,name=prin,proto3" json:"prin,omitempty"`
	Intr        float64 `protobuf:"fixed64,6,opt,name=intr,proto3" json:"intr,omitempty"`
	Oth         float64 `protobuf:"fixed64,7,opt,name=oth,proto3" json:"oth,omitempty"`
	Penalty     float64 `protobuf:"fixed64,8,opt,name=penalty,proto3" json:"penalty,omitempty"`
	EndBal      float64 `protobuf:"fixed64,9,opt,name=endBal,proto3" json:"endBal,omitempty"`
	EndInt      float64 `protobuf:"fixed64,10,opt,name=endInt,proto3" json:"endInt,omitempty"`
	EndOth      float64 `protobuf:"fixed64,11,opt,name=endOth,proto3" json:"endOth,omitempty"`
	InstPd      float64 `protobuf:"fixed64,12,opt,name=instPd,proto3" json:"instPd,omitempty"`
	PenPd       float64 `protobuf:"fixed64,13,opt,name=penPd,proto3" json:"penPd,omitempty"`
	CarVal      float64 `protobuf:"fixed64,14,opt,name=carVal,proto3" json:"carVal,omitempty"`
	UpInt       float64 `protobuf:"fixed64,15,opt,name=upInt,proto3" json:"upInt,omitempty"`
	ServFee     float64 `protobuf:"fixed64,16,opt,name=servFee,proto3" json:"servFee,omitempty"`
	PledgeAmort float64 `protobuf:"fixed64,17,opt,name=pledgeAmort,proto3" json:"pledgeAmort,omitempty"`
}

func (x *KPLUSAmort) Reset() {
	*x = KPLUSAmort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSAmort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSAmort) ProtoMessage() {}

func (x *KPLUSAmort) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSAmort.ProtoReflect.Descriptor instead.
func (*KPLUSAmort) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{21}
}

func (x *KPLUSAmort) GetDnum() int64 {
	if x != nil {
		return x.Dnum
	}
	return 0
}

func (x *KPLUSAmort) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *KPLUSAmort) GetDueDate() string {
	if x != nil {
		return x.DueDate
	}
	return ""
}

func (x *KPLUSAmort) GetInstFlag() int64 {
	if x != nil {
		return x.InstFlag
	}
	return 0
}

func (x *KPLUSAmort) GetPrin() float64 {
	if x != nil {
		return x.Prin
	}
	return 0
}

func (x *KPLUSAmort) GetIntr() float64 {
	if x != nil {
		return x.Intr
	}
	return 0
}

func (x *KPLUSAmort) GetOth() float64 {
	if x != nil {
		return x.Oth
	}
	return 0
}

func (x *KPLUSAmort) GetPenalty() float64 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *KPLUSAmort) GetEndBal() float64 {
	if x != nil {
		return x.EndBal
	}
	return 0
}

func (x *KPLUSAmort) GetEndInt() float64 {
	if x != nil {
		return x.EndInt
	}
	return 0
}

func (x *KPLUSAmort) GetEndOth() float64 {
	if x != nil {
		return x.EndOth
	}
	return 0
}

func (x *KPLUSAmort) GetInstPd() float64 {
	if x != nil {
		return x.InstPd
	}
	return 0
}

func (x *KPLUSAmort) GetPenPd() float64 {
	if x != nil {
		return x.PenPd
	}
	return 0
}

func (x *KPLUSAmort) GetCarVal() float64 {
	if x != nil {
		return x.CarVal
	}
	return 0
}

func (x *KPLUSAmort) GetUpInt() float64 {
	if x != nil {
		return x.UpInt
	}
	return 0
}

func (x *KPLUSAmort) GetServFee() float64 {
	if x != nil {
		return x.ServFee
	}
	return 0
}

func (x *KPLUSAmort) GetPledgeAmort() float64 {
	if x != nil {
		return x.PledgeAmort
	}
	return 0
}

type KPLUSCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeTypeId int64   `protobuf:"varint,1,opt,name=chargeTypeId,proto3" json:"chargeTypeId,omitempty"`
	ChargeType   string  `protobuf:"bytes,2,opt,name=chargeType,proto3" json:"chargeType,omitempty"`
	RefAcc       string  `protobuf:"bytes,3,opt,name=refAcc,proto3" json:"refAcc,omitempty"`
	Amount       float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *KPLUSCharge) Reset() {
	*x = KPLUSCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSCharge) ProtoMessage() {}

func (x *KPLUSCharge) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSCharge.ProtoReflect.Descriptor instead.
func (*KPLUSCharge) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{22}
}

func (x *KPLUSCharge) GetChargeTypeId() int64 {
	if x != nil {
		return x.ChargeTypeId
	}
	return 0
}

func (x *KPLUSCharge) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *KPLUSCharge) GetRefAcc() string {
	if x != nil {
		return x.RefAcc
	}
	return ""
}

func (x *KPLUSCharge) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type KPLUSCharges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acc     string         `protobuf:"bytes,1,opt,name=acc,proto3" json:"acc,omitempty"`
	Charges []*KPLUSCharge `protobuf:"bytes,2,rep,name=charges,proto3" json:"charges,omitempty"`
}

func (x *KPLUSCharges) Reset() {
	*x = KPLUSCharges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSCharges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSCharges) ProtoMessage() {}

func (x *KPLUSCharges) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSCharges.ProtoReflect.Descriptor instead.
func (*KPLUSCharges) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{23}
}

func (x *KPLUSCharges) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *KPLUSCharges) GetCharges() []*KPLUSCharge {
	if x != nil {
		return x.Charges
	}
	return nil
}

type KPLUSLoanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid                int64         `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Acc                string        `protobuf:"bytes,2,opt,name=acc,proto3" json:"acc,omitempty"`
	AppType            int64         `protobuf:"varint,3,opt,name=appType,proto3" json:"appType,omitempty"`
	AcctType           int64         `protobuf:"varint,4,opt,name=acctType,proto3" json:"acctType,omitempty"`
	Accdesc            string        `protobuf:"bytes,5,opt,name=accdesc,proto3" json:"accdesc,omitempty"`
	Dopen              string        `protobuf:"bytes,6,opt,name=dopen,proto3" json:"dopen,omitempty"`
	Domaturity         string        `protobuf:"bytes,7,opt,name=domaturity,proto3" json:"domaturity,omitempty"`
	Term               int64         `protobuf:"varint,8,opt,name=term,proto3" json:"term,omitempty"`
	Weekspaid          int64         `protobuf:"varint,9,opt,name=weekspaid,proto3" json:"weekspaid,omitempty"`
	Status             int64         `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	Principal          float64       `protobuf:"fixed64,11,opt,name=principal,proto3" json:"principal,omitempty"`
	Interest           float64       `protobuf:"fixed64,12,opt,name=interest,proto3" json:"interest,omitempty"`
	Others             float64       `protobuf:"fixed64,13,opt,name=others,proto3" json:"others,omitempty"`
	Discounted         float64       `protobuf:"fixed64,14,opt,name=discounted,proto3" json:"discounted,omitempty"`
	Netproceed         float64       `protobuf:"fixed64,15,opt,name=netproceed,proto3" json:"netproceed,omitempty"`
	Balance            float64       `protobuf:"fixed64,16,opt,name=balance,proto3" json:"balance,omitempty"`
	Prin               float64       `protobuf:"fixed64,17,opt,name=prin,proto3" json:"prin,omitempty"`
	Intr               float64       `protobuf:"fixed64,18,opt,name=intr,proto3" json:"intr,omitempty"`
	Oth                float64       `protobuf:"fixed64,19,opt,name=oth,proto3" json:"oth,omitempty"`
	Penalty            float64       `protobuf:"fixed64,20,opt,name=penalty,proto3" json:"penalty,omitempty"`
	Waivedint          float64       `protobuf:"fixed64,21,opt,name=waivedint,proto3" json:"waivedint,omitempty"`
	Disbby             string        `protobuf:"bytes,22,opt,name=disbby,proto3" json:"disbby,omitempty"`
	Approvby           string        `protobuf:"bytes,23,opt,name=approvby,proto3" json:"approvby,omitempty"`
	Cycle              int64         `protobuf:"varint,24,opt,name=cycle,proto3" json:"cycle,omitempty"`
	Frequency          int64         `protobuf:"varint,25,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Annumdiv           int64         `protobuf:"varint,26,opt,name=annumdiv,proto3" json:"annumdiv,omitempty"`
	Lngrpcode          int64         `protobuf:"varint,27,opt,name=lngrpcode,proto3" json:"lngrpcode,omitempty"`
	Proff              int64         `protobuf:"varint,28,opt,name=proff,proto3" json:"proff,omitempty"`
	Fundsource         int64         `protobuf:"varint,29,opt,name=fundsource,proto3" json:"fundsource,omitempty"`
	Conintrate         float64       `protobuf:"fixed64,30,opt,name=conintrate,proto3" json:"conintrate,omitempty"`
	Amortcond          int64         `protobuf:"varint,31,opt,name=amortcond,proto3" json:"amortcond,omitempty"`
	Amortcondvalue     float64       `protobuf:"fixed64,32,opt,name=amortcondvalue,proto3" json:"amortcondvalue,omitempty"`
	ClassificationCode int64         `protobuf:"varint,33,opt,name=classification_code,json=classificationCode,proto3" json:"classification_code,omitempty"`
	ClassificationType int64         `protobuf:"varint,34,opt,name=classification_type,json=classificationType,proto3" json:"classification_type,omitempty"`
	Remarks            string        `protobuf:"bytes,35,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Amort              float64       `protobuf:"fixed64,36,opt,name=amort,proto3" json:"amort,omitempty"`
	IsLumpsum          int64         `protobuf:"varint,37,opt,name=isLumpsum,proto3" json:"isLumpsum,omitempty"`
	LoanID             string        `protobuf:"bytes,38,opt,name=loanID,proto3" json:"loanID,omitempty"`
	AmortList          []*KPLUSAmort `protobuf:"bytes,39,rep,name=amortList,proto3" json:"amortList,omitempty"`
	Charges            *KPLUSCharges `protobuf:"bytes,40,opt,name=charges,proto3" json:"charges,omitempty"`
}

func (x *KPLUSLoanInfo) Reset() {
	*x = KPLUSLoanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSLoanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSLoanInfo) ProtoMessage() {}

func (x *KPLUSLoanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSLoanInfo.ProtoReflect.Descriptor instead.
func (*KPLUSLoanInfo) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{24}
}

func (x *KPLUSLoanInfo) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *KPLUSLoanInfo) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *KPLUSLoanInfo) GetAppType() int64 {
	if x != nil {
		return x.AppType
	}
	return 0
}

func (x *KPLUSLoanInfo) GetAcctType() int64 {
	if x != nil {
		return x.AcctType
	}
	return 0
}

func (x *KPLUSLoanInfo) GetAccdesc() string {
	if x != nil {
		return x.Accdesc
	}
	return ""
}

func (x *KPLUSLoanInfo) GetDopen() string {
	if x != nil {
		return x.Dopen
	}
	return ""
}

func (x *KPLUSLoanInfo) GetDomaturity() string {
	if x != nil {
		return x.Domaturity
	}
	return ""
}

func (x *KPLUSLoanInfo) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *KPLUSLoanInfo) GetWeekspaid() int64 {
	if x != nil {
		return x.Weekspaid
	}
	return 0
}

func (x *KPLUSLoanInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *KPLUSLoanInfo) GetPrincipal() float64 {
	if x != nil {
		return x.Principal
	}
	return 0
}

func (x *KPLUSLoanInfo) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *KPLUSLoanInfo) GetOthers() float64 {
	if x != nil {
		return x.Others
	}
	return 0
}

func (x *KPLUSLoanInfo) GetDiscounted() float64 {
	if x != nil {
		return x.Discounted
	}
	return 0
}

func (x *KPLUSLoanInfo) GetNetproceed() float64 {
	if x != nil {
		return x.Netproceed
	}
	return 0
}

func (x *KPLUSLoanInfo) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *KPLUSLoanInfo) GetPrin() float64 {
	if x != nil {
		return x.Prin
	}
	return 0
}

func (x *KPLUSLoanInfo) GetIntr() float64 {
	if x != nil {
		return x.Intr
	}
	return 0
}

func (x *KPLUSLoanInfo) GetOth() float64 {
	if x != nil {
		return x.Oth
	}
	return 0
}

func (x *KPLUSLoanInfo) GetPenalty() float64 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *KPLUSLoanInfo) GetWaivedint() float64 {
	if x != nil {
		return x.Waivedint
	}
	return 0
}

func (x *KPLUSLoanInfo) GetDisbby() string {
	if x != nil {
		return x.Disbby
	}
	return ""
}

func (x *KPLUSLoanInfo) GetApprovby() string {
	if x != nil {
		return x.Approvby
	}
	return ""
}

func (x *KPLUSLoanInfo) GetCycle() int64 {
	if x != nil {
		return x.Cycle
	}
	return 0
}

func (x *KPLUSLoanInfo) GetFrequency() int64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *KPLUSLoanInfo) GetAnnumdiv() int64 {
	if x != nil {
		return x.Annumdiv
	}
	return 0
}

func (x *KPLUSLoanInfo) GetLngrpcode() int64 {
	if x != nil {
		return x.Lngrpcode
	}
	return 0
}

func (x *KPLUSLoanInfo) GetProff() int64 {
	if x != nil {
		return x.Proff
	}
	return 0
}

func (x *KPLUSLoanInfo) GetFundsource() int64 {
	if x != nil {
		return x.Fundsource
	}
	return 0
}

func (x *KPLUSLoanInfo) GetConintrate() float64 {
	if x != nil {
		return x.Conintrate
	}
	return 0
}

func (x *KPLUSLoanInfo) GetAmortcond() int64 {
	if x != nil {
		return x.Amortcond
	}
	return 0
}

func (x *KPLUSLoanInfo) GetAmortcondvalue() float64 {
	if x != nil {
		return x.Amortcondvalue
	}
	return 0
}

func (x *KPLUSLoanInfo) GetClassificationCode() int64 {
	if x != nil {
		return x.ClassificationCode
	}
	return 0
}

func (x *KPLUSLoanInfo) GetClassificationType() int64 {
	if x != nil {
		return x.ClassificationType
	}
	return 0
}

func (x *KPLUSLoanInfo) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *KPLUSLoanInfo) GetAmort() float64 {
	if x != nil {
		return x.Amort
	}
	return 0
}

func (x *KPLUSLoanInfo) GetIsLumpsum() int64 {
	if x != nil {
		return x.IsLumpsum
	}
	return 0
}

func (x *KPLUSLoanInfo) GetLoanID() string {
	if x != nil {
		return x.LoanID
	}
	return ""
}

func (x *KPLUSLoanInfo) GetAmortList() []*KPLUSAmort {
	if x != nil {
		return x.AmortList
	}
	return nil
}

func (x *KPLUSLoanInfo) GetCharges() *KPLUSCharges {
	if x != nil {
		return x.Charges
	}
	return nil
}

type KPLUSLoanInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoanInfo []*KPLUSLoanInfo `protobuf:"bytes,1,rep,name=loanInfo,proto3" json:"loanInfo,omitempty"`
}

func (x *KPLUSLoanInfoResponse) Reset() {
	*x = KPLUSLoanInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSLoanInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSLoanInfoResponse) ProtoMessage() {}

func (x *KPLUSLoanInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSLoanInfoResponse.ProtoReflect.Descriptor instead.
func (*KPLUSLoanInfoResponse) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{25}
}

func (x *KPLUSLoanInfoResponse) GetLoanInfo() []*KPLUSLoanInfo {
	if x != nil {
		return x.LoanInfo
	}
	return nil
}

type KPLUSSavingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid              int64   `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	FullName         string  `protobuf:"bytes,2,opt,name=fullName,proto3" json:"fullName,omitempty"`
	Acc              string  `protobuf:"bytes,3,opt,name=acc,proto3" json:"acc,omitempty"`
	Balance          float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	Withdrawable     float64 `protobuf:"fixed64,5,opt,name=withdrawable,proto3" json:"withdrawable,omitempty"`
	CenterCode       int64   `protobuf:"varint,6,opt,name=centerCode,proto3" json:"centerCode,omitempty"`
	UnitCode         int64   `protobuf:"varint,7,opt,name=unitCode,proto3" json:"unitCode,omitempty"`
	CenterName       string  `protobuf:"bytes,8,opt,name=centerName,proto3" json:"centerName,omitempty"`
	UnitName         string  `protobuf:"bytes,9,opt,name=unitName,proto3" json:"unitName,omitempty"`
	WithdrawalAmount float64 `protobuf:"fixed64,10,opt,name=withdrawalAmount,proto3" json:"withdrawalAmount,omitempty"`
}

func (x *KPLUSSavingInfo) Reset() {
	*x = KPLUSSavingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSSavingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSSavingInfo) ProtoMessage() {}

func (x *KPLUSSavingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSSavingInfo.ProtoReflect.Descriptor instead.
func (*KPLUSSavingInfo) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{26}
}

func (x *KPLUSSavingInfo) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *KPLUSSavingInfo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *KPLUSSavingInfo) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *KPLUSSavingInfo) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *KPLUSSavingInfo) GetWithdrawable() float64 {
	if x != nil {
		return x.Withdrawable
	}
	return 0
}

func (x *KPLUSSavingInfo) GetCenterCode() int64 {
	if x != nil {
		return x.CenterCode
	}
	return 0
}

func (x *KPLUSSavingInfo) GetUnitCode() int64 {
	if x != nil {
		return x.UnitCode
	}
	return 0
}

func (x *KPLUSSavingInfo) GetCenterName() string {
	if x != nil {
		return x.CenterName
	}
	return ""
}

func (x *KPLUSSavingInfo) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *KPLUSSavingInfo) GetWithdrawalAmount() float64 {
	if x != nil {
		return x.WithdrawalAmount
	}
	return 0
}

type KPLUSGetSavingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavingInfo []*KPLUSSavingInfo `protobuf:"bytes,1,rep,name=SavingInfo,proto3" json:"SavingInfo,omitempty"`
}

func (x *KPLUSGetSavingResponse) Reset() {
	*x = KPLUSGetSavingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSGetSavingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSGetSavingResponse) ProtoMessage() {}

func (x *KPLUSGetSavingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSGetSavingResponse.ProtoReflect.Descriptor instead.
func (*KPLUSGetSavingResponse) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{27}
}

func (x *KPLUSGetSavingResponse) GetSavingInfo() []*KPLUSSavingInfo {
	if x != nil {
		return x.SavingInfo
	}
	return nil
}

type KPLUSFundTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceAccount       string  `protobuf:"bytes,1,opt,name=sourceAccount,proto3" json:"sourceAccount,omitempty"`
	TargetAccount       string  `protobuf:"bytes,2,opt,name=targetAccount,proto3" json:"targetAccount,omitempty"`
	Amount              float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Username            string  `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	TrnReference        string  `protobuf:"bytes,5,opt,name=trnReference,proto3" json:"trnReference,omitempty"`
	Particulars         string  `protobuf:"bytes,6,opt,name=particulars,proto3" json:"particulars,omitempty"`
	TransFee            float64 `protobuf:"fixed64,7,opt,name=transFee,proto3" json:"transFee,omitempty"`
	TransFeeParticulars string  `protobuf:"bytes,8,opt,name=transFeeParticulars,proto3" json:"transFeeParticulars,omitempty"`
}

func (x *KPLUSFundTransferRequest) Reset() {
	*x = KPLUSFundTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kplus_message_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KPLUSFundTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KPLUSFundTransferRequest) ProtoMessage() {}

func (x *KPLUSFundTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kplus_message_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KPLUSFundTransferRequest.ProtoReflect.Descriptor instead.
func (*KPLUSFundTransferRequest) Descriptor() ([]byte, []int) {
	return file_kplus_message_proto_rawDescGZIP(), []int{28}
}

func (x *KPLUSFundTransferRequest) GetSourceAccount() string {
	if x != nil {
		return x.SourceAccount
	}
	return ""
}

func (x *KPLUSFundTransferRequest) GetTargetAccount() string {
	if x != nil {
		return x.TargetAccount
	}
	return ""
}

func (x *KPLUSFundTransferRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *KPLUSFundTransferRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *KPLUSFundTransferRequest) GetTrnReference() string {
	if x != nil {
		return x.TrnReference
	}
	return ""
}

func (x *KPLUSFundTransferRequest) GetParticulars() string {
	if x != nil {
		return x.Particulars
	}
	return ""
}

func (x *KPLUSFundTransferRequest) GetTransFee() float64 {
	if x != nil {
		return x.TransFee
	}
	return 0
}

func (x *KPLUSFundTransferRequest) GetTransFeeParticulars() string {
	if x != nil {
		return x.TransFeeParticulars
	}
	return ""
}

var File_kplus_message_proto protoreflect.FileDescriptor

var file_kplus_message_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6b, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x22, 0x96, 0x02, 0x0a, 0x10, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x69, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x69, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x61, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x61, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x4b,
	0x50, 0x4c, 0x55, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x69, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x28, 0x0a, 0x14, 0x4b, 0x50, 0x4c,
	0x55, 0x53, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x63, 0x69, 0x64, 0x22, 0x93, 0x0a, 0x0a, 0x15, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x69,
	0x64, 0x65, 0x6e, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x69, 0x64, 0x65, 0x6e, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x6f, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x6f, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x69, 0x76, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x73, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x73, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x64, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x73, 0x72, 0x69, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x64, 0x6f, 0x73, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x22,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x46,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4d, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61,
	0x69, 0x64, 0x65, 0x6e, 0x4d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x4b, 0x50,
	0x4c, 0x55, 0x53, 0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x6a, 0x0a, 0x1c, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x43, 0x75, 0x73,
	0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x53, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53,
	0x43, 0x75, 0x73, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x6b, 0x0a, 0x21, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0xbc, 0x03,
	0x0a, 0x10, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x63, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x72, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x72,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x70, 0x72, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x72, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x64, 0x0a, 0x22,
	0x4b, 0x50, 0x4c, 0x55, 0x53, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb9, 0x0b, 0x0a, 0x11, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x43, 0x6f, 0x6c, 0x53,
	0x68, 0x74, 0x70, 0x65, 0x72, 0x43, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x4e, 0x41, 0x49,
	0x49, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x4e, 0x41, 0x49, 0x49,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x63, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x69, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x69, 0x69, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x4d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x75, 0x4d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63,
	0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x62, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x62, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x69, 0x76, 0x65, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x69, 0x76, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x69, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x62, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x62, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75,
	0x65, 0x50, 0x72, 0x69, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x75, 0x65,
	0x50, 0x72, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x61, 0x6e, 0x42, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6c,
	0x6f, 0x61, 0x6e, 0x42, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x76, 0x65, 0x42, 0x61,
	0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x61, 0x76, 0x65, 0x42, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x6e, 0x50, 0x61, 0x69, 0x64, 0x43, 0x74, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x6e, 0x50, 0x61, 0x69, 0x64, 0x43, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x61, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x61, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x4f, 0x66, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x66, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x70,
	0x0a, 0x21, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x53, 0x68, 0x74, 0x70, 0x65, 0x72, 0x43, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x43, 0x6f, 0x6c, 0x53,
	0x68, 0x74, 0x70, 0x65, 0x72, 0x43, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55,
	0x53, 0x43, 0x6f, 0x6c, 0x53, 0x68, 0x74, 0x70, 0x65, 0x72, 0x43, 0x49, 0x44, 0x52, 0x11, 0x4b,
	0x50, 0x4c, 0x55, 0x53, 0x43, 0x6f, 0x6c, 0x53, 0x68, 0x74, 0x70, 0x65, 0x72, 0x43, 0x49, 0x44,
	0x22, 0x35, 0x0a, 0x17, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x43, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x0d, 0x4b, 0x50, 0x4c, 0x55, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x68, 0x0a, 0x0c, 0x4b, 0x50,
	0x4c, 0x55, 0x53, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x61, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x1b, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x43, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x43, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x6e, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x39, 0x0a, 0x19, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x99, 0x04, 0x0a, 0x0f,
	0x4b, 0x50, 0x4c, 0x55, 0x53, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66,
	0x52, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x66, 0x52, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x78, 0x6d, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x1a, 0x4b, 0x50, 0x4c, 0x55, 0x53,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x09, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x4c, 0x6f, 0x61, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x63, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6f, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x22, 0x48,
	0x0a, 0x1b, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x6f, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x6c, 0x6f, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x4c, 0x6f,
	0x61, 0x6e, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x6e, 0x22, 0x23, 0x0a, 0x0f, 0x4b, 0x50, 0x4c, 0x55,
	0x53, 0x41, 0x63, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x9c, 0x03,
	0x0a, 0x0a, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x6e, 0x75, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x63, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6f,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x64, 0x42, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x6e,
	0x64, 0x42, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x64, 0x4f, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x6e,
	0x64, 0x4f, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x50, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x50, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x65, 0x6e, 0x50, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x65, 0x6e,
	0x50, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x63, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70,
	0x49, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x70, 0x49, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x46, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x22, 0x81, 0x01, 0x0a,
	0x0b, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x41, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x66, 0x41, 0x63, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x53, 0x0a, 0x0c, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x63, 0x63, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x22, 0x91, 0x09, 0x0a, 0x0d, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x4c,
	0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x70, 0x65,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x70, 0x61,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x70,
	0x61, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6e, 0x74, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6f, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x77,
	0x61, 0x69, 0x76, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73,
	0x62, 0x62, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x62, 0x62,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x62, 0x79, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x62, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x6e, 0x75, 0x6d, 0x64, 0x69, 0x76, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x6e, 0x6e, 0x75, 0x6d, 0x64, 0x69, 0x76, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6e, 0x67, 0x72, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6c, 0x6e, 0x67, 0x72, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x66, 0x66, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x66,
	0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x64, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x63, 0x6f,
	0x6e, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4c,
	0x75, 0x6d, 0x70, 0x73, 0x75, 0x6d, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73,
	0x4c, 0x75, 0x6d, 0x70, 0x73, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x6e, 0x49,
	0x44, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x6e, 0x49, 0x44, 0x12,
	0x34, 0x0a, 0x09, 0x61, 0x6d, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x27, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4b, 0x50, 0x4c, 0x55, 0x53, 0x41, 0x6d, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x15, 0x4b, 0x50, 0x4c,
	0x55, 0x53, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x6c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb3, 0x02, 0x0a, 0x0f, 0x4b, 0x50,
	0x4c, 0x55, 0x53, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x55, 0x0a, 0x16, 0x4b, 0x50, 0x4c, 0x55, 0x53, 0x47, 0x65, 0x74, 0x53, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x53, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4b, 0x50, 0x4c, 0x55, 0x53,
	0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x53, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xae, 0x02, 0x0a, 0x18, 0x4b, 0x50, 0x4c, 0x55, 0x53,
	0x46, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x6e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x46, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x46, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x65,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x46, 0x65, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x42, 0x20, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x66,
	0x64, 0x73, 0x61, 0x70, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x70, 0x62, 0x50, 0x01, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_kplus_message_proto_rawDescOnce sync.Once
	file_kplus_message_proto_rawDescData = file_kplus_message_proto_rawDesc
)

func file_kplus_message_proto_rawDescGZIP() []byte {
	file_kplus_message_proto_rawDescOnce.Do(func() {
		file_kplus_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_kplus_message_proto_rawDescData)
	})
	return file_kplus_message_proto_rawDescData
}

var file_kplus_message_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_kplus_message_proto_goTypes = []interface{}{
	(*KPLUSAddressInfo)(nil),                   // 0: simplebank.KPLUSAddressInfo
	(*KPLUSContact)(nil),                       // 1: simplebank.KPLUSContact
	(*KPLUSCustomerRequest)(nil),               // 2: simplebank.KPLUSCustomerRequest
	(*KPLUSCustomerResponse)(nil),              // 3: simplebank.KPLUSCustomerResponse
	(*KPLUSCustSavingsList)(nil),               // 4: simplebank.KPLUSCustSavingsList
	(*KPLUSCustSavingsListResponse)(nil),       // 5: simplebank.KPLUSCustSavingsListResponse
	(*KPLUSGetTransactionHistoryRequest)(nil),  // 6: simplebank.KPLUSGetTransactionHistoryRequest
	(*KPLUSTransaction)(nil),                   // 7: simplebank.KPLUSTransaction
	(*KPLUSGetTransactionHistoryResponse)(nil), // 8: simplebank.KPLUSGetTransactionHistoryResponse
	(*KPLUSColShtperCID)(nil),                  // 9: simplebank.KPLUSColShtperCID
	(*KPLUSGenerateColShtperCIDResponse)(nil),  // 10: simplebank.KPLUSGenerateColShtperCIDResponse
	(*KPLUSCallBackRefRequest)(nil),            // 11: simplebank.KPLUSCallBackRefRequest
	(*KPLUSResponse)(nil),                      // 12: simplebank.KPLUSResponse
	(*KPLUSPayment)(nil),                       // 13: simplebank.KPLUSPayment
	(*KPLUSMultiplePaymentRequest)(nil),        // 14: simplebank.KPLUSMultiplePaymentRequest
	(*KPLUSGetReferencesRequest)(nil),          // 15: simplebank.KPLUSGetReferencesRequest
	(*KPLUSReferences)(nil),                    // 16: simplebank.KPLUSReferences
	(*KPLUSGetReferencesResponse)(nil),         // 17: simplebank.KPLUSGetReferencesResponse
	(*KPLUSLoan)(nil),                          // 18: simplebank.KPLUSLoan
	(*KPLUSSearchLoanListResponse)(nil),        // 19: simplebank.KPLUSSearchLoanListResponse
	(*KPLUSAccRequest)(nil),                    // 20: simplebank.KPLUSAccRequest
	(*KPLUSAmort)(nil),                         // 21: simplebank.KPLUSAmort
	(*KPLUSCharge)(nil),                        // 22: simplebank.KPLUSCharge
	(*KPLUSCharges)(nil),                       // 23: simplebank.KPLUSCharges
	(*KPLUSLoanInfo)(nil),                      // 24: simplebank.KPLUSLoanInfo
	(*KPLUSLoanInfoResponse)(nil),              // 25: simplebank.KPLUSLoanInfoResponse
	(*KPLUSSavingInfo)(nil),                    // 26: simplebank.KPLUSSavingInfo
	(*KPLUSGetSavingResponse)(nil),             // 27: simplebank.KPLUSGetSavingResponse
	(*KPLUSFundTransferRequest)(nil),           // 28: simplebank.KPLUSFundTransferRequest
}
var file_kplus_message_proto_depIdxs = []int32{
	0,  // 0: simplebank.KPLUSCustomerResponse.address:type_name -> simplebank.KPLUSAddressInfo
	1,  // 1: simplebank.KPLUSCustomerResponse.contact:type_name -> simplebank.KPLUSContact
	4,  // 2: simplebank.KPLUSCustSavingsListResponse.custSavingsList:type_name -> simplebank.KPLUSCustSavingsList
	7,  // 3: simplebank.KPLUSGetTransactionHistoryResponse.transaction:type_name -> simplebank.KPLUSTransaction
	9,  // 4: simplebank.KPLUSGenerateColShtperCIDResponse.KPLUSColShtperCID:type_name -> simplebank.KPLUSColShtperCID
	13, // 5: simplebank.KPLUSMultiplePaymentRequest.payment:type_name -> simplebank.KPLUSPayment
	16, // 6: simplebank.KPLUSGetReferencesResponse.references:type_name -> simplebank.KPLUSReferences
	18, // 7: simplebank.KPLUSSearchLoanListResponse.loan:type_name -> simplebank.KPLUSLoan
	22, // 8: simplebank.KPLUSCharges.charges:type_name -> simplebank.KPLUSCharge
	21, // 9: simplebank.KPLUSLoanInfo.amortList:type_name -> simplebank.KPLUSAmort
	23, // 10: simplebank.KPLUSLoanInfo.charges:type_name -> simplebank.KPLUSCharges
	24, // 11: simplebank.KPLUSLoanInfoResponse.loanInfo:type_name -> simplebank.KPLUSLoanInfo
	26, // 12: simplebank.KPLUSGetSavingResponse.SavingInfo:type_name -> simplebank.KPLUSSavingInfo
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_kplus_message_proto_init() }
func file_kplus_message_proto_init() {
	if File_kplus_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kplus_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSAddressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSCustSavingsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSCustSavingsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSGetTransactionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSGetTransactionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSColShtperCID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSGenerateColShtperCIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSCallBackRefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSMultiplePaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSGetReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSReferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSGetReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSLoan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSSearchLoanListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSAccRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSAmort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSCharges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSLoanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSLoanInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSSavingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSGetSavingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kplus_message_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KPLUSFundTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kplus_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kplus_message_proto_goTypes,
		DependencyIndexes: file_kplus_message_proto_depIdxs,
		MessageInfos:      file_kplus_message_proto_msgTypes,
	}.Build()
	File_kplus_message_proto = out.File
	file_kplus_message_proto_rawDesc = nil
	file_kplus_message_proto_goTypes = nil
	file_kplus_message_proto_depIdxs = nil
}
