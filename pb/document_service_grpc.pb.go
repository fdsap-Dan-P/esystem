// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentServiceClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (DocumentService_UploadFileClient, error)
	LoadUploadFile(ctx context.Context, opts ...grpc.CallOption) (DocumentService_LoadUploadFileClient, error)
	CreateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*CreateResponseId, error)
	UpdateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Document, error)
	GetDocumentById(ctx context.Context, in *GetbyIdRequest, opts ...grpc.CallOption) (*Document, error)
	GetDocumentbyUUID(ctx context.Context, in *GetbyUuidRequest, opts ...grpc.CallOption) (*Document, error)
	CreateDocumentUser(ctx context.Context, in *DocumentUser, opts ...grpc.CallOption) (*CreateResponseId, error)
	UpdateDocumentUser(ctx context.Context, in *DocumentUser, opts ...grpc.CallOption) (*DocumentUser, error)
	GetDocumentUserById(ctx context.Context, in *GetbyIdRequest, opts ...grpc.CallOption) (*DocumentUser, error)
	GetDocumentUserbyUUID(ctx context.Context, in *GetbyUuidRequest, opts ...grpc.CallOption) (*DocumentUser, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (DocumentService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocumentService_ServiceDesc.Streams[0], "/simplebank.DocumentService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentServiceUploadFileClient{stream}
	return x, nil
}

type DocumentService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type documentServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *documentServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *documentServiceUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *documentServiceClient) LoadUploadFile(ctx context.Context, opts ...grpc.CallOption) (DocumentService_LoadUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocumentService_ServiceDesc.Streams[1], "/simplebank.DocumentService/LoadUploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentServiceLoadUploadFileClient{stream}
	return x, nil
}

type DocumentService_LoadUploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type documentServiceLoadUploadFileClient struct {
	grpc.ClientStream
}

func (x *documentServiceLoadUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *documentServiceLoadUploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *documentServiceClient) CreateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*CreateResponseId, error) {
	out := new(CreateResponseId)
	err := c.cc.Invoke(ctx, "/simplebank.DocumentService/CreateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) UpdateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/simplebank.DocumentService/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocumentById(ctx context.Context, in *GetbyIdRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/simplebank.DocumentService/GetDocumentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocumentbyUUID(ctx context.Context, in *GetbyUuidRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/simplebank.DocumentService/GetDocumentbyUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) CreateDocumentUser(ctx context.Context, in *DocumentUser, opts ...grpc.CallOption) (*CreateResponseId, error) {
	out := new(CreateResponseId)
	err := c.cc.Invoke(ctx, "/simplebank.DocumentService/CreateDocumentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) UpdateDocumentUser(ctx context.Context, in *DocumentUser, opts ...grpc.CallOption) (*DocumentUser, error) {
	out := new(DocumentUser)
	err := c.cc.Invoke(ctx, "/simplebank.DocumentService/UpdateDocumentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocumentUserById(ctx context.Context, in *GetbyIdRequest, opts ...grpc.CallOption) (*DocumentUser, error) {
	out := new(DocumentUser)
	err := c.cc.Invoke(ctx, "/simplebank.DocumentService/GetDocumentUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocumentUserbyUUID(ctx context.Context, in *GetbyUuidRequest, opts ...grpc.CallOption) (*DocumentUser, error) {
	out := new(DocumentUser)
	err := c.cc.Invoke(ctx, "/simplebank.DocumentService/GetDocumentUserbyUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServiceServer is the server API for DocumentService service.
// All implementations must embed UnimplementedDocumentServiceServer
// for forward compatibility
type DocumentServiceServer interface {
	UploadFile(DocumentService_UploadFileServer) error
	LoadUploadFile(DocumentService_LoadUploadFileServer) error
	CreateDocument(context.Context, *Document) (*CreateResponseId, error)
	UpdateDocument(context.Context, *Document) (*Document, error)
	GetDocumentById(context.Context, *GetbyIdRequest) (*Document, error)
	GetDocumentbyUUID(context.Context, *GetbyUuidRequest) (*Document, error)
	CreateDocumentUser(context.Context, *DocumentUser) (*CreateResponseId, error)
	UpdateDocumentUser(context.Context, *DocumentUser) (*DocumentUser, error)
	GetDocumentUserById(context.Context, *GetbyIdRequest) (*DocumentUser, error)
	GetDocumentUserbyUUID(context.Context, *GetbyUuidRequest) (*DocumentUser, error)
	mustEmbedUnimplementedDocumentServiceServer()
}

// UnimplementedDocumentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentServiceServer struct {
}

func (UnimplementedDocumentServiceServer) UploadFile(DocumentService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedDocumentServiceServer) LoadUploadFile(DocumentService_LoadUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadUploadFile not implemented")
}
func (UnimplementedDocumentServiceServer) CreateDocument(context.Context, *Document) (*CreateResponseId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}
func (UnimplementedDocumentServiceServer) UpdateDocument(context.Context, *Document) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocumentById(context.Context, *GetbyIdRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentById not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocumentbyUUID(context.Context, *GetbyUuidRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentbyUUID not implemented")
}
func (UnimplementedDocumentServiceServer) CreateDocumentUser(context.Context, *DocumentUser) (*CreateResponseId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocumentUser not implemented")
}
func (UnimplementedDocumentServiceServer) UpdateDocumentUser(context.Context, *DocumentUser) (*DocumentUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocumentUser not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocumentUserById(context.Context, *GetbyIdRequest) (*DocumentUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentUserById not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocumentUserbyUUID(context.Context, *GetbyUuidRequest) (*DocumentUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentUserbyUUID not implemented")
}
func (UnimplementedDocumentServiceServer) mustEmbedUnimplementedDocumentServiceServer() {}

// UnsafeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServiceServer will
// result in compilation errors.
type UnsafeDocumentServiceServer interface {
	mustEmbedUnimplementedDocumentServiceServer()
}

func RegisterDocumentServiceServer(s grpc.ServiceRegistrar, srv DocumentServiceServer) {
	s.RegisterService(&DocumentService_ServiceDesc, srv)
}

func _DocumentService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocumentServiceServer).UploadFile(&documentServiceUploadFileServer{stream})
}

type DocumentService_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type documentServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *documentServiceUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *documentServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DocumentService_LoadUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocumentServiceServer).LoadUploadFile(&documentServiceLoadUploadFileServer{stream})
}

type DocumentService_LoadUploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type documentServiceLoadUploadFileServer struct {
	grpc.ServerStream
}

func (x *documentServiceLoadUploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *documentServiceLoadUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DocumentService_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplebank.DocumentService/CreateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).CreateDocument(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplebank.DocumentService/UpdateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).UpdateDocument(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocumentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetbyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocumentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplebank.DocumentService/GetDocumentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocumentById(ctx, req.(*GetbyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocumentbyUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetbyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocumentbyUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplebank.DocumentService/GetDocumentbyUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocumentbyUUID(ctx, req.(*GetbyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_CreateDocumentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).CreateDocumentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplebank.DocumentService/CreateDocumentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).CreateDocumentUser(ctx, req.(*DocumentUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_UpdateDocumentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).UpdateDocumentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplebank.DocumentService/UpdateDocumentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).UpdateDocumentUser(ctx, req.(*DocumentUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocumentUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetbyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocumentUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplebank.DocumentService/GetDocumentUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocumentUserById(ctx, req.(*GetbyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocumentUserbyUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetbyUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocumentUserbyUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplebank.DocumentService/GetDocumentUserbyUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocumentUserbyUUID(ctx, req.(*GetbyUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentService_ServiceDesc is the grpc.ServiceDesc for DocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simplebank.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDocument",
			Handler:    _DocumentService_CreateDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _DocumentService_UpdateDocument_Handler,
		},
		{
			MethodName: "GetDocumentById",
			Handler:    _DocumentService_GetDocumentById_Handler,
		},
		{
			MethodName: "GetDocumentbyUUID",
			Handler:    _DocumentService_GetDocumentbyUUID_Handler,
		},
		{
			MethodName: "CreateDocumentUser",
			Handler:    _DocumentService_CreateDocumentUser_Handler,
		},
		{
			MethodName: "UpdateDocumentUser",
			Handler:    _DocumentService_UpdateDocumentUser_Handler,
		},
		{
			MethodName: "GetDocumentUserById",
			Handler:    _DocumentService_GetDocumentUserById_Handler,
		},
		{
			MethodName: "GetDocumentUserbyUUID",
			Handler:    _DocumentService_GetDocumentUserbyUUID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _DocumentService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LoadUploadFile",
			Handler:       _DocumentService_LoadUploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "document_service.proto",
}
