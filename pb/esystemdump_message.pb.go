// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: esystemdump_message.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NoParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoParam) Reset() {
	*x = NoParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoParam) ProtoMessage() {}

func (x *NoParam) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoParam.ProtoReflect.Descriptor instead.
func (*NoParam) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{0}
}

type DumpBranchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrCode         string                 `protobuf:"bytes,1,opt,name=brCode,proto3" json:"brCode,omitempty"`
	EbSysDate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ebSysDate,proto3" json:"ebSysDate,omitempty"`
	RunState       int64                  `protobuf:"varint,3,opt,name=runState,proto3" json:"runState,omitempty"`
	OrgAddress     string                 `protobuf:"bytes,4,opt,name=orgAddress,proto3" json:"orgAddress,omitempty"`
	TaxInfo        string                 `protobuf:"bytes,5,opt,name=taxInfo,proto3" json:"taxInfo,omitempty"`
	DefCity        string                 `protobuf:"bytes,6,opt,name=defCity,proto3" json:"defCity,omitempty"`
	DefProvince    string                 `protobuf:"bytes,7,opt,name=defProvince,proto3" json:"defProvince,omitempty"`
	DefCountry     string                 `protobuf:"bytes,8,opt,name=defCountry,proto3" json:"defCountry,omitempty"`
	DefZip         string                 `protobuf:"bytes,9,opt,name=defZip,proto3" json:"defZip,omitempty"`
	WaivableInt    bool                   `protobuf:"varint,10,opt,name=waivableInt,proto3" json:"waivableInt,omitempty"`
	DBVersion      string                 `protobuf:"bytes,11,opt,name=dBVersion,proto3" json:"dBVersion,omitempty"`
	ESystemVer     []byte                 `protobuf:"bytes,12,opt,name=eSystemVer,proto3" json:"eSystemVer,omitempty"`
	NewBrCode      int64                  `protobuf:"varint,13,opt,name=newBrCode,proto3" json:"newBrCode,omitempty"`
	LastConnection *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=lastConnection,proto3" json:"lastConnection,omitempty"`
}

func (x *DumpBranchList) Reset() {
	*x = DumpBranchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpBranchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpBranchList) ProtoMessage() {}

func (x *DumpBranchList) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpBranchList.ProtoReflect.Descriptor instead.
func (*DumpBranchList) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{1}
}

func (x *DumpBranchList) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpBranchList) GetEbSysDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EbSysDate
	}
	return nil
}

func (x *DumpBranchList) GetRunState() int64 {
	if x != nil {
		return x.RunState
	}
	return 0
}

func (x *DumpBranchList) GetOrgAddress() string {
	if x != nil {
		return x.OrgAddress
	}
	return ""
}

func (x *DumpBranchList) GetTaxInfo() string {
	if x != nil {
		return x.TaxInfo
	}
	return ""
}

func (x *DumpBranchList) GetDefCity() string {
	if x != nil {
		return x.DefCity
	}
	return ""
}

func (x *DumpBranchList) GetDefProvince() string {
	if x != nil {
		return x.DefProvince
	}
	return ""
}

func (x *DumpBranchList) GetDefCountry() string {
	if x != nil {
		return x.DefCountry
	}
	return ""
}

func (x *DumpBranchList) GetDefZip() string {
	if x != nil {
		return x.DefZip
	}
	return ""
}

func (x *DumpBranchList) GetWaivableInt() bool {
	if x != nil {
		return x.WaivableInt
	}
	return false
}

func (x *DumpBranchList) GetDBVersion() string {
	if x != nil {
		return x.DBVersion
	}
	return ""
}

func (x *DumpBranchList) GetESystemVer() []byte {
	if x != nil {
		return x.ESystemVer
	}
	return nil
}

func (x *DumpBranchList) GetNewBrCode() int64 {
	if x != nil {
		return x.NewBrCode
	}
	return 0
}

func (x *DumpBranchList) GetLastConnection() *timestamppb.Timestamp {
	if x != nil {
		return x.LastConnection
	}
	return nil
}

type DumpModifiedTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrCode     string `protobuf:"bytes,1,opt,name=brCode,proto3" json:"brCode,omitempty"`
	TableName  string `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`
	LastModCtr int64  `protobuf:"varint,3,opt,name=lastModCtr,proto3" json:"lastModCtr,omitempty"`
}

func (x *DumpModifiedTable) Reset() {
	*x = DumpModifiedTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpModifiedTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpModifiedTable) ProtoMessage() {}

func (x *DumpModifiedTable) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpModifiedTable.ProtoReflect.Descriptor instead.
func (*DumpModifiedTable) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{2}
}

func (x *DumpModifiedTable) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpModifiedTable) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DumpModifiedTable) GetLastModCtr() int64 {
	if x != nil {
		return x.LastModCtr
	}
	return 0
}

type DumpArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr    int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode    string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	AreaCode  int64       `protobuf:"varint,4,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Area      *NullString `protobuf:"bytes,5,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *DumpArea) Reset() {
	*x = DumpArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpArea) ProtoMessage() {}

func (x *DumpArea) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpArea.ProtoReflect.Descriptor instead.
func (*DumpArea) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{3}
}

func (x *DumpArea) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpArea) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpArea) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpArea) GetAreaCode() int64 {
	if x != nil {
		return x.AreaCode
	}
	return 0
}

func (x *DumpArea) GetArea() *NullString {
	if x != nil {
		return x.Area
	}
	return nil
}

type DumpUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr      int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode      string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction   string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	UnitCode    int64       `protobuf:"varint,4,opt,name=unitCode,proto3" json:"unitCode,omitempty"`
	Unit        *NullString `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	AreaCode    *NullInt64  `protobuf:"bytes,6,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	FName       *NullString `protobuf:"bytes,7,opt,name=fName,proto3" json:"fName,omitempty"`
	LName       *NullString `protobuf:"bytes,8,opt,name=lName,proto3" json:"lName,omitempty"`
	MName       *NullString `protobuf:"bytes,9,opt,name=mName,proto3" json:"mName,omitempty"`
	VatReg      *NullString `protobuf:"bytes,10,opt,name=vatReg,proto3" json:"vatReg,omitempty"`
	UnitAddress *NullString `protobuf:"bytes,11,opt,name=unitAddress,proto3" json:"unitAddress,omitempty"`
}

func (x *DumpUnit) Reset() {
	*x = DumpUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpUnit) ProtoMessage() {}

func (x *DumpUnit) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpUnit.ProtoReflect.Descriptor instead.
func (*DumpUnit) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{4}
}

func (x *DumpUnit) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpUnit) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpUnit) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpUnit) GetUnitCode() int64 {
	if x != nil {
		return x.UnitCode
	}
	return 0
}

func (x *DumpUnit) GetUnit() *NullString {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *DumpUnit) GetAreaCode() *NullInt64 {
	if x != nil {
		return x.AreaCode
	}
	return nil
}

func (x *DumpUnit) GetFName() *NullString {
	if x != nil {
		return x.FName
	}
	return nil
}

func (x *DumpUnit) GetLName() *NullString {
	if x != nil {
		return x.LName
	}
	return nil
}

func (x *DumpUnit) GetMName() *NullString {
	if x != nil {
		return x.MName
	}
	return nil
}

func (x *DumpUnit) GetVatReg() *NullString {
	if x != nil {
		return x.VatReg
	}
	return nil
}

func (x *DumpUnit) GetUnitAddress() *NullString {
	if x != nil {
		return x.UnitAddress
	}
	return nil
}

type DumpCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr          int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode          string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction       string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	CenterCode      string      `protobuf:"bytes,4,opt,name=centerCode,proto3" json:"centerCode,omitempty"`
	CenterName      *NullString `protobuf:"bytes,5,opt,name=centerName,proto3" json:"centerName,omitempty"`
	CenterAddress   *NullString `protobuf:"bytes,6,opt,name=centerAddress,proto3" json:"centerAddress,omitempty"`
	MeetingDay      *NullInt64  `protobuf:"bytes,7,opt,name=meetingDay,proto3" json:"meetingDay,omitempty"`
	Unit            *NullInt64  `protobuf:"bytes,8,opt,name=unit,proto3" json:"unit,omitempty"`
	DateEstablished *NullTime   `protobuf:"bytes,9,opt,name=dateEstablished,proto3" json:"dateEstablished,omitempty"`
	AOID            *NullInt64  `protobuf:"bytes,10,opt,name=aOID,proto3" json:"aOID,omitempty"`
}

func (x *DumpCenter) Reset() {
	*x = DumpCenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpCenter) ProtoMessage() {}

func (x *DumpCenter) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpCenter.ProtoReflect.Descriptor instead.
func (*DumpCenter) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{5}
}

func (x *DumpCenter) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpCenter) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpCenter) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpCenter) GetCenterCode() string {
	if x != nil {
		return x.CenterCode
	}
	return ""
}

func (x *DumpCenter) GetCenterName() *NullString {
	if x != nil {
		return x.CenterName
	}
	return nil
}

func (x *DumpCenter) GetCenterAddress() *NullString {
	if x != nil {
		return x.CenterAddress
	}
	return nil
}

func (x *DumpCenter) GetMeetingDay() *NullInt64 {
	if x != nil {
		return x.MeetingDay
	}
	return nil
}

func (x *DumpCenter) GetUnit() *NullInt64 {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *DumpCenter) GetDateEstablished() *NullTime {
	if x != nil {
		return x.DateEstablished
	}
	return nil
}

func (x *DumpCenter) GetAOID() *NullInt64 {
	if x != nil {
		return x.AOID
	}
	return nil
}

type DumpCustomer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr            int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode            string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction         string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	CID               int64       `protobuf:"varint,4,opt,name=cID,proto3" json:"cID,omitempty"`
	CenterCode        *NullString `protobuf:"bytes,5,opt,name=centerCode,proto3" json:"centerCode,omitempty"`
	Title             *NullInt64  `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	LName             *NullString `protobuf:"bytes,7,opt,name=lName,proto3" json:"lName,omitempty"`
	FName             *NullString `protobuf:"bytes,8,opt,name=fName,proto3" json:"fName,omitempty"`
	MName             *NullString `protobuf:"bytes,9,opt,name=mName,proto3" json:"mName,omitempty"`
	MaidenFName       *NullString `protobuf:"bytes,10,opt,name=maidenFName,proto3" json:"maidenFName,omitempty"`
	MaidenLName       *NullString `protobuf:"bytes,11,opt,name=maidenLName,proto3" json:"maidenLName,omitempty"`
	MaidenMName       *NullString `protobuf:"bytes,12,opt,name=maidenMName,proto3" json:"maidenMName,omitempty"`
	Sex               *NullString `protobuf:"bytes,13,opt,name=sex,proto3" json:"sex,omitempty"`
	BirthDate         *NullTime   `protobuf:"bytes,14,opt,name=birthDate,proto3" json:"birthDate,omitempty"`
	BirthPlace        *NullString `protobuf:"bytes,15,opt,name=birthPlace,proto3" json:"birthPlace,omitempty"`
	CivilStatus       *NullInt64  `protobuf:"bytes,16,opt,name=civilStatus,proto3" json:"civilStatus,omitempty"`
	CustType          *NullInt64  `protobuf:"bytes,17,opt,name=custType,proto3" json:"custType,omitempty"`
	Remarks           *NullString `protobuf:"bytes,18,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Status            *NullInt64  `protobuf:"bytes,19,opt,name=status,proto3" json:"status,omitempty"`
	Classification    *NullInt64  `protobuf:"bytes,20,opt,name=classification,proto3" json:"classification,omitempty"`
	DepoType          *NullString `protobuf:"bytes,21,opt,name=depoType,proto3" json:"depoType,omitempty"`
	SubClassification *NullInt64  `protobuf:"bytes,22,opt,name=subClassification,proto3" json:"subClassification,omitempty"`
	PledgeAmount      *Decimal    `protobuf:"bytes,23,opt,name=pledgeAmount,proto3" json:"pledgeAmount,omitempty"`
	MutualAmount      *Decimal    `protobuf:"bytes,24,opt,name=mutualAmount,proto3" json:"mutualAmount,omitempty"`
	PangarapAmount    *Decimal    `protobuf:"bytes,25,opt,name=pangarapAmount,proto3" json:"pangarapAmount,omitempty"`
	KatuparanAmount   *Decimal    `protobuf:"bytes,26,opt,name=katuparanAmount,proto3" json:"katuparanAmount,omitempty"`
	InsuranceAmount   *Decimal    `protobuf:"bytes,27,opt,name=insuranceAmount,proto3" json:"insuranceAmount,omitempty"`
	AccPledge         *Decimal    `protobuf:"bytes,28,opt,name=accPledge,proto3" json:"accPledge,omitempty"`
	AccMutual         *Decimal    `protobuf:"bytes,29,opt,name=accMutual,proto3" json:"accMutual,omitempty"`
	AccPang           *Decimal    `protobuf:"bytes,30,opt,name=accPang,proto3" json:"accPang,omitempty"`
	AccKatuparan      *Decimal    `protobuf:"bytes,31,opt,name=accKatuparan,proto3" json:"accKatuparan,omitempty"`
	AccInsurance      *Decimal    `protobuf:"bytes,32,opt,name=accInsurance,proto3" json:"accInsurance,omitempty"`
	LoanLimit         *Decimal    `protobuf:"bytes,33,opt,name=loanLimit,proto3" json:"loanLimit,omitempty"`
	CreditLimit       *Decimal    `protobuf:"bytes,34,opt,name=creditLimit,proto3" json:"creditLimit,omitempty"`
	DateRecognized    *NullTime   `protobuf:"bytes,35,opt,name=dateRecognized,proto3" json:"dateRecognized,omitempty"`
	DateResigned      *NullTime   `protobuf:"bytes,36,opt,name=dateResigned,proto3" json:"dateResigned,omitempty"`
	DateEntry         *NullTime   `protobuf:"bytes,37,opt,name=dateEntry,proto3" json:"dateEntry,omitempty"`
	GoldenLifeDate    *NullTime   `protobuf:"bytes,38,opt,name=goldenLifeDate,proto3" json:"goldenLifeDate,omitempty"`
	Restricted        *NullString `protobuf:"bytes,39,opt,name=restricted,proto3" json:"restricted,omitempty"`
	Borrower          *NullString `protobuf:"bytes,40,opt,name=borrower,proto3" json:"borrower,omitempty"`
	CoMaker           *NullString `protobuf:"bytes,41,opt,name=coMaker,proto3" json:"coMaker,omitempty"`
	Guarantor         *NullString `protobuf:"bytes,42,opt,name=guarantor,proto3" json:"guarantor,omitempty"`
	DOSRI             *NullInt64  `protobuf:"bytes,43,opt,name=dOSRI,proto3" json:"dOSRI,omitempty"`
	IDCode1           *NullInt64  `protobuf:"bytes,44,opt,name=iDCode1,proto3" json:"iDCode1,omitempty"`
	IDNum1            *NullString `protobuf:"bytes,45,opt,name=iDNum1,proto3" json:"iDNum1,omitempty"`
	IDCode2           *NullInt64  `protobuf:"bytes,46,opt,name=iDCode2,proto3" json:"iDCode2,omitempty"`
	IDNum2            *NullString `protobuf:"bytes,47,opt,name=iDNum2,proto3" json:"iDNum2,omitempty"`
	Contact1          *NullString `protobuf:"bytes,48,opt,name=contact1,proto3" json:"contact1,omitempty"`
	Contact2          *NullString `protobuf:"bytes,49,opt,name=contact2,proto3" json:"contact2,omitempty"`
	Phone1            *NullString `protobuf:"bytes,50,opt,name=phone1,proto3" json:"phone1,omitempty"`
	Reffered1         *NullString `protobuf:"bytes,51,opt,name=reffered1,proto3" json:"reffered1,omitempty"`
	Reffered2         *NullString `protobuf:"bytes,52,opt,name=reffered2,proto3" json:"reffered2,omitempty"`
	Reffered3         *NullString `protobuf:"bytes,53,opt,name=reffered3,proto3" json:"reffered3,omitempty"`
	Education         *NullInt64  `protobuf:"bytes,54,opt,name=education,proto3" json:"education,omitempty"`
	Validity1         *NullTime   `protobuf:"bytes,55,opt,name=validity1,proto3" json:"validity1,omitempty"`
	Validity2         *NullTime   `protobuf:"bytes,56,opt,name=validity2,proto3" json:"validity2,omitempty"`
	BusinessType      *NullInt64  `protobuf:"bytes,57,opt,name=businessType,proto3" json:"businessType,omitempty"`
	AccountNumber     *NullString `protobuf:"bytes,58,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	IIID              *NullInt64  `protobuf:"bytes,59,opt,name=iIID,proto3" json:"iIID,omitempty"`
	Religion          *NullInt64  `protobuf:"bytes,60,opt,name=religion,proto3" json:"religion,omitempty"`
}

func (x *DumpCustomer) Reset() {
	*x = DumpCustomer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpCustomer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpCustomer) ProtoMessage() {}

func (x *DumpCustomer) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpCustomer.ProtoReflect.Descriptor instead.
func (*DumpCustomer) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{6}
}

func (x *DumpCustomer) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpCustomer) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpCustomer) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpCustomer) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *DumpCustomer) GetCenterCode() *NullString {
	if x != nil {
		return x.CenterCode
	}
	return nil
}

func (x *DumpCustomer) GetTitle() *NullInt64 {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *DumpCustomer) GetLName() *NullString {
	if x != nil {
		return x.LName
	}
	return nil
}

func (x *DumpCustomer) GetFName() *NullString {
	if x != nil {
		return x.FName
	}
	return nil
}

func (x *DumpCustomer) GetMName() *NullString {
	if x != nil {
		return x.MName
	}
	return nil
}

func (x *DumpCustomer) GetMaidenFName() *NullString {
	if x != nil {
		return x.MaidenFName
	}
	return nil
}

func (x *DumpCustomer) GetMaidenLName() *NullString {
	if x != nil {
		return x.MaidenLName
	}
	return nil
}

func (x *DumpCustomer) GetMaidenMName() *NullString {
	if x != nil {
		return x.MaidenMName
	}
	return nil
}

func (x *DumpCustomer) GetSex() *NullString {
	if x != nil {
		return x.Sex
	}
	return nil
}

func (x *DumpCustomer) GetBirthDate() *NullTime {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *DumpCustomer) GetBirthPlace() *NullString {
	if x != nil {
		return x.BirthPlace
	}
	return nil
}

func (x *DumpCustomer) GetCivilStatus() *NullInt64 {
	if x != nil {
		return x.CivilStatus
	}
	return nil
}

func (x *DumpCustomer) GetCustType() *NullInt64 {
	if x != nil {
		return x.CustType
	}
	return nil
}

func (x *DumpCustomer) GetRemarks() *NullString {
	if x != nil {
		return x.Remarks
	}
	return nil
}

func (x *DumpCustomer) GetStatus() *NullInt64 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DumpCustomer) GetClassification() *NullInt64 {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *DumpCustomer) GetDepoType() *NullString {
	if x != nil {
		return x.DepoType
	}
	return nil
}

func (x *DumpCustomer) GetSubClassification() *NullInt64 {
	if x != nil {
		return x.SubClassification
	}
	return nil
}

func (x *DumpCustomer) GetPledgeAmount() *Decimal {
	if x != nil {
		return x.PledgeAmount
	}
	return nil
}

func (x *DumpCustomer) GetMutualAmount() *Decimal {
	if x != nil {
		return x.MutualAmount
	}
	return nil
}

func (x *DumpCustomer) GetPangarapAmount() *Decimal {
	if x != nil {
		return x.PangarapAmount
	}
	return nil
}

func (x *DumpCustomer) GetKatuparanAmount() *Decimal {
	if x != nil {
		return x.KatuparanAmount
	}
	return nil
}

func (x *DumpCustomer) GetInsuranceAmount() *Decimal {
	if x != nil {
		return x.InsuranceAmount
	}
	return nil
}

func (x *DumpCustomer) GetAccPledge() *Decimal {
	if x != nil {
		return x.AccPledge
	}
	return nil
}

func (x *DumpCustomer) GetAccMutual() *Decimal {
	if x != nil {
		return x.AccMutual
	}
	return nil
}

func (x *DumpCustomer) GetAccPang() *Decimal {
	if x != nil {
		return x.AccPang
	}
	return nil
}

func (x *DumpCustomer) GetAccKatuparan() *Decimal {
	if x != nil {
		return x.AccKatuparan
	}
	return nil
}

func (x *DumpCustomer) GetAccInsurance() *Decimal {
	if x != nil {
		return x.AccInsurance
	}
	return nil
}

func (x *DumpCustomer) GetLoanLimit() *Decimal {
	if x != nil {
		return x.LoanLimit
	}
	return nil
}

func (x *DumpCustomer) GetCreditLimit() *Decimal {
	if x != nil {
		return x.CreditLimit
	}
	return nil
}

func (x *DumpCustomer) GetDateRecognized() *NullTime {
	if x != nil {
		return x.DateRecognized
	}
	return nil
}

func (x *DumpCustomer) GetDateResigned() *NullTime {
	if x != nil {
		return x.DateResigned
	}
	return nil
}

func (x *DumpCustomer) GetDateEntry() *NullTime {
	if x != nil {
		return x.DateEntry
	}
	return nil
}

func (x *DumpCustomer) GetGoldenLifeDate() *NullTime {
	if x != nil {
		return x.GoldenLifeDate
	}
	return nil
}

func (x *DumpCustomer) GetRestricted() *NullString {
	if x != nil {
		return x.Restricted
	}
	return nil
}

func (x *DumpCustomer) GetBorrower() *NullString {
	if x != nil {
		return x.Borrower
	}
	return nil
}

func (x *DumpCustomer) GetCoMaker() *NullString {
	if x != nil {
		return x.CoMaker
	}
	return nil
}

func (x *DumpCustomer) GetGuarantor() *NullString {
	if x != nil {
		return x.Guarantor
	}
	return nil
}

func (x *DumpCustomer) GetDOSRI() *NullInt64 {
	if x != nil {
		return x.DOSRI
	}
	return nil
}

func (x *DumpCustomer) GetIDCode1() *NullInt64 {
	if x != nil {
		return x.IDCode1
	}
	return nil
}

func (x *DumpCustomer) GetIDNum1() *NullString {
	if x != nil {
		return x.IDNum1
	}
	return nil
}

func (x *DumpCustomer) GetIDCode2() *NullInt64 {
	if x != nil {
		return x.IDCode2
	}
	return nil
}

func (x *DumpCustomer) GetIDNum2() *NullString {
	if x != nil {
		return x.IDNum2
	}
	return nil
}

func (x *DumpCustomer) GetContact1() *NullString {
	if x != nil {
		return x.Contact1
	}
	return nil
}

func (x *DumpCustomer) GetContact2() *NullString {
	if x != nil {
		return x.Contact2
	}
	return nil
}

func (x *DumpCustomer) GetPhone1() *NullString {
	if x != nil {
		return x.Phone1
	}
	return nil
}

func (x *DumpCustomer) GetReffered1() *NullString {
	if x != nil {
		return x.Reffered1
	}
	return nil
}

func (x *DumpCustomer) GetReffered2() *NullString {
	if x != nil {
		return x.Reffered2
	}
	return nil
}

func (x *DumpCustomer) GetReffered3() *NullString {
	if x != nil {
		return x.Reffered3
	}
	return nil
}

func (x *DumpCustomer) GetEducation() *NullInt64 {
	if x != nil {
		return x.Education
	}
	return nil
}

func (x *DumpCustomer) GetValidity1() *NullTime {
	if x != nil {
		return x.Validity1
	}
	return nil
}

func (x *DumpCustomer) GetValidity2() *NullTime {
	if x != nil {
		return x.Validity2
	}
	return nil
}

func (x *DumpCustomer) GetBusinessType() *NullInt64 {
	if x != nil {
		return x.BusinessType
	}
	return nil
}

func (x *DumpCustomer) GetAccountNumber() *NullString {
	if x != nil {
		return x.AccountNumber
	}
	return nil
}

func (x *DumpCustomer) GetIIID() *NullInt64 {
	if x != nil {
		return x.IIID
	}
	return nil
}

func (x *DumpCustomer) GetReligion() *NullInt64 {
	if x != nil {
		return x.Religion
	}
	return nil
}

type DumpAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr         int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode         string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction      string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	CID            int64       `protobuf:"varint,4,opt,name=cID,proto3" json:"cID,omitempty"`
	SeqNum         int64       `protobuf:"varint,5,opt,name=seqNum,proto3" json:"seqNum,omitempty"`
	AddressDetails *NullString `protobuf:"bytes,6,opt,name=addressDetails,proto3" json:"addressDetails,omitempty"`
	Barangay       *NullString `protobuf:"bytes,7,opt,name=barangay,proto3" json:"barangay,omitempty"`
	City           *NullString `protobuf:"bytes,8,opt,name=city,proto3" json:"city,omitempty"`
	Province       *NullString `protobuf:"bytes,9,opt,name=province,proto3" json:"province,omitempty"`
	Phone1         *NullString `protobuf:"bytes,10,opt,name=phone1,proto3" json:"phone1,omitempty"`
	Phone2         *NullString `protobuf:"bytes,11,opt,name=phone2,proto3" json:"phone2,omitempty"`
	Phone3         *NullString `protobuf:"bytes,12,opt,name=phone3,proto3" json:"phone3,omitempty"`
	Phone4         *NullString `protobuf:"bytes,13,opt,name=phone4,proto3" json:"phone4,omitempty"`
}

func (x *DumpAddresses) Reset() {
	*x = DumpAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpAddresses) ProtoMessage() {}

func (x *DumpAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpAddresses.ProtoReflect.Descriptor instead.
func (*DumpAddresses) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{7}
}

func (x *DumpAddresses) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpAddresses) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpAddresses) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpAddresses) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *DumpAddresses) GetSeqNum() int64 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *DumpAddresses) GetAddressDetails() *NullString {
	if x != nil {
		return x.AddressDetails
	}
	return nil
}

func (x *DumpAddresses) GetBarangay() *NullString {
	if x != nil {
		return x.Barangay
	}
	return nil
}

func (x *DumpAddresses) GetCity() *NullString {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *DumpAddresses) GetProvince() *NullString {
	if x != nil {
		return x.Province
	}
	return nil
}

func (x *DumpAddresses) GetPhone1() *NullString {
	if x != nil {
		return x.Phone1
	}
	return nil
}

func (x *DumpAddresses) GetPhone2() *NullString {
	if x != nil {
		return x.Phone2
	}
	return nil
}

func (x *DumpAddresses) GetPhone3() *NullString {
	if x != nil {
		return x.Phone3
	}
	return nil
}

func (x *DumpAddresses) GetPhone4() *NullString {
	if x != nil {
		return x.Phone4
	}
	return nil
}

type DumpLnMaster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr      int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode      string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction   string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	CID         int64       `protobuf:"varint,4,opt,name=cID,proto3" json:"cID,omitempty"`
	Acc         string      `protobuf:"bytes,5,opt,name=acc,proto3" json:"acc,omitempty"`
	AcctType    *NullInt64  `protobuf:"bytes,6,opt,name=acctType,proto3" json:"acctType,omitempty"`
	DisbDate    *NullTime   `protobuf:"bytes,7,opt,name=disbDate,proto3" json:"disbDate,omitempty"`
	Principal   *Decimal    `protobuf:"bytes,8,opt,name=principal,proto3" json:"principal,omitempty"`
	Interest    *Decimal    `protobuf:"bytes,9,opt,name=interest,proto3" json:"interest,omitempty"`
	NetProceed  *Decimal    `protobuf:"bytes,10,opt,name=netProceed,proto3" json:"netProceed,omitempty"`
	Gives       *NullInt64  `protobuf:"bytes,11,opt,name=gives,proto3" json:"gives,omitempty"`
	Frequency   *NullInt64  `protobuf:"bytes,12,opt,name=frequency,proto3" json:"frequency,omitempty"`
	AnnumDiv    *NullInt64  `protobuf:"bytes,13,opt,name=annumDiv,proto3" json:"annumDiv,omitempty"`
	Prin        *Decimal    `protobuf:"bytes,14,opt,name=prin,proto3" json:"prin,omitempty"`
	IntR        *Decimal    `protobuf:"bytes,15,opt,name=intR,proto3" json:"intR,omitempty"`
	WaivedInt   *Decimal    `protobuf:"bytes,16,opt,name=waivedInt,proto3" json:"waivedInt,omitempty"`
	WeeksPaid   *NullInt64  `protobuf:"bytes,17,opt,name=weeksPaid,proto3" json:"weeksPaid,omitempty"`
	DoMaturity  *NullTime   `protobuf:"bytes,18,opt,name=doMaturity,proto3" json:"doMaturity,omitempty"`
	ConIntRate  *Decimal    `protobuf:"bytes,19,opt,name=conIntRate,proto3" json:"conIntRate,omitempty"`
	Status      *NullString `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`
	Cycle       *NullInt64  `protobuf:"bytes,21,opt,name=cycle,proto3" json:"cycle,omitempty"`
	LNGrpCode   *NullInt64  `protobuf:"bytes,22,opt,name=lNGrpCode,proto3" json:"lNGrpCode,omitempty"`
	Proff       *NullInt64  `protobuf:"bytes,23,opt,name=proff,proto3" json:"proff,omitempty"`
	FundSource  *NullString `protobuf:"bytes,24,opt,name=fundSource,proto3" json:"fundSource,omitempty"`
	DOSRI       *NullBool   `protobuf:"bytes,25,opt,name=dOSRI,proto3" json:"dOSRI,omitempty"`
	LnCategory  *NullInt64  `protobuf:"bytes,26,opt,name=lnCategory,proto3" json:"lnCategory,omitempty"`
	OpenDate    *NullTime   `protobuf:"bytes,27,opt,name=openDate,proto3" json:"openDate,omitempty"`
	LastTrnDate *NullTime   `protobuf:"bytes,28,opt,name=lastTrnDate,proto3" json:"lastTrnDate,omitempty"`
	DisbBy      *NullString `protobuf:"bytes,29,opt,name=disbBy,proto3" json:"disbBy,omitempty"`
}

func (x *DumpLnMaster) Reset() {
	*x = DumpLnMaster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpLnMaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpLnMaster) ProtoMessage() {}

func (x *DumpLnMaster) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpLnMaster.ProtoReflect.Descriptor instead.
func (*DumpLnMaster) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{8}
}

func (x *DumpLnMaster) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpLnMaster) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpLnMaster) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpLnMaster) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *DumpLnMaster) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpLnMaster) GetAcctType() *NullInt64 {
	if x != nil {
		return x.AcctType
	}
	return nil
}

func (x *DumpLnMaster) GetDisbDate() *NullTime {
	if x != nil {
		return x.DisbDate
	}
	return nil
}

func (x *DumpLnMaster) GetPrincipal() *Decimal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *DumpLnMaster) GetInterest() *Decimal {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *DumpLnMaster) GetNetProceed() *Decimal {
	if x != nil {
		return x.NetProceed
	}
	return nil
}

func (x *DumpLnMaster) GetGives() *NullInt64 {
	if x != nil {
		return x.Gives
	}
	return nil
}

func (x *DumpLnMaster) GetFrequency() *NullInt64 {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *DumpLnMaster) GetAnnumDiv() *NullInt64 {
	if x != nil {
		return x.AnnumDiv
	}
	return nil
}

func (x *DumpLnMaster) GetPrin() *Decimal {
	if x != nil {
		return x.Prin
	}
	return nil
}

func (x *DumpLnMaster) GetIntR() *Decimal {
	if x != nil {
		return x.IntR
	}
	return nil
}

func (x *DumpLnMaster) GetWaivedInt() *Decimal {
	if x != nil {
		return x.WaivedInt
	}
	return nil
}

func (x *DumpLnMaster) GetWeeksPaid() *NullInt64 {
	if x != nil {
		return x.WeeksPaid
	}
	return nil
}

func (x *DumpLnMaster) GetDoMaturity() *NullTime {
	if x != nil {
		return x.DoMaturity
	}
	return nil
}

func (x *DumpLnMaster) GetConIntRate() *Decimal {
	if x != nil {
		return x.ConIntRate
	}
	return nil
}

func (x *DumpLnMaster) GetStatus() *NullString {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DumpLnMaster) GetCycle() *NullInt64 {
	if x != nil {
		return x.Cycle
	}
	return nil
}

func (x *DumpLnMaster) GetLNGrpCode() *NullInt64 {
	if x != nil {
		return x.LNGrpCode
	}
	return nil
}

func (x *DumpLnMaster) GetProff() *NullInt64 {
	if x != nil {
		return x.Proff
	}
	return nil
}

func (x *DumpLnMaster) GetFundSource() *NullString {
	if x != nil {
		return x.FundSource
	}
	return nil
}

func (x *DumpLnMaster) GetDOSRI() *NullBool {
	if x != nil {
		return x.DOSRI
	}
	return nil
}

func (x *DumpLnMaster) GetLnCategory() *NullInt64 {
	if x != nil {
		return x.LnCategory
	}
	return nil
}

func (x *DumpLnMaster) GetOpenDate() *NullTime {
	if x != nil {
		return x.OpenDate
	}
	return nil
}

func (x *DumpLnMaster) GetLastTrnDate() *NullTime {
	if x != nil {
		return x.LastTrnDate
	}
	return nil
}

func (x *DumpLnMaster) GetDisbBy() *NullString {
	if x != nil {
		return x.DisbBy
	}
	return nil
}

type DumpSaMaster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr     int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode     string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction  string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	Acc        string      `protobuf:"bytes,4,opt,name=acc,proto3" json:"acc,omitempty"`
	CID        int64       `protobuf:"varint,5,opt,name=cID,proto3" json:"cID,omitempty"`
	Type       int64       `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Balance    *Decimal    `protobuf:"bytes,7,opt,name=balance,proto3" json:"balance,omitempty"`
	DoLastTrn  *NullTime   `protobuf:"bytes,8,opt,name=doLastTrn,proto3" json:"doLastTrn,omitempty"`
	DoStatus   *NullTime   `protobuf:"bytes,9,opt,name=doStatus,proto3" json:"doStatus,omitempty"`
	Dopen      *NullTime   `protobuf:"bytes,10,opt,name=dopen,proto3" json:"dopen,omitempty"`
	DoMaturity *NullTime   `protobuf:"bytes,11,opt,name=doMaturity,proto3" json:"doMaturity,omitempty"`
	Status     *NullString `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DumpSaMaster) Reset() {
	*x = DumpSaMaster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpSaMaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpSaMaster) ProtoMessage() {}

func (x *DumpSaMaster) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpSaMaster.ProtoReflect.Descriptor instead.
func (*DumpSaMaster) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{9}
}

func (x *DumpSaMaster) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpSaMaster) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpSaMaster) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpSaMaster) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpSaMaster) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *DumpSaMaster) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DumpSaMaster) GetBalance() *Decimal {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *DumpSaMaster) GetDoLastTrn() *NullTime {
	if x != nil {
		return x.DoLastTrn
	}
	return nil
}

func (x *DumpSaMaster) GetDoStatus() *NullTime {
	if x != nil {
		return x.DoStatus
	}
	return nil
}

func (x *DumpSaMaster) GetDopen() *NullTime {
	if x != nil {
		return x.Dopen
	}
	return nil
}

func (x *DumpSaMaster) GetDoMaturity() *NullTime {
	if x != nil {
		return x.DoMaturity
	}
	return nil
}

func (x *DumpSaMaster) GetStatus() *NullString {
	if x != nil {
		return x.Status
	}
	return nil
}

type DumpTrnMaster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr     int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode     string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction  string                 `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	Acc        string                 `protobuf:"bytes,4,opt,name=acc,proto3" json:"acc,omitempty"`
	TrnDate    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=trnDate,proto3" json:"trnDate,omitempty"`
	Trn        int64                  `protobuf:"varint,6,opt,name=trn,proto3" json:"trn,omitempty"`
	TrnType    *NullInt64             `protobuf:"bytes,7,opt,name=trnType,proto3" json:"trnType,omitempty"`
	OrNo       *NullInt64             `protobuf:"bytes,8,opt,name=orNo,proto3" json:"orNo,omitempty"`
	Prin       *Decimal               `protobuf:"bytes,9,opt,name=prin,proto3" json:"prin,omitempty"`
	IntR       *Decimal               `protobuf:"bytes,10,opt,name=intR,proto3" json:"intR,omitempty"`
	WaivedInt  *Decimal               `protobuf:"bytes,11,opt,name=waivedInt,proto3" json:"waivedInt,omitempty"`
	RefNo      *NullString            `protobuf:"bytes,12,opt,name=refNo,proto3" json:"refNo,omitempty"`
	UserName   *NullString            `protobuf:"bytes,13,opt,name=userName,proto3" json:"userName,omitempty"`
	Particular *NullString            `protobuf:"bytes,14,opt,name=particular,proto3" json:"particular,omitempty"`
}

func (x *DumpTrnMaster) Reset() {
	*x = DumpTrnMaster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpTrnMaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpTrnMaster) ProtoMessage() {}

func (x *DumpTrnMaster) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpTrnMaster.ProtoReflect.Descriptor instead.
func (*DumpTrnMaster) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{10}
}

func (x *DumpTrnMaster) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpTrnMaster) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpTrnMaster) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpTrnMaster) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpTrnMaster) GetTrnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TrnDate
	}
	return nil
}

func (x *DumpTrnMaster) GetTrn() int64 {
	if x != nil {
		return x.Trn
	}
	return 0
}

func (x *DumpTrnMaster) GetTrnType() *NullInt64 {
	if x != nil {
		return x.TrnType
	}
	return nil
}

func (x *DumpTrnMaster) GetOrNo() *NullInt64 {
	if x != nil {
		return x.OrNo
	}
	return nil
}

func (x *DumpTrnMaster) GetPrin() *Decimal {
	if x != nil {
		return x.Prin
	}
	return nil
}

func (x *DumpTrnMaster) GetIntR() *Decimal {
	if x != nil {
		return x.IntR
	}
	return nil
}

func (x *DumpTrnMaster) GetWaivedInt() *Decimal {
	if x != nil {
		return x.WaivedInt
	}
	return nil
}

func (x *DumpTrnMaster) GetRefNo() *NullString {
	if x != nil {
		return x.RefNo
	}
	return nil
}

func (x *DumpTrnMaster) GetUserName() *NullString {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *DumpTrnMaster) GetParticular() *NullString {
	if x != nil {
		return x.Particular
	}
	return nil
}

type DumpSaTrnMaster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr      int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode      string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction   string                 `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	Acc         string                 `protobuf:"bytes,4,opt,name=acc,proto3" json:"acc,omitempty"`
	TrnDate     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=trnDate,proto3" json:"trnDate,omitempty"`
	Trn         int64                  `protobuf:"varint,6,opt,name=trn,proto3" json:"trn,omitempty"`
	TrnType     *NullInt64             `protobuf:"bytes,7,opt,name=trnType,proto3" json:"trnType,omitempty"`
	OrNo        *NullInt64             `protobuf:"bytes,8,opt,name=orNo,proto3" json:"orNo,omitempty"`
	TrnAmt      *Decimal               `protobuf:"bytes,9,opt,name=trnAmt,proto3" json:"trnAmt,omitempty"`
	RefNo       *NullString            `protobuf:"bytes,10,opt,name=refNo,proto3" json:"refNo,omitempty"`
	Particular  string                 `protobuf:"bytes,11,opt,name=particular,proto3" json:"particular,omitempty"`
	TermId      string                 `protobuf:"bytes,12,opt,name=termId,proto3" json:"termId,omitempty"`
	UserName    string                 `protobuf:"bytes,13,opt,name=userName,proto3" json:"userName,omitempty"`
	PendApprove string                 `protobuf:"bytes,14,opt,name=pendApprove,proto3" json:"pendApprove,omitempty"`
}

func (x *DumpSaTrnMaster) Reset() {
	*x = DumpSaTrnMaster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpSaTrnMaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpSaTrnMaster) ProtoMessage() {}

func (x *DumpSaTrnMaster) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpSaTrnMaster.ProtoReflect.Descriptor instead.
func (*DumpSaTrnMaster) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{11}
}

func (x *DumpSaTrnMaster) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpSaTrnMaster) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpSaTrnMaster) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpSaTrnMaster) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpSaTrnMaster) GetTrnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TrnDate
	}
	return nil
}

func (x *DumpSaTrnMaster) GetTrn() int64 {
	if x != nil {
		return x.Trn
	}
	return 0
}

func (x *DumpSaTrnMaster) GetTrnType() *NullInt64 {
	if x != nil {
		return x.TrnType
	}
	return nil
}

func (x *DumpSaTrnMaster) GetOrNo() *NullInt64 {
	if x != nil {
		return x.OrNo
	}
	return nil
}

func (x *DumpSaTrnMaster) GetTrnAmt() *Decimal {
	if x != nil {
		return x.TrnAmt
	}
	return nil
}

func (x *DumpSaTrnMaster) GetRefNo() *NullString {
	if x != nil {
		return x.RefNo
	}
	return nil
}

func (x *DumpSaTrnMaster) GetParticular() string {
	if x != nil {
		return x.Particular
	}
	return ""
}

func (x *DumpSaTrnMaster) GetTermId() string {
	if x != nil {
		return x.TermId
	}
	return ""
}

func (x *DumpSaTrnMaster) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DumpSaTrnMaster) GetPendApprove() string {
	if x != nil {
		return x.PendApprove
	}
	return ""
}

type DumpLoanInst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr    int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode    string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction string                 `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	Acc       string                 `protobuf:"bytes,4,opt,name=acc,proto3" json:"acc,omitempty"`
	Dnum      int64                  `protobuf:"varint,5,opt,name=dnum,proto3" json:"dnum,omitempty"`
	DueDate   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	InstFlag  int64                  `protobuf:"varint,7,opt,name=instFlag,proto3" json:"instFlag,omitempty"`
	DuePrin   *Decimal               `protobuf:"bytes,8,opt,name=duePrin,proto3" json:"duePrin,omitempty"`
	DueInt    *Decimal               `protobuf:"bytes,9,opt,name=dueInt,proto3" json:"dueInt,omitempty"`
	UpInt     *Decimal               `protobuf:"bytes,10,opt,name=upInt,proto3" json:"upInt,omitempty"`
}

func (x *DumpLoanInst) Reset() {
	*x = DumpLoanInst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpLoanInst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpLoanInst) ProtoMessage() {}

func (x *DumpLoanInst) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpLoanInst.ProtoReflect.Descriptor instead.
func (*DumpLoanInst) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{12}
}

func (x *DumpLoanInst) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpLoanInst) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpLoanInst) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpLoanInst) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpLoanInst) GetDnum() int64 {
	if x != nil {
		return x.Dnum
	}
	return 0
}

func (x *DumpLoanInst) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *DumpLoanInst) GetInstFlag() int64 {
	if x != nil {
		return x.InstFlag
	}
	return 0
}

func (x *DumpLoanInst) GetDuePrin() *Decimal {
	if x != nil {
		return x.DuePrin
	}
	return nil
}

func (x *DumpLoanInst) GetDueInt() *Decimal {
	if x != nil {
		return x.DueInt
	}
	return nil
}

func (x *DumpLoanInst) GetUpInt() *Decimal {
	if x != nil {
		return x.UpInt
	}
	return nil
}

type DumpLnChrgData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr    int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode    string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	Acc       string      `protobuf:"bytes,4,opt,name=acc,proto3" json:"acc,omitempty"`
	ChrgCode  int64       `protobuf:"varint,5,opt,name=chrgCode,proto3" json:"chrgCode,omitempty"`
	RefAcc    *NullString `protobuf:"bytes,6,opt,name=refAcc,proto3" json:"refAcc,omitempty"`
	ChrAmnt   *Decimal    `protobuf:"bytes,7,opt,name=chrAmnt,proto3" json:"chrAmnt,omitempty"`
}

func (x *DumpLnChrgData) Reset() {
	*x = DumpLnChrgData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpLnChrgData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpLnChrgData) ProtoMessage() {}

func (x *DumpLnChrgData) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpLnChrgData.ProtoReflect.Descriptor instead.
func (*DumpLnChrgData) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{13}
}

func (x *DumpLnChrgData) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpLnChrgData) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpLnChrgData) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpLnChrgData) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpLnChrgData) GetChrgCode() int64 {
	if x != nil {
		return x.ChrgCode
	}
	return 0
}

func (x *DumpLnChrgData) GetRefAcc() *NullString {
	if x != nil {
		return x.RefAcc
	}
	return nil
}

func (x *DumpLnChrgData) GetChrAmnt() *Decimal {
	if x != nil {
		return x.ChrAmnt
	}
	return nil
}

type DumpCustAddInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr     int64  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode     string `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction  string `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	InfoCode   int64  `protobuf:"varint,4,opt,name=infoCode,proto3" json:"infoCode,omitempty"`
	InfoOrder  string `protobuf:"bytes,5,opt,name=infoOrder,proto3" json:"infoOrder,omitempty"`
	Title      string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	InfoType   string `protobuf:"bytes,7,opt,name=infoType,proto3" json:"infoType,omitempty"`
	InfoLen    int64  `protobuf:"varint,8,opt,name=infoLen,proto3" json:"infoLen,omitempty"`
	InfoFormat string `protobuf:"bytes,9,opt,name=infoFormat,proto3" json:"infoFormat,omitempty"`
	InputType  int64  `protobuf:"varint,10,opt,name=inputType,proto3" json:"inputType,omitempty"`
	InfoSource string `protobuf:"bytes,11,opt,name=infoSource,proto3" json:"infoSource,omitempty"`
}

func (x *DumpCustAddInfoList) Reset() {
	*x = DumpCustAddInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpCustAddInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpCustAddInfoList) ProtoMessage() {}

func (x *DumpCustAddInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpCustAddInfoList.ProtoReflect.Descriptor instead.
func (*DumpCustAddInfoList) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{14}
}

func (x *DumpCustAddInfoList) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpCustAddInfoList) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpCustAddInfoList) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpCustAddInfoList) GetInfoCode() int64 {
	if x != nil {
		return x.InfoCode
	}
	return 0
}

func (x *DumpCustAddInfoList) GetInfoOrder() string {
	if x != nil {
		return x.InfoOrder
	}
	return ""
}

func (x *DumpCustAddInfoList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DumpCustAddInfoList) GetInfoType() string {
	if x != nil {
		return x.InfoType
	}
	return ""
}

func (x *DumpCustAddInfoList) GetInfoLen() int64 {
	if x != nil {
		return x.InfoLen
	}
	return 0
}

func (x *DumpCustAddInfoList) GetInfoFormat() string {
	if x != nil {
		return x.InfoFormat
	}
	return ""
}

func (x *DumpCustAddInfoList) GetInputType() int64 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *DumpCustAddInfoList) GetInfoSource() string {
	if x != nil {
		return x.InfoSource
	}
	return ""
}

type DumpCustAddInfoGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr     int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode     string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction  string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	InfoGroup  int64       `protobuf:"varint,4,opt,name=infoGroup,proto3" json:"infoGroup,omitempty"`
	GroupTitle *NullString `protobuf:"bytes,5,opt,name=groupTitle,proto3" json:"groupTitle,omitempty"`
	Remarks    *NullString `protobuf:"bytes,6,opt,name=remarks,proto3" json:"remarks,omitempty"`
	ReqOnEntry *NullBool   `protobuf:"bytes,7,opt,name=reqOnEntry,proto3" json:"reqOnEntry,omitempty"`
	ReqOnExit  *NullBool   `protobuf:"bytes,8,opt,name=reqOnExit,proto3" json:"reqOnExit,omitempty"`
	Link2Loan  *NullInt64  `protobuf:"bytes,9,opt,name=link2Loan,proto3" json:"link2Loan,omitempty"`
	Link2Save  *NullInt64  `protobuf:"bytes,10,opt,name=link2Save,proto3" json:"link2Save,omitempty"`
}

func (x *DumpCustAddInfoGroup) Reset() {
	*x = DumpCustAddInfoGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpCustAddInfoGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpCustAddInfoGroup) ProtoMessage() {}

func (x *DumpCustAddInfoGroup) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpCustAddInfoGroup.ProtoReflect.Descriptor instead.
func (*DumpCustAddInfoGroup) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{15}
}

func (x *DumpCustAddInfoGroup) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpCustAddInfoGroup) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpCustAddInfoGroup) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpCustAddInfoGroup) GetInfoGroup() int64 {
	if x != nil {
		return x.InfoGroup
	}
	return 0
}

func (x *DumpCustAddInfoGroup) GetGroupTitle() *NullString {
	if x != nil {
		return x.GroupTitle
	}
	return nil
}

func (x *DumpCustAddInfoGroup) GetRemarks() *NullString {
	if x != nil {
		return x.Remarks
	}
	return nil
}

func (x *DumpCustAddInfoGroup) GetReqOnEntry() *NullBool {
	if x != nil {
		return x.ReqOnEntry
	}
	return nil
}

func (x *DumpCustAddInfoGroup) GetReqOnExit() *NullBool {
	if x != nil {
		return x.ReqOnExit
	}
	return nil
}

func (x *DumpCustAddInfoGroup) GetLink2Loan() *NullInt64 {
	if x != nil {
		return x.Link2Loan
	}
	return nil
}

func (x *DumpCustAddInfoGroup) GetLink2Save() *NullInt64 {
	if x != nil {
		return x.Link2Save
	}
	return nil
}

type DumpCustAddInfoGroupNeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr      int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode      string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction   string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	InfoGroup   int64       `protobuf:"varint,4,opt,name=infoGroup,proto3" json:"infoGroup,omitempty"`
	InfoCode    int64       `protobuf:"varint,5,opt,name=infoCode,proto3" json:"infoCode,omitempty"`
	InfoProcess *NullString `protobuf:"bytes,6,opt,name=infoProcess,proto3" json:"infoProcess,omitempty"`
}

func (x *DumpCustAddInfoGroupNeed) Reset() {
	*x = DumpCustAddInfoGroupNeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpCustAddInfoGroupNeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpCustAddInfoGroupNeed) ProtoMessage() {}

func (x *DumpCustAddInfoGroupNeed) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpCustAddInfoGroupNeed.ProtoReflect.Descriptor instead.
func (*DumpCustAddInfoGroupNeed) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{16}
}

func (x *DumpCustAddInfoGroupNeed) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpCustAddInfoGroupNeed) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpCustAddInfoGroupNeed) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpCustAddInfoGroupNeed) GetInfoGroup() int64 {
	if x != nil {
		return x.InfoGroup
	}
	return 0
}

func (x *DumpCustAddInfoGroupNeed) GetInfoCode() int64 {
	if x != nil {
		return x.InfoCode
	}
	return 0
}

func (x *DumpCustAddInfoGroupNeed) GetInfoProcess() *NullString {
	if x != nil {
		return x.InfoProcess
	}
	return nil
}

type DumpCustAddInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr    int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode    string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction string                 `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	CID       int64                  `protobuf:"varint,4,opt,name=cID,proto3" json:"cID,omitempty"`
	InfoDate  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=infoDate,proto3" json:"infoDate,omitempty"`
	InfoCode  int64                  `protobuf:"varint,6,opt,name=infoCode,proto3" json:"infoCode,omitempty"`
	Info      string                 `protobuf:"bytes,7,opt,name=info,proto3" json:"info,omitempty"`
	InfoValue int64                  `protobuf:"varint,8,opt,name=infoValue,proto3" json:"infoValue,omitempty"`
}

func (x *DumpCustAddInfo) Reset() {
	*x = DumpCustAddInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpCustAddInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpCustAddInfo) ProtoMessage() {}

func (x *DumpCustAddInfo) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpCustAddInfo.ProtoReflect.Descriptor instead.
func (*DumpCustAddInfo) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{17}
}

func (x *DumpCustAddInfo) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpCustAddInfo) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpCustAddInfo) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpCustAddInfo) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *DumpCustAddInfo) GetInfoDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoDate
	}
	return nil
}

func (x *DumpCustAddInfo) GetInfoCode() int64 {
	if x != nil {
		return x.InfoCode
	}
	return 0
}

func (x *DumpCustAddInfo) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *DumpCustAddInfo) GetInfoValue() int64 {
	if x != nil {
		return x.InfoValue
	}
	return 0
}

type DumpMutualFund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr    int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode    string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction string                 `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	CID       int64                  `protobuf:"varint,4,opt,name=cID,proto3" json:"cID,omitempty"`
	OrNo      *NullInt64             `protobuf:"bytes,5,opt,name=orNo,proto3" json:"orNo,omitempty"`
	TrnDate   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=trnDate,proto3" json:"trnDate,omitempty"`
	TrnType   *NullString            `protobuf:"bytes,7,opt,name=trnType,proto3" json:"trnType,omitempty"`
	TrnAmt    *Decimal               `protobuf:"bytes,8,opt,name=trnAmt,proto3" json:"trnAmt,omitempty"`
	UserName  *NullString            `protobuf:"bytes,9,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *DumpMutualFund) Reset() {
	*x = DumpMutualFund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpMutualFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpMutualFund) ProtoMessage() {}

func (x *DumpMutualFund) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpMutualFund.ProtoReflect.Descriptor instead.
func (*DumpMutualFund) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{18}
}

func (x *DumpMutualFund) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpMutualFund) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpMutualFund) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpMutualFund) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *DumpMutualFund) GetOrNo() *NullInt64 {
	if x != nil {
		return x.OrNo
	}
	return nil
}

func (x *DumpMutualFund) GetTrnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TrnDate
	}
	return nil
}

func (x *DumpMutualFund) GetTrnType() *NullString {
	if x != nil {
		return x.TrnType
	}
	return nil
}

func (x *DumpMutualFund) GetTrnAmt() *Decimal {
	if x != nil {
		return x.TrnAmt
	}
	return nil
}

func (x *DumpMutualFund) GetUserName() *NullString {
	if x != nil {
		return x.UserName
	}
	return nil
}

type DumpReferencesDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr             int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode             string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction          string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	ID                 int64       `protobuf:"varint,4,opt,name=iD,proto3" json:"iD,omitempty"`
	RefID              int64       `protobuf:"varint,5,opt,name=refID,proto3" json:"refID,omitempty"`
	PurposeDescription *NullString `protobuf:"bytes,6,opt,name=purposeDescription,proto3" json:"purposeDescription,omitempty"`
	ParentID           *NullInt64  `protobuf:"bytes,7,opt,name=parentID,proto3" json:"parentID,omitempty"`
	CodeID             *NullInt64  `protobuf:"bytes,8,opt,name=codeID,proto3" json:"codeID,omitempty"`
	Stat               *NullInt64  `protobuf:"bytes,9,opt,name=stat,proto3" json:"stat,omitempty"`
}

func (x *DumpReferencesDetails) Reset() {
	*x = DumpReferencesDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpReferencesDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpReferencesDetails) ProtoMessage() {}

func (x *DumpReferencesDetails) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpReferencesDetails.ProtoReflect.Descriptor instead.
func (*DumpReferencesDetails) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{19}
}

func (x *DumpReferencesDetails) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpReferencesDetails) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpReferencesDetails) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpReferencesDetails) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DumpReferencesDetails) GetRefID() int64 {
	if x != nil {
		return x.RefID
	}
	return 0
}

func (x *DumpReferencesDetails) GetPurposeDescription() *NullString {
	if x != nil {
		return x.PurposeDescription
	}
	return nil
}

func (x *DumpReferencesDetails) GetParentID() *NullInt64 {
	if x != nil {
		return x.ParentID
	}
	return nil
}

func (x *DumpReferencesDetails) GetCodeID() *NullInt64 {
	if x != nil {
		return x.CodeID
	}
	return nil
}

func (x *DumpReferencesDetails) GetStat() *NullInt64 {
	if x != nil {
		return x.Stat
	}
	return nil
}

type DumpCenterWorker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr      int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode      string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction   string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	AOID        int64       `protobuf:"varint,4,opt,name=aOID,proto3" json:"aOID,omitempty"`
	Lname       *NullString `protobuf:"bytes,5,opt,name=lname,proto3" json:"lname,omitempty"`
	FName       *NullString `protobuf:"bytes,6,opt,name=fName,proto3" json:"fName,omitempty"`
	Mname       *NullString `protobuf:"bytes,7,opt,name=mname,proto3" json:"mname,omitempty"`
	PhoneNumber *NullString `protobuf:"bytes,8,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
}

func (x *DumpCenterWorker) Reset() {
	*x = DumpCenterWorker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpCenterWorker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpCenterWorker) ProtoMessage() {}

func (x *DumpCenterWorker) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpCenterWorker.ProtoReflect.Descriptor instead.
func (*DumpCenterWorker) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{20}
}

func (x *DumpCenterWorker) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpCenterWorker) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpCenterWorker) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpCenterWorker) GetAOID() int64 {
	if x != nil {
		return x.AOID
	}
	return 0
}

func (x *DumpCenterWorker) GetLname() *NullString {
	if x != nil {
		return x.Lname
	}
	return nil
}

func (x *DumpCenterWorker) GetFName() *NullString {
	if x != nil {
		return x.FName
	}
	return nil
}

func (x *DumpCenterWorker) GetMname() *NullString {
	if x != nil {
		return x.Mname
	}
	return nil
}

func (x *DumpCenterWorker) GetPhoneNumber() *NullString {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

type DumpWriteoff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr     int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode     string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction  string                 `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	Acc        string                 `protobuf:"bytes,4,opt,name=acc,proto3" json:"acc,omitempty"`
	DisbDate   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=disbDate,proto3" json:"disbDate,omitempty"`
	Principal  *Decimal               `protobuf:"bytes,6,opt,name=principal,proto3" json:"principal,omitempty"`
	Interest   *Decimal               `protobuf:"bytes,7,opt,name=interest,proto3" json:"interest,omitempty"`
	BalPrin    *Decimal               `protobuf:"bytes,8,opt,name=balPrin,proto3" json:"balPrin,omitempty"`
	BalInt     *Decimal               `protobuf:"bytes,9,opt,name=balInt,proto3" json:"balInt,omitempty"`
	TrnDate    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=trnDate,proto3" json:"trnDate,omitempty"`
	AcctType   string                 `protobuf:"bytes,11,opt,name=acctType,proto3" json:"acctType,omitempty"`
	Print      *NullString            `protobuf:"bytes,12,opt,name=print,proto3" json:"print,omitempty"`
	PostedBy   *NullString            `protobuf:"bytes,13,opt,name=postedBy,proto3" json:"postedBy,omitempty"`
	VerifiedBy *NullString            `protobuf:"bytes,14,opt,name=verifiedBy,proto3" json:"verifiedBy,omitempty"`
}

func (x *DumpWriteoff) Reset() {
	*x = DumpWriteoff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpWriteoff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpWriteoff) ProtoMessage() {}

func (x *DumpWriteoff) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpWriteoff.ProtoReflect.Descriptor instead.
func (*DumpWriteoff) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{21}
}

func (x *DumpWriteoff) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpWriteoff) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpWriteoff) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpWriteoff) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpWriteoff) GetDisbDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DisbDate
	}
	return nil
}

func (x *DumpWriteoff) GetPrincipal() *Decimal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *DumpWriteoff) GetInterest() *Decimal {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *DumpWriteoff) GetBalPrin() *Decimal {
	if x != nil {
		return x.BalPrin
	}
	return nil
}

func (x *DumpWriteoff) GetBalInt() *Decimal {
	if x != nil {
		return x.BalInt
	}
	return nil
}

func (x *DumpWriteoff) GetTrnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TrnDate
	}
	return nil
}

func (x *DumpWriteoff) GetAcctType() string {
	if x != nil {
		return x.AcctType
	}
	return ""
}

func (x *DumpWriteoff) GetPrint() *NullString {
	if x != nil {
		return x.Print
	}
	return nil
}

func (x *DumpWriteoff) GetPostedBy() *NullString {
	if x != nil {
		return x.PostedBy
	}
	return nil
}

func (x *DumpWriteoff) GetVerifiedBy() *NullString {
	if x != nil {
		return x.VerifiedBy
	}
	return nil
}

type DumpAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr    int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode    string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	Acc       string      `protobuf:"bytes,4,opt,name=acc,proto3" json:"acc,omitempty"`
	Title     string      `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Category  int64       `protobuf:"varint,6,opt,name=category,proto3" json:"category,omitempty"`
	Type      string      `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	MainCD    *NullString `protobuf:"bytes,8,opt,name=mainCD,proto3" json:"mainCD,omitempty"`
	Parent    *NullString `protobuf:"bytes,9,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *DumpAccounts) Reset() {
	*x = DumpAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpAccounts) ProtoMessage() {}

func (x *DumpAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpAccounts.ProtoReflect.Descriptor instead.
func (*DumpAccounts) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{22}
}

func (x *DumpAccounts) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpAccounts) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpAccounts) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpAccounts) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpAccounts) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DumpAccounts) GetCategory() int64 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *DumpAccounts) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DumpAccounts) GetMainCD() *NullString {
	if x != nil {
		return x.MainCD
	}
	return nil
}

func (x *DumpAccounts) GetParent() *NullString {
	if x != nil {
		return x.Parent
	}
	return nil
}

type DumpJnlHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr      int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode      string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction   string                 `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	Trn         string                 `protobuf:"bytes,4,opt,name=trn,proto3" json:"trn,omitempty"`
	TrnDate     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=trnDate,proto3" json:"trnDate,omitempty"`
	Particulars string                 `protobuf:"bytes,6,opt,name=particulars,proto3" json:"particulars,omitempty"`
	UserName    *NullString            `protobuf:"bytes,7,opt,name=userName,proto3" json:"userName,omitempty"`
	Code        int64                  `protobuf:"varint,8,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *DumpJnlHeaders) Reset() {
	*x = DumpJnlHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpJnlHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpJnlHeaders) ProtoMessage() {}

func (x *DumpJnlHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpJnlHeaders.ProtoReflect.Descriptor instead.
func (*DumpJnlHeaders) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{23}
}

func (x *DumpJnlHeaders) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpJnlHeaders) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpJnlHeaders) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpJnlHeaders) GetTrn() string {
	if x != nil {
		return x.Trn
	}
	return ""
}

func (x *DumpJnlHeaders) GetTrnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TrnDate
	}
	return nil
}

func (x *DumpJnlHeaders) GetParticulars() string {
	if x != nil {
		return x.Particulars
	}
	return ""
}

func (x *DumpJnlHeaders) GetUserName() *NullString {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *DumpJnlHeaders) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

type DumpJnlDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr    int64      `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode    string     `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction string     `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	Acc       string     `protobuf:"bytes,4,opt,name=acc,proto3" json:"acc,omitempty"`
	Trn       string     `protobuf:"bytes,5,opt,name=trn,proto3" json:"trn,omitempty"`
	Series    *NullInt64 `protobuf:"bytes,6,opt,name=series,proto3" json:"series,omitempty"`
	Debit     *Decimal   `protobuf:"bytes,7,opt,name=debit,proto3" json:"debit,omitempty"`
	Credit    *Decimal   `protobuf:"bytes,8,opt,name=credit,proto3" json:"credit,omitempty"`
}

func (x *DumpJnlDetails) Reset() {
	*x = DumpJnlDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpJnlDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpJnlDetails) ProtoMessage() {}

func (x *DumpJnlDetails) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpJnlDetails.ProtoReflect.Descriptor instead.
func (*DumpJnlDetails) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{24}
}

func (x *DumpJnlDetails) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpJnlDetails) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpJnlDetails) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpJnlDetails) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpJnlDetails) GetTrn() string {
	if x != nil {
		return x.Trn
	}
	return ""
}

func (x *DumpJnlDetails) GetSeries() *NullInt64 {
	if x != nil {
		return x.Series
	}
	return nil
}

func (x *DumpJnlDetails) GetDebit() *Decimal {
	if x != nil {
		return x.Debit
	}
	return nil
}

func (x *DumpJnlDetails) GetCredit() *Decimal {
	if x != nil {
		return x.Credit
	}
	return nil
}

type DumpLedgerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr    int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode    string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction string                 `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	TrnDate   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=trnDate,proto3" json:"trnDate,omitempty"`
	Acc       string                 `protobuf:"bytes,5,opt,name=acc,proto3" json:"acc,omitempty"`
	Balance   *Decimal               `protobuf:"bytes,6,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *DumpLedgerDetails) Reset() {
	*x = DumpLedgerDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpLedgerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpLedgerDetails) ProtoMessage() {}

func (x *DumpLedgerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpLedgerDetails.ProtoReflect.Descriptor instead.
func (*DumpLedgerDetails) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{25}
}

func (x *DumpLedgerDetails) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpLedgerDetails) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpLedgerDetails) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpLedgerDetails) GetTrnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TrnDate
	}
	return nil
}

func (x *DumpLedgerDetails) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpLedgerDetails) GetBalance() *Decimal {
	if x != nil {
		return x.Balance
	}
	return nil
}

type DumpUsersList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr              int64       `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode              string      `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ModAction           string      `protobuf:"bytes,3,opt,name=modAction,proto3" json:"modAction,omitempty"`
	UserId              string      `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`
	AccessCode          *NullInt64  `protobuf:"bytes,5,opt,name=accessCode,proto3" json:"accessCode,omitempty"`
	LName               string      `protobuf:"bytes,6,opt,name=lName,proto3" json:"lName,omitempty"`
	FName               string      `protobuf:"bytes,7,opt,name=fName,proto3" json:"fName,omitempty"`
	MName               string      `protobuf:"bytes,8,opt,name=mName,proto3" json:"mName,omitempty"`
	DateHired           *NullTime   `protobuf:"bytes,9,opt,name=dateHired,proto3" json:"dateHired,omitempty"`
	BirthDay            *NullTime   `protobuf:"bytes,10,opt,name=birthDay,proto3" json:"birthDay,omitempty"`
	DateGiven           *NullTime   `protobuf:"bytes,11,opt,name=dateGiven,proto3" json:"dateGiven,omitempty"`
	DateExpired         *NullTime   `protobuf:"bytes,12,opt,name=dateExpired,proto3" json:"dateExpired,omitempty"`
	Address             *NullString `protobuf:"bytes,13,opt,name=address,proto3" json:"address,omitempty"`
	Position            *NullString `protobuf:"bytes,14,opt,name=position,proto3" json:"position,omitempty"`
	AreaCode            *NullInt64  `protobuf:"bytes,15,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	ManCode             *NullInt64  `protobuf:"bytes,16,opt,name=manCode,proto3" json:"manCode,omitempty"`
	AddInfo             *NullString `protobuf:"bytes,17,opt,name=addInfo,proto3" json:"addInfo,omitempty"`
	Passwd              []byte      `protobuf:"bytes,18,opt,name=passwd,proto3" json:"passwd,omitempty"`
	Attempt             *NullInt64  `protobuf:"bytes,19,opt,name=attempt,proto3" json:"attempt,omitempty"`
	DateLocked          *NullTime   `protobuf:"bytes,20,opt,name=dateLocked,proto3" json:"dateLocked,omitempty"`
	Remarks             *NullString `protobuf:"bytes,21,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Picture             []byte      `protobuf:"bytes,22,opt,name=picture,proto3" json:"picture,omitempty"`
	IsLoggedIn          bool        `protobuf:"varint,23,opt,name=isLoggedIn,proto3" json:"isLoggedIn,omitempty"`
	AccountExpirationDt *NullTime   `protobuf:"bytes,24,opt,name=accountExpirationDt,proto3" json:"accountExpirationDt,omitempty"`
}

func (x *DumpUsersList) Reset() {
	*x = DumpUsersList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpUsersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpUsersList) ProtoMessage() {}

func (x *DumpUsersList) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpUsersList.ProtoReflect.Descriptor instead.
func (*DumpUsersList) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{26}
}

func (x *DumpUsersList) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpUsersList) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpUsersList) GetModAction() string {
	if x != nil {
		return x.ModAction
	}
	return ""
}

func (x *DumpUsersList) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DumpUsersList) GetAccessCode() *NullInt64 {
	if x != nil {
		return x.AccessCode
	}
	return nil
}

func (x *DumpUsersList) GetLName() string {
	if x != nil {
		return x.LName
	}
	return ""
}

func (x *DumpUsersList) GetFName() string {
	if x != nil {
		return x.FName
	}
	return ""
}

func (x *DumpUsersList) GetMName() string {
	if x != nil {
		return x.MName
	}
	return ""
}

func (x *DumpUsersList) GetDateHired() *NullTime {
	if x != nil {
		return x.DateHired
	}
	return nil
}

func (x *DumpUsersList) GetBirthDay() *NullTime {
	if x != nil {
		return x.BirthDay
	}
	return nil
}

func (x *DumpUsersList) GetDateGiven() *NullTime {
	if x != nil {
		return x.DateGiven
	}
	return nil
}

func (x *DumpUsersList) GetDateExpired() *NullTime {
	if x != nil {
		return x.DateExpired
	}
	return nil
}

func (x *DumpUsersList) GetAddress() *NullString {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DumpUsersList) GetPosition() *NullString {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DumpUsersList) GetAreaCode() *NullInt64 {
	if x != nil {
		return x.AreaCode
	}
	return nil
}

func (x *DumpUsersList) GetManCode() *NullInt64 {
	if x != nil {
		return x.ManCode
	}
	return nil
}

func (x *DumpUsersList) GetAddInfo() *NullString {
	if x != nil {
		return x.AddInfo
	}
	return nil
}

func (x *DumpUsersList) GetPasswd() []byte {
	if x != nil {
		return x.Passwd
	}
	return nil
}

func (x *DumpUsersList) GetAttempt() *NullInt64 {
	if x != nil {
		return x.Attempt
	}
	return nil
}

func (x *DumpUsersList) GetDateLocked() *NullTime {
	if x != nil {
		return x.DateLocked
	}
	return nil
}

func (x *DumpUsersList) GetRemarks() *NullString {
	if x != nil {
		return x.Remarks
	}
	return nil
}

func (x *DumpUsersList) GetPicture() []byte {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *DumpUsersList) GetIsLoggedIn() bool {
	if x != nil {
		return x.IsLoggedIn
	}
	return false
}

func (x *DumpUsersList) GetAccountExpirationDt() *NullTime {
	if x != nil {
		return x.AccountExpirationDt
	}
	return nil
}

type DumpMultiplePaymentReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr   int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode   string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	TrnDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=trnDate,proto3" json:"trnDate,omitempty"`
	OrNo     int64                  `protobuf:"varint,4,opt,name=orNo,proto3" json:"orNo,omitempty"`
	CID      int64                  `protobuf:"varint,5,opt,name=cID,proto3" json:"cID,omitempty"`
	PrNo     int64                  `protobuf:"varint,6,opt,name=prNo,proto3" json:"prNo,omitempty"`
	UserName string                 `protobuf:"bytes,7,opt,name=userName,proto3" json:"userName,omitempty"`
	TermId   string                 `protobuf:"bytes,8,opt,name=termId,proto3" json:"termId,omitempty"`
	AmtPaid  *Decimal               `protobuf:"bytes,9,opt,name=amtPaid,proto3" json:"amtPaid,omitempty"`
}

func (x *DumpMultiplePaymentReceipt) Reset() {
	*x = DumpMultiplePaymentReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpMultiplePaymentReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpMultiplePaymentReceipt) ProtoMessage() {}

func (x *DumpMultiplePaymentReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpMultiplePaymentReceipt.ProtoReflect.Descriptor instead.
func (*DumpMultiplePaymentReceipt) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{27}
}

func (x *DumpMultiplePaymentReceipt) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpMultiplePaymentReceipt) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpMultiplePaymentReceipt) GetTrnDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TrnDate
	}
	return nil
}

func (x *DumpMultiplePaymentReceipt) GetOrNo() int64 {
	if x != nil {
		return x.OrNo
	}
	return 0
}

func (x *DumpMultiplePaymentReceipt) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *DumpMultiplePaymentReceipt) GetPrNo() int64 {
	if x != nil {
		return x.PrNo
	}
	return 0
}

func (x *DumpMultiplePaymentReceipt) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DumpMultiplePaymentReceipt) GetTermId() string {
	if x != nil {
		return x.TermId
	}
	return ""
}

func (x *DumpMultiplePaymentReceipt) GetAmtPaid() *Decimal {
	if x != nil {
		return x.AmtPaid
	}
	return nil
}

type DumpInActiveCID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr        int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode        string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	CID           int64                  `protobuf:"varint,3,opt,name=cID,proto3" json:"cID,omitempty"`
	InActive      bool                   `protobuf:"varint,4,opt,name=inActive,proto3" json:"inActive,omitempty"`
	DateStart     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=dateStart,proto3" json:"dateStart,omitempty"`
	DateEnd       *NullTime              `protobuf:"bytes,6,opt,name=dateEnd,proto3" json:"dateEnd,omitempty"`
	UserId        string                 `protobuf:"bytes,7,opt,name=userId,proto3" json:"userId,omitempty"`
	DeactivatedBy *NullString            `protobuf:"bytes,8,opt,name=deactivatedBy,proto3" json:"deactivatedBy,omitempty"`
}

func (x *DumpInActiveCID) Reset() {
	*x = DumpInActiveCID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpInActiveCID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpInActiveCID) ProtoMessage() {}

func (x *DumpInActiveCID) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpInActiveCID.ProtoReflect.Descriptor instead.
func (*DumpInActiveCID) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{28}
}

func (x *DumpInActiveCID) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpInActiveCID) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpInActiveCID) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *DumpInActiveCID) GetInActive() bool {
	if x != nil {
		return x.InActive
	}
	return false
}

func (x *DumpInActiveCID) GetDateStart() *timestamppb.Timestamp {
	if x != nil {
		return x.DateStart
	}
	return nil
}

func (x *DumpInActiveCID) GetDateEnd() *NullTime {
	if x != nil {
		return x.DateEnd
	}
	return nil
}

func (x *DumpInActiveCID) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DumpInActiveCID) GetDeactivatedBy() *NullString {
	if x != nil {
		return x.DeactivatedBy
	}
	return nil
}

type DumpLnBeneficiary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr     int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode     string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	Acc        string                 `protobuf:"bytes,3,opt,name=acc,proto3" json:"acc,omitempty"`
	BDay       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=bDay,proto3" json:"bDay,omitempty"`
	EducLvl    string                 `protobuf:"bytes,5,opt,name=educLvl,proto3" json:"educLvl,omitempty"`
	Gender     bool                   `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`
	LastName   *NullString            `protobuf:"bytes,7,opt,name=lastName,proto3" json:"lastName,omitempty"`
	FirstName  *NullString            `protobuf:"bytes,8,opt,name=firstName,proto3" json:"firstName,omitempty"`
	MiddleName *NullString            `protobuf:"bytes,9,opt,name=middleName,proto3" json:"middleName,omitempty"`
	Remarks    *NullString            `protobuf:"bytes,10,opt,name=remarks,proto3" json:"remarks,omitempty"`
}

func (x *DumpLnBeneficiary) Reset() {
	*x = DumpLnBeneficiary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpLnBeneficiary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpLnBeneficiary) ProtoMessage() {}

func (x *DumpLnBeneficiary) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpLnBeneficiary.ProtoReflect.Descriptor instead.
func (*DumpLnBeneficiary) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{29}
}

func (x *DumpLnBeneficiary) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpLnBeneficiary) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpLnBeneficiary) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpLnBeneficiary) GetBDay() *timestamppb.Timestamp {
	if x != nil {
		return x.BDay
	}
	return nil
}

func (x *DumpLnBeneficiary) GetEducLvl() string {
	if x != nil {
		return x.EducLvl
	}
	return ""
}

func (x *DumpLnBeneficiary) GetGender() bool {
	if x != nil {
		return x.Gender
	}
	return false
}

func (x *DumpLnBeneficiary) GetLastName() *NullString {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *DumpLnBeneficiary) GetFirstName() *NullString {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *DumpLnBeneficiary) GetMiddleName() *NullString {
	if x != nil {
		return x.MiddleName
	}
	return nil
}

func (x *DumpLnBeneficiary) GetRemarks() *NullString {
	if x != nil {
		return x.Remarks
	}
	return nil
}

type DumpReactivateWriteoff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModCtr       int64                  `protobuf:"varint,1,opt,name=modCtr,proto3" json:"modCtr,omitempty"`
	BrCode       string                 `protobuf:"bytes,2,opt,name=brCode,proto3" json:"brCode,omitempty"`
	ID           int64                  `protobuf:"varint,3,opt,name=iD,proto3" json:"iD,omitempty"`
	CID          int64                  `protobuf:"varint,4,opt,name=cID,proto3" json:"cID,omitempty"`
	DeactivateBy *NullString            `protobuf:"bytes,5,opt,name=deactivateBy,proto3" json:"deactivateBy,omitempty"`
	ReactivateBy *NullString            `protobuf:"bytes,6,opt,name=reactivateBy,proto3" json:"reactivateBy,omitempty"`
	Status       int64                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	StatusDate   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=statusDate,proto3" json:"statusDate,omitempty"`
}

func (x *DumpReactivateWriteoff) Reset() {
	*x = DumpReactivateWriteoff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpReactivateWriteoff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpReactivateWriteoff) ProtoMessage() {}

func (x *DumpReactivateWriteoff) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpReactivateWriteoff.ProtoReflect.Descriptor instead.
func (*DumpReactivateWriteoff) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{30}
}

func (x *DumpReactivateWriteoff) GetModCtr() int64 {
	if x != nil {
		return x.ModCtr
	}
	return 0
}

func (x *DumpReactivateWriteoff) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpReactivateWriteoff) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DumpReactivateWriteoff) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *DumpReactivateWriteoff) GetDeactivateBy() *NullString {
	if x != nil {
		return x.DeactivateBy
	}
	return nil
}

func (x *DumpReactivateWriteoff) GetReactivateBy() *NullString {
	if x != nil {
		return x.ReactivateBy
	}
	return nil
}

func (x *DumpReactivateWriteoff) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DumpReactivateWriteoff) GetStatusDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusDate
	}
	return nil
}

type DumpColSht struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrCode          string                 `protobuf:"bytes,1,opt,name=brCode,proto3" json:"brCode,omitempty"`
	AppType         int64                  `protobuf:"varint,2,opt,name=appType,proto3" json:"appType,omitempty"`
	Code            int64                  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Status          int64                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Acc             string                 `protobuf:"bytes,5,opt,name=acc,proto3" json:"acc,omitempty"`
	CID             int64                  `protobuf:"varint,6,opt,name=cID,proto3" json:"cID,omitempty"`
	UM              string                 `protobuf:"bytes,7,opt,name=uM,proto3" json:"uM,omitempty"`
	ClientName      string                 `protobuf:"bytes,8,opt,name=clientName,proto3" json:"clientName,omitempty"`
	CenterCode      string                 `protobuf:"bytes,9,opt,name=centerCode,proto3" json:"centerCode,omitempty"`
	CenterName      string                 `protobuf:"bytes,10,opt,name=centerName,proto3" json:"centerName,omitempty"`
	ManCode         int64                  `protobuf:"varint,11,opt,name=manCode,proto3" json:"manCode,omitempty"`
	Unit            string                 `protobuf:"bytes,12,opt,name=unit,proto3" json:"unit,omitempty"`
	AreaCode        int64                  `protobuf:"varint,13,opt,name=areaCode,proto3" json:"areaCode,omitempty"`
	Area            string                 `protobuf:"bytes,14,opt,name=area,proto3" json:"area,omitempty"`
	StaffName       string                 `protobuf:"bytes,15,opt,name=staffName,proto3" json:"staffName,omitempty"`
	AcctType        int64                  `protobuf:"varint,16,opt,name=acctType,proto3" json:"acctType,omitempty"`
	AcctDesc        string                 `protobuf:"bytes,17,opt,name=acctDesc,proto3" json:"acctDesc,omitempty"`
	DisbDate        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=disbDate,proto3" json:"disbDate,omitempty"`
	DateStart       *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=dateStart,proto3" json:"dateStart,omitempty"`
	Maturity        *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=maturity,proto3" json:"maturity,omitempty"`
	Principal       *Decimal               `protobuf:"bytes,21,opt,name=principal,proto3" json:"principal,omitempty"`
	Interest        *Decimal               `protobuf:"bytes,22,opt,name=interest,proto3" json:"interest,omitempty"`
	Gives           int64                  `protobuf:"varint,23,opt,name=gives,proto3" json:"gives,omitempty"`
	BalPrin         *Decimal               `protobuf:"bytes,24,opt,name=balPrin,proto3" json:"balPrin,omitempty"`
	BalInt          *Decimal               `protobuf:"bytes,25,opt,name=balInt,proto3" json:"balInt,omitempty"`
	Amort           *Decimal               `protobuf:"bytes,26,opt,name=amort,proto3" json:"amort,omitempty"`
	DuePrin         *Decimal               `protobuf:"bytes,27,opt,name=duePrin,proto3" json:"duePrin,omitempty"`
	DueInt          *Decimal               `protobuf:"bytes,28,opt,name=dueInt,proto3" json:"dueInt,omitempty"`
	LoanBal         *Decimal               `protobuf:"bytes,29,opt,name=loanBal,proto3" json:"loanBal,omitempty"`
	SaveBal         *Decimal               `protobuf:"bytes,30,opt,name=saveBal,proto3" json:"saveBal,omitempty"`
	WaivedInt       *Decimal               `protobuf:"bytes,31,opt,name=waivedInt,proto3" json:"waivedInt,omitempty"`
	UnPaidCtr       int64                  `protobuf:"varint,32,opt,name=unPaidCtr,proto3" json:"unPaidCtr,omitempty"`
	WrittenOff      int64                  `protobuf:"varint,33,opt,name=WrittenOff,proto3" json:"WrittenOff,omitempty"`
	OrgName         string                 `protobuf:"bytes,34,opt,name=orgName,proto3" json:"orgName,omitempty"`
	OrgAddress      string                 `protobuf:"bytes,35,opt,name=orgAddress,proto3" json:"orgAddress,omitempty"`
	MeetingDate     *timestamppb.Timestamp `protobuf:"bytes,36,opt,name=meetingDate,proto3" json:"meetingDate,omitempty"`
	MeetingDay      int64                  `protobuf:"varint,37,opt,name=meetingDay,proto3" json:"meetingDay,omitempty"`
	SharesOfStock   *Decimal               `protobuf:"bytes,38,opt,name=sharesOfStock,proto3" json:"sharesOfStock,omitempty"`
	DateEstablished *timestamppb.Timestamp `protobuf:"bytes,39,opt,name=dateEstablished,proto3" json:"dateEstablished,omitempty"`
	Classification  int64                  `protobuf:"varint,40,opt,name=classification,proto3" json:"classification,omitempty"`
	WriteOff        int64                  `protobuf:"varint,41,opt,name=writeOff,proto3" json:"writeOff,omitempty"`
}

func (x *DumpColSht) Reset() {
	*x = DumpColSht{}
	if protoimpl.UnsafeEnabled {
		mi := &file_esystemdump_message_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpColSht) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpColSht) ProtoMessage() {}

func (x *DumpColSht) ProtoReflect() protoreflect.Message {
	mi := &file_esystemdump_message_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpColSht.ProtoReflect.Descriptor instead.
func (*DumpColSht) Descriptor() ([]byte, []int) {
	return file_esystemdump_message_proto_rawDescGZIP(), []int{31}
}

func (x *DumpColSht) GetBrCode() string {
	if x != nil {
		return x.BrCode
	}
	return ""
}

func (x *DumpColSht) GetAppType() int64 {
	if x != nil {
		return x.AppType
	}
	return 0
}

func (x *DumpColSht) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DumpColSht) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DumpColSht) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *DumpColSht) GetCID() int64 {
	if x != nil {
		return x.CID
	}
	return 0
}

func (x *DumpColSht) GetUM() string {
	if x != nil {
		return x.UM
	}
	return ""
}

func (x *DumpColSht) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *DumpColSht) GetCenterCode() string {
	if x != nil {
		return x.CenterCode
	}
	return ""
}

func (x *DumpColSht) GetCenterName() string {
	if x != nil {
		return x.CenterName
	}
	return ""
}

func (x *DumpColSht) GetManCode() int64 {
	if x != nil {
		return x.ManCode
	}
	return 0
}

func (x *DumpColSht) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *DumpColSht) GetAreaCode() int64 {
	if x != nil {
		return x.AreaCode
	}
	return 0
}

func (x *DumpColSht) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *DumpColSht) GetStaffName() string {
	if x != nil {
		return x.StaffName
	}
	return ""
}

func (x *DumpColSht) GetAcctType() int64 {
	if x != nil {
		return x.AcctType
	}
	return 0
}

func (x *DumpColSht) GetAcctDesc() string {
	if x != nil {
		return x.AcctDesc
	}
	return ""
}

func (x *DumpColSht) GetDisbDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DisbDate
	}
	return nil
}

func (x *DumpColSht) GetDateStart() *timestamppb.Timestamp {
	if x != nil {
		return x.DateStart
	}
	return nil
}

func (x *DumpColSht) GetMaturity() *timestamppb.Timestamp {
	if x != nil {
		return x.Maturity
	}
	return nil
}

func (x *DumpColSht) GetPrincipal() *Decimal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *DumpColSht) GetInterest() *Decimal {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *DumpColSht) GetGives() int64 {
	if x != nil {
		return x.Gives
	}
	return 0
}

func (x *DumpColSht) GetBalPrin() *Decimal {
	if x != nil {
		return x.BalPrin
	}
	return nil
}

func (x *DumpColSht) GetBalInt() *Decimal {
	if x != nil {
		return x.BalInt
	}
	return nil
}

func (x *DumpColSht) GetAmort() *Decimal {
	if x != nil {
		return x.Amort
	}
	return nil
}

func (x *DumpColSht) GetDuePrin() *Decimal {
	if x != nil {
		return x.DuePrin
	}
	return nil
}

func (x *DumpColSht) GetDueInt() *Decimal {
	if x != nil {
		return x.DueInt
	}
	return nil
}

func (x *DumpColSht) GetLoanBal() *Decimal {
	if x != nil {
		return x.LoanBal
	}
	return nil
}

func (x *DumpColSht) GetSaveBal() *Decimal {
	if x != nil {
		return x.SaveBal
	}
	return nil
}

func (x *DumpColSht) GetWaivedInt() *Decimal {
	if x != nil {
		return x.WaivedInt
	}
	return nil
}

func (x *DumpColSht) GetUnPaidCtr() int64 {
	if x != nil {
		return x.UnPaidCtr
	}
	return 0
}

func (x *DumpColSht) GetWrittenOff() int64 {
	if x != nil {
		return x.WrittenOff
	}
	return 0
}

func (x *DumpColSht) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *DumpColSht) GetOrgAddress() string {
	if x != nil {
		return x.OrgAddress
	}
	return ""
}

func (x *DumpColSht) GetMeetingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MeetingDate
	}
	return nil
}

func (x *DumpColSht) GetMeetingDay() int64 {
	if x != nil {
		return x.MeetingDay
	}
	return 0
}

func (x *DumpColSht) GetSharesOfStock() *Decimal {
	if x != nil {
		return x.SharesOfStock
	}
	return nil
}

func (x *DumpColSht) GetDateEstablished() *timestamppb.Timestamp {
	if x != nil {
		return x.DateEstablished
	}
	return nil
}

func (x *DumpColSht) GetClassification() int64 {
	if x != nil {
		return x.Classification
	}
	return 0
}

func (x *DumpColSht) GetWriteOff() int64 {
	if x != nil {
		return x.WriteOff
	}
	return 0
}

var File_esystemdump_message_proto protoreflect.FileDescriptor

var file_esystemdump_message_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x09, 0x0a, 0x07,
	0x6e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xee, 0x03, 0x0a, 0x0e, 0x44, 0x75, 0x6d, 0x70,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x62, 0x53, 0x79, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x65, 0x62, 0x53, 0x79, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x43, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x66, 0x5a, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x66, 0x5a, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x76, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x61, 0x69,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x42, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x42, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x56, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x42, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x42, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x11, 0x44, 0x75, 0x6d, 0x70,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x43, 0x74,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x43, 0x74, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x61, 0x72,
	0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22, 0xc7, 0x03, 0x0a, 0x08, 0x44, 0x75, 0x6d, 0x70, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x61, 0x74, 0x52, 0x65, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x76, 0x61, 0x74, 0x52, 0x65, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xbd, 0x03, 0x0a, 0x0a, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0a,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x45, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x61, 0x4f, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x04, 0x61, 0x4f, 0x49, 0x44,
	0x22, 0x9f, 0x18, 0x0a, 0x0c, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x49,
	0x44, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d,
	0x61, 0x69, 0x64, 0x65, 0x6e, 0x46, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x61,
	0x69, 0x64, 0x65, 0x6e, 0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x64, 0x65, 0x6e, 0x4d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x0b, 0x63, 0x69, 0x76, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x11, 0x73, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x6d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x70,
	0x61, 0x6e, 0x67, 0x61, 0x72, 0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0e, 0x70, 0x61, 0x6e, 0x67, 0x61, 0x72,
	0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x6b, 0x61, 0x74, 0x75,
	0x70, 0x61, 0x72, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0f, 0x6b, 0x61, 0x74, 0x75, 0x70, 0x61, 0x72, 0x61,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x50, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x09, 0x61, 0x63, 0x63, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x50, 0x61, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x07, 0x61, 0x63, 0x63, 0x50, 0x61, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x4b, 0x61, 0x74, 0x75, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x4b, 0x61, 0x74, 0x75, 0x70,
	0x61, 0x72, 0x61, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x49, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x0c, 0x61, 0x63, 0x63, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x6c, 0x6f, 0x61, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x32, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x4c, 0x69, 0x66,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0e, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x6f, 0x72,
	0x72, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x07, 0x63, 0x6f, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x09, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x67, 0x75, 0x61, 0x72,
	0x61, 0x6e, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x4f, 0x53, 0x52, 0x49, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x64, 0x4f, 0x53,
	0x52, 0x49, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x31, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x07, 0x69, 0x44, 0x43, 0x6f,
	0x64, 0x65, 0x31, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x44, 0x4e, 0x75, 0x6d, 0x31, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x69, 0x44, 0x4e,
	0x75, 0x6d, 0x31, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x07, 0x69, 0x44, 0x43,
	0x6f, 0x64, 0x65, 0x32, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x44, 0x4e, 0x75, 0x6d, 0x32, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x69, 0x44,
	0x4e, 0x75, 0x6d, 0x32, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x31,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x31, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x32, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x32, 0x12, 0x2e, 0x0a, 0x06,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x31, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x72, 0x65, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x31, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x32, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x32, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x64, 0x33, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x72, 0x65, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x33, 0x12, 0x33,
	0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x31,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x31, 0x12, 0x32, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x32, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x32, 0x12, 0x39, 0x0a, 0x0c, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x49, 0x49, 0x44, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x04, 0x69, 0x49, 0x49, 0x44, 0x12,
	0x31, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0x9b, 0x04, 0x0a, 0x0d, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x63, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x0e,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x08,
	0x62, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x61, 0x79,
	0x12, 0x2a, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x31,
	0x12, 0x2e, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x32,
	0x12, 0x2e, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x33,
	0x12, 0x2e, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x34,
	0x22, 0xac, 0x0a, 0x0a, 0x0c, 0x44, 0x75, 0x6d, 0x70, 0x4c, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x63, 0x63, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x62, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x62, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x65,
	0x64, 0x12, 0x2b, 0x0a, 0x05, 0x67, 0x69, 0x76, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x05, 0x67, 0x69, 0x76, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x6e, 0x6e, 0x75, 0x6d, 0x44, 0x69, 0x76, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x08, 0x61, 0x6e,
	0x6e, 0x75, 0x6d, 0x44, 0x69, 0x76, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6e, 0x12,
	0x27, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x52, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x52, 0x12, 0x31, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x76,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x09, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x77,
	0x65, 0x65, 0x6b, 0x73, 0x50, 0x61, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x50, 0x61, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x0a, 0x64, 0x6f, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x6f, 0x4d, 0x61,
	0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x52, 0x05, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x4e, 0x47, 0x72,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x52, 0x09, 0x6c, 0x4e, 0x47, 0x72, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x66, 0x66, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x66, 0x66, 0x12, 0x36, 0x0a, 0x0a, 0x66, 0x75,
	0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x4f, 0x53, 0x52, 0x49, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x64, 0x4f, 0x53, 0x52, 0x49, 0x12, 0x35,
	0x0a, 0x0a, 0x6c, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0a, 0x6c, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x62, 0x42, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x64, 0x69, 0x73, 0x62, 0x42, 0x79, 0x22,
	0xbb, 0x03, 0x0a, 0x0c, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x61, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09,
	0x64, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x64, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x08, 0x64, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x64,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x05, 0x64, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x6f, 0x4d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0a, 0x64, 0x6f, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x04,
	0x0a, 0x0d, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x72, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x63, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12,
	0x34, 0x0a, 0x07, 0x74, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x72,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x74, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x07, 0x74, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6f, 0x72, 0x4e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x04, 0x6f,
	0x72, 0x4e, 0x6f, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x04,
	0x69, 0x6e, 0x74, 0x52, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x04, 0x69, 0x6e, 0x74, 0x52, 0x12, 0x31, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x77,
	0x61, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x4e,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x72, 0x65, 0x66, 0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c,
	0x61, 0x72, 0x22, 0xe6, 0x03, 0x0a, 0x0f, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x61, 0x54, 0x72, 0x6e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x72, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x72, 0x6e, 0x12, 0x2f,
	0x0a, 0x07, 0x74, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x6f, 0x72, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x52, 0x04, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x72,
	0x6e, 0x41, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x06, 0x74, 0x72, 0x6e, 0x41, 0x6d, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x65, 0x66, 0x4e, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x72, 0x65, 0x66, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x6e,
	0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x0c,
	0x44, 0x75, 0x6d, 0x70, 0x4c, 0x6f, 0x61, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x6e, 0x75, 0x6d,
	0x12, 0x34, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x64, 0x75, 0x65, 0x50, 0x72, 0x69,
	0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x64, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x64, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x05, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x44, 0x75,
	0x6d, 0x70, 0x4c, 0x6e, 0x43, 0x68, 0x72, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x68, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x41,
	0x63, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x72, 0x65, 0x66, 0x41, 0x63, 0x63, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x68, 0x72, 0x41,
	0x6d, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07,
	0x63, 0x68, 0x72, 0x41, 0x6d, 0x6e, 0x74, 0x22, 0xc7, 0x02, 0x0a, 0x13, 0x44, 0x75, 0x6d, 0x70,
	0x43, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x66,
	0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x66, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x66,
	0x6f, 0x4c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f,
	0x4c, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0xc0, 0x03, 0x0a, 0x14, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x75, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43,
	0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x66,
	0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x30,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x34, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x4f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x4f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x4f, 0x6e, 0x45,
	0x78, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x4f, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x69,
	0x6e, 0x6b, 0x32, 0x4c, 0x6f, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x32, 0x4c, 0x6f, 0x61, 0x6e, 0x12,
	0x33, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x32, 0x53, 0x61, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x32,
	0x53, 0x61, 0x76, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x75, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6e, 0x66,
	0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x0f, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x75, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x63, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe4, 0x02,
	0x0a, 0x0e, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x04, 0x6f, 0x72, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x04, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x74,
	0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x72, 0x6e, 0x41, 0x6d, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x74, 0x72, 0x6e, 0x41, 0x6d, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x15, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x66, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x65, 0x66,
	0x49, 0x44, 0x12, 0x46, 0x0a, 0x12, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2d, 0x0a,
	0x06, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x04,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x22, 0xb8, 0x02, 0x0a, 0x10, 0x44, 0x75, 0x6d, 0x70,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x4f,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x4f, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x05, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xd2, 0x04, 0x0a, 0x0c, 0x44, 0x75, 0x6d, 0x70, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x6f, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x63, 0x63, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x62, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x64, 0x69, 0x73, 0x62, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x2f,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x12, 0x2b,
	0x0a, 0x06, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x74,
	0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x36, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x22, 0x94, 0x02, 0x0a, 0x0c, 0x44, 0x75, 0x6d, 0x70,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x44, 0x12, 0x2e,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x90,
	0x02, 0x0a, 0x0e, 0x44, 0x75, 0x6d, 0x70, 0x4a, 0x6e, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x72,
	0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x74, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x89, 0x02, 0x0a, 0x0e, 0x44, 0x75, 0x6d, 0x70, 0x4a, 0x6e, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x22, 0xd8, 0x01,
	0x0a, 0x11, 0x44, 0x75, 0x6d, 0x70, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x74, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xef, 0x07, 0x0a, 0x0d, 0x44, 0x75, 0x6d,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43,
	0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x48, 0x69, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79, 0x12,
	0x32, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x47, 0x69,
	0x76, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x07, 0x6d, 0x61,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x12,
	0x2f, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x12, 0x34, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x1a, 0x44,
	0x75, 0x6d, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x72, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6f, 0x72, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6f,
	0x72, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x63, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x4e, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x72, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x07, 0x61, 0x6d, 0x74, 0x50, 0x61, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x07, 0x61, 0x6d, 0x74, 0x50, 0x61, 0x69, 0x64, 0x22, 0xaf, 0x02, 0x0a,
	0x0f, 0x44, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0d, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x8b,
	0x03, 0x0a, 0x11, 0x44, 0x75, 0x6d, 0x70, 0x4c, 0x6e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x44, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x62, 0x44, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x75, 0x63, 0x4c, 0x76,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x75, 0x63, 0x4c, 0x76, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xb6, 0x02, 0x0a,
	0x16, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x6f, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x43, 0x74, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x61, 0x74, 0x65, 0x22, 0xe5, 0x0b, 0x0a, 0x0a, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f,
	0x6c, 0x53, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x63, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x4d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x75, 0x4d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x65, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66, 0x66, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x62, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x69, 0x73, 0x62, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x69, 0x76, 0x65,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x67, 0x69, 0x76, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x12, 0x2b, 0x0a,
	0x06, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x6d,
	0x6f, 0x72, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05,
	0x61, 0x6d, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x64, 0x75, 0x65,
	0x50, 0x72, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x64, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x64, 0x75, 0x65, 0x49, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x07, 0x6c, 0x6f, 0x61, 0x6e, 0x42, 0x61, 0x6c, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x6e, 0x42, 0x61, 0x6c,
	0x12, 0x2d, 0x0a, 0x07, 0x73, 0x61, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x73, 0x61, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x12,
	0x31, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x50, 0x61, 0x69, 0x64, 0x43, 0x74, 0x72, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x6e, 0x50, 0x61, 0x69, 0x64, 0x43, 0x74, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x4f, 0x66, 0x66,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x72, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x4f, 0x66, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x66, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x45, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x42, 0x20, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x64, 0x73, 0x61, 0x70, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x62, 0x50, 0x01, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_esystemdump_message_proto_rawDescOnce sync.Once
	file_esystemdump_message_proto_rawDescData = file_esystemdump_message_proto_rawDesc
)

func file_esystemdump_message_proto_rawDescGZIP() []byte {
	file_esystemdump_message_proto_rawDescOnce.Do(func() {
		file_esystemdump_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_esystemdump_message_proto_rawDescData)
	})
	return file_esystemdump_message_proto_rawDescData
}

var file_esystemdump_message_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_esystemdump_message_proto_goTypes = []interface{}{
	(*NoParam)(nil),                    // 0: simplebank.noParam
	(*DumpBranchList)(nil),             // 1: simplebank.DumpBranchList
	(*DumpModifiedTable)(nil),          // 2: simplebank.DumpModifiedTable
	(*DumpArea)(nil),                   // 3: simplebank.DumpArea
	(*DumpUnit)(nil),                   // 4: simplebank.DumpUnit
	(*DumpCenter)(nil),                 // 5: simplebank.DumpCenter
	(*DumpCustomer)(nil),               // 6: simplebank.DumpCustomer
	(*DumpAddresses)(nil),              // 7: simplebank.DumpAddresses
	(*DumpLnMaster)(nil),               // 8: simplebank.DumpLnMaster
	(*DumpSaMaster)(nil),               // 9: simplebank.DumpSaMaster
	(*DumpTrnMaster)(nil),              // 10: simplebank.DumpTrnMaster
	(*DumpSaTrnMaster)(nil),            // 11: simplebank.DumpSaTrnMaster
	(*DumpLoanInst)(nil),               // 12: simplebank.DumpLoanInst
	(*DumpLnChrgData)(nil),             // 13: simplebank.DumpLnChrgData
	(*DumpCustAddInfoList)(nil),        // 14: simplebank.DumpCustAddInfoList
	(*DumpCustAddInfoGroup)(nil),       // 15: simplebank.DumpCustAddInfoGroup
	(*DumpCustAddInfoGroupNeed)(nil),   // 16: simplebank.DumpCustAddInfoGroupNeed
	(*DumpCustAddInfo)(nil),            // 17: simplebank.DumpCustAddInfo
	(*DumpMutualFund)(nil),             // 18: simplebank.DumpMutualFund
	(*DumpReferencesDetails)(nil),      // 19: simplebank.DumpReferencesDetails
	(*DumpCenterWorker)(nil),           // 20: simplebank.DumpCenterWorker
	(*DumpWriteoff)(nil),               // 21: simplebank.DumpWriteoff
	(*DumpAccounts)(nil),               // 22: simplebank.DumpAccounts
	(*DumpJnlHeaders)(nil),             // 23: simplebank.DumpJnlHeaders
	(*DumpJnlDetails)(nil),             // 24: simplebank.DumpJnlDetails
	(*DumpLedgerDetails)(nil),          // 25: simplebank.DumpLedgerDetails
	(*DumpUsersList)(nil),              // 26: simplebank.DumpUsersList
	(*DumpMultiplePaymentReceipt)(nil), // 27: simplebank.DumpMultiplePaymentReceipt
	(*DumpInActiveCID)(nil),            // 28: simplebank.DumpInActiveCID
	(*DumpLnBeneficiary)(nil),          // 29: simplebank.DumpLnBeneficiary
	(*DumpReactivateWriteoff)(nil),     // 30: simplebank.DumpReactivateWriteoff
	(*DumpColSht)(nil),                 // 31: simplebank.DumpColSht
	(*timestamppb.Timestamp)(nil),      // 32: google.protobuf.Timestamp
	(*NullString)(nil),                 // 33: simplebank.NullString
	(*NullInt64)(nil),                  // 34: simplebank.NullInt64
	(*NullTime)(nil),                   // 35: simplebank.NullTime
	(*Decimal)(nil),                    // 36: simplebank.Decimal
	(*NullBool)(nil),                   // 37: simplebank.NullBool
}
var file_esystemdump_message_proto_depIdxs = []int32{
	32,  // 0: simplebank.DumpBranchList.ebSysDate:type_name -> google.protobuf.Timestamp
	32,  // 1: simplebank.DumpBranchList.lastConnection:type_name -> google.protobuf.Timestamp
	33,  // 2: simplebank.DumpArea.area:type_name -> simplebank.NullString
	33,  // 3: simplebank.DumpUnit.unit:type_name -> simplebank.NullString
	34,  // 4: simplebank.DumpUnit.areaCode:type_name -> simplebank.NullInt64
	33,  // 5: simplebank.DumpUnit.fName:type_name -> simplebank.NullString
	33,  // 6: simplebank.DumpUnit.lName:type_name -> simplebank.NullString
	33,  // 7: simplebank.DumpUnit.mName:type_name -> simplebank.NullString
	33,  // 8: simplebank.DumpUnit.vatReg:type_name -> simplebank.NullString
	33,  // 9: simplebank.DumpUnit.unitAddress:type_name -> simplebank.NullString
	33,  // 10: simplebank.DumpCenter.centerName:type_name -> simplebank.NullString
	33,  // 11: simplebank.DumpCenter.centerAddress:type_name -> simplebank.NullString
	34,  // 12: simplebank.DumpCenter.meetingDay:type_name -> simplebank.NullInt64
	34,  // 13: simplebank.DumpCenter.unit:type_name -> simplebank.NullInt64
	35,  // 14: simplebank.DumpCenter.dateEstablished:type_name -> simplebank.NullTime
	34,  // 15: simplebank.DumpCenter.aOID:type_name -> simplebank.NullInt64
	33,  // 16: simplebank.DumpCustomer.centerCode:type_name -> simplebank.NullString
	34,  // 17: simplebank.DumpCustomer.title:type_name -> simplebank.NullInt64
	33,  // 18: simplebank.DumpCustomer.lName:type_name -> simplebank.NullString
	33,  // 19: simplebank.DumpCustomer.fName:type_name -> simplebank.NullString
	33,  // 20: simplebank.DumpCustomer.mName:type_name -> simplebank.NullString
	33,  // 21: simplebank.DumpCustomer.maidenFName:type_name -> simplebank.NullString
	33,  // 22: simplebank.DumpCustomer.maidenLName:type_name -> simplebank.NullString
	33,  // 23: simplebank.DumpCustomer.maidenMName:type_name -> simplebank.NullString
	33,  // 24: simplebank.DumpCustomer.sex:type_name -> simplebank.NullString
	35,  // 25: simplebank.DumpCustomer.birthDate:type_name -> simplebank.NullTime
	33,  // 26: simplebank.DumpCustomer.birthPlace:type_name -> simplebank.NullString
	34,  // 27: simplebank.DumpCustomer.civilStatus:type_name -> simplebank.NullInt64
	34,  // 28: simplebank.DumpCustomer.custType:type_name -> simplebank.NullInt64
	33,  // 29: simplebank.DumpCustomer.remarks:type_name -> simplebank.NullString
	34,  // 30: simplebank.DumpCustomer.status:type_name -> simplebank.NullInt64
	34,  // 31: simplebank.DumpCustomer.classification:type_name -> simplebank.NullInt64
	33,  // 32: simplebank.DumpCustomer.depoType:type_name -> simplebank.NullString
	34,  // 33: simplebank.DumpCustomer.subClassification:type_name -> simplebank.NullInt64
	36,  // 34: simplebank.DumpCustomer.pledgeAmount:type_name -> simplebank.Decimal
	36,  // 35: simplebank.DumpCustomer.mutualAmount:type_name -> simplebank.Decimal
	36,  // 36: simplebank.DumpCustomer.pangarapAmount:type_name -> simplebank.Decimal
	36,  // 37: simplebank.DumpCustomer.katuparanAmount:type_name -> simplebank.Decimal
	36,  // 38: simplebank.DumpCustomer.insuranceAmount:type_name -> simplebank.Decimal
	36,  // 39: simplebank.DumpCustomer.accPledge:type_name -> simplebank.Decimal
	36,  // 40: simplebank.DumpCustomer.accMutual:type_name -> simplebank.Decimal
	36,  // 41: simplebank.DumpCustomer.accPang:type_name -> simplebank.Decimal
	36,  // 42: simplebank.DumpCustomer.accKatuparan:type_name -> simplebank.Decimal
	36,  // 43: simplebank.DumpCustomer.accInsurance:type_name -> simplebank.Decimal
	36,  // 44: simplebank.DumpCustomer.loanLimit:type_name -> simplebank.Decimal
	36,  // 45: simplebank.DumpCustomer.creditLimit:type_name -> simplebank.Decimal
	35,  // 46: simplebank.DumpCustomer.dateRecognized:type_name -> simplebank.NullTime
	35,  // 47: simplebank.DumpCustomer.dateResigned:type_name -> simplebank.NullTime
	35,  // 48: simplebank.DumpCustomer.dateEntry:type_name -> simplebank.NullTime
	35,  // 49: simplebank.DumpCustomer.goldenLifeDate:type_name -> simplebank.NullTime
	33,  // 50: simplebank.DumpCustomer.restricted:type_name -> simplebank.NullString
	33,  // 51: simplebank.DumpCustomer.borrower:type_name -> simplebank.NullString
	33,  // 52: simplebank.DumpCustomer.coMaker:type_name -> simplebank.NullString
	33,  // 53: simplebank.DumpCustomer.guarantor:type_name -> simplebank.NullString
	34,  // 54: simplebank.DumpCustomer.dOSRI:type_name -> simplebank.NullInt64
	34,  // 55: simplebank.DumpCustomer.iDCode1:type_name -> simplebank.NullInt64
	33,  // 56: simplebank.DumpCustomer.iDNum1:type_name -> simplebank.NullString
	34,  // 57: simplebank.DumpCustomer.iDCode2:type_name -> simplebank.NullInt64
	33,  // 58: simplebank.DumpCustomer.iDNum2:type_name -> simplebank.NullString
	33,  // 59: simplebank.DumpCustomer.contact1:type_name -> simplebank.NullString
	33,  // 60: simplebank.DumpCustomer.contact2:type_name -> simplebank.NullString
	33,  // 61: simplebank.DumpCustomer.phone1:type_name -> simplebank.NullString
	33,  // 62: simplebank.DumpCustomer.reffered1:type_name -> simplebank.NullString
	33,  // 63: simplebank.DumpCustomer.reffered2:type_name -> simplebank.NullString
	33,  // 64: simplebank.DumpCustomer.reffered3:type_name -> simplebank.NullString
	34,  // 65: simplebank.DumpCustomer.education:type_name -> simplebank.NullInt64
	35,  // 66: simplebank.DumpCustomer.validity1:type_name -> simplebank.NullTime
	35,  // 67: simplebank.DumpCustomer.validity2:type_name -> simplebank.NullTime
	34,  // 68: simplebank.DumpCustomer.businessType:type_name -> simplebank.NullInt64
	33,  // 69: simplebank.DumpCustomer.accountNumber:type_name -> simplebank.NullString
	34,  // 70: simplebank.DumpCustomer.iIID:type_name -> simplebank.NullInt64
	34,  // 71: simplebank.DumpCustomer.religion:type_name -> simplebank.NullInt64
	33,  // 72: simplebank.DumpAddresses.addressDetails:type_name -> simplebank.NullString
	33,  // 73: simplebank.DumpAddresses.barangay:type_name -> simplebank.NullString
	33,  // 74: simplebank.DumpAddresses.city:type_name -> simplebank.NullString
	33,  // 75: simplebank.DumpAddresses.province:type_name -> simplebank.NullString
	33,  // 76: simplebank.DumpAddresses.phone1:type_name -> simplebank.NullString
	33,  // 77: simplebank.DumpAddresses.phone2:type_name -> simplebank.NullString
	33,  // 78: simplebank.DumpAddresses.phone3:type_name -> simplebank.NullString
	33,  // 79: simplebank.DumpAddresses.phone4:type_name -> simplebank.NullString
	34,  // 80: simplebank.DumpLnMaster.acctType:type_name -> simplebank.NullInt64
	35,  // 81: simplebank.DumpLnMaster.disbDate:type_name -> simplebank.NullTime
	36,  // 82: simplebank.DumpLnMaster.principal:type_name -> simplebank.Decimal
	36,  // 83: simplebank.DumpLnMaster.interest:type_name -> simplebank.Decimal
	36,  // 84: simplebank.DumpLnMaster.netProceed:type_name -> simplebank.Decimal
	34,  // 85: simplebank.DumpLnMaster.gives:type_name -> simplebank.NullInt64
	34,  // 86: simplebank.DumpLnMaster.frequency:type_name -> simplebank.NullInt64
	34,  // 87: simplebank.DumpLnMaster.annumDiv:type_name -> simplebank.NullInt64
	36,  // 88: simplebank.DumpLnMaster.prin:type_name -> simplebank.Decimal
	36,  // 89: simplebank.DumpLnMaster.intR:type_name -> simplebank.Decimal
	36,  // 90: simplebank.DumpLnMaster.waivedInt:type_name -> simplebank.Decimal
	34,  // 91: simplebank.DumpLnMaster.weeksPaid:type_name -> simplebank.NullInt64
	35,  // 92: simplebank.DumpLnMaster.doMaturity:type_name -> simplebank.NullTime
	36,  // 93: simplebank.DumpLnMaster.conIntRate:type_name -> simplebank.Decimal
	33,  // 94: simplebank.DumpLnMaster.status:type_name -> simplebank.NullString
	34,  // 95: simplebank.DumpLnMaster.cycle:type_name -> simplebank.NullInt64
	34,  // 96: simplebank.DumpLnMaster.lNGrpCode:type_name -> simplebank.NullInt64
	34,  // 97: simplebank.DumpLnMaster.proff:type_name -> simplebank.NullInt64
	33,  // 98: simplebank.DumpLnMaster.fundSource:type_name -> simplebank.NullString
	37,  // 99: simplebank.DumpLnMaster.dOSRI:type_name -> simplebank.NullBool
	34,  // 100: simplebank.DumpLnMaster.lnCategory:type_name -> simplebank.NullInt64
	35,  // 101: simplebank.DumpLnMaster.openDate:type_name -> simplebank.NullTime
	35,  // 102: simplebank.DumpLnMaster.lastTrnDate:type_name -> simplebank.NullTime
	33,  // 103: simplebank.DumpLnMaster.disbBy:type_name -> simplebank.NullString
	36,  // 104: simplebank.DumpSaMaster.balance:type_name -> simplebank.Decimal
	35,  // 105: simplebank.DumpSaMaster.doLastTrn:type_name -> simplebank.NullTime
	35,  // 106: simplebank.DumpSaMaster.doStatus:type_name -> simplebank.NullTime
	35,  // 107: simplebank.DumpSaMaster.dopen:type_name -> simplebank.NullTime
	35,  // 108: simplebank.DumpSaMaster.doMaturity:type_name -> simplebank.NullTime
	33,  // 109: simplebank.DumpSaMaster.status:type_name -> simplebank.NullString
	32,  // 110: simplebank.DumpTrnMaster.trnDate:type_name -> google.protobuf.Timestamp
	34,  // 111: simplebank.DumpTrnMaster.trnType:type_name -> simplebank.NullInt64
	34,  // 112: simplebank.DumpTrnMaster.orNo:type_name -> simplebank.NullInt64
	36,  // 113: simplebank.DumpTrnMaster.prin:type_name -> simplebank.Decimal
	36,  // 114: simplebank.DumpTrnMaster.intR:type_name -> simplebank.Decimal
	36,  // 115: simplebank.DumpTrnMaster.waivedInt:type_name -> simplebank.Decimal
	33,  // 116: simplebank.DumpTrnMaster.refNo:type_name -> simplebank.NullString
	33,  // 117: simplebank.DumpTrnMaster.userName:type_name -> simplebank.NullString
	33,  // 118: simplebank.DumpTrnMaster.particular:type_name -> simplebank.NullString
	32,  // 119: simplebank.DumpSaTrnMaster.trnDate:type_name -> google.protobuf.Timestamp
	34,  // 120: simplebank.DumpSaTrnMaster.trnType:type_name -> simplebank.NullInt64
	34,  // 121: simplebank.DumpSaTrnMaster.orNo:type_name -> simplebank.NullInt64
	36,  // 122: simplebank.DumpSaTrnMaster.trnAmt:type_name -> simplebank.Decimal
	33,  // 123: simplebank.DumpSaTrnMaster.refNo:type_name -> simplebank.NullString
	32,  // 124: simplebank.DumpLoanInst.dueDate:type_name -> google.protobuf.Timestamp
	36,  // 125: simplebank.DumpLoanInst.duePrin:type_name -> simplebank.Decimal
	36,  // 126: simplebank.DumpLoanInst.dueInt:type_name -> simplebank.Decimal
	36,  // 127: simplebank.DumpLoanInst.upInt:type_name -> simplebank.Decimal
	33,  // 128: simplebank.DumpLnChrgData.refAcc:type_name -> simplebank.NullString
	36,  // 129: simplebank.DumpLnChrgData.chrAmnt:type_name -> simplebank.Decimal
	33,  // 130: simplebank.DumpCustAddInfoGroup.groupTitle:type_name -> simplebank.NullString
	33,  // 131: simplebank.DumpCustAddInfoGroup.remarks:type_name -> simplebank.NullString
	37,  // 132: simplebank.DumpCustAddInfoGroup.reqOnEntry:type_name -> simplebank.NullBool
	37,  // 133: simplebank.DumpCustAddInfoGroup.reqOnExit:type_name -> simplebank.NullBool
	34,  // 134: simplebank.DumpCustAddInfoGroup.link2Loan:type_name -> simplebank.NullInt64
	34,  // 135: simplebank.DumpCustAddInfoGroup.link2Save:type_name -> simplebank.NullInt64
	33,  // 136: simplebank.DumpCustAddInfoGroupNeed.infoProcess:type_name -> simplebank.NullString
	32,  // 137: simplebank.DumpCustAddInfo.infoDate:type_name -> google.protobuf.Timestamp
	34,  // 138: simplebank.DumpMutualFund.orNo:type_name -> simplebank.NullInt64
	32,  // 139: simplebank.DumpMutualFund.trnDate:type_name -> google.protobuf.Timestamp
	33,  // 140: simplebank.DumpMutualFund.trnType:type_name -> simplebank.NullString
	36,  // 141: simplebank.DumpMutualFund.trnAmt:type_name -> simplebank.Decimal
	33,  // 142: simplebank.DumpMutualFund.userName:type_name -> simplebank.NullString
	33,  // 143: simplebank.DumpReferencesDetails.purposeDescription:type_name -> simplebank.NullString
	34,  // 144: simplebank.DumpReferencesDetails.parentID:type_name -> simplebank.NullInt64
	34,  // 145: simplebank.DumpReferencesDetails.codeID:type_name -> simplebank.NullInt64
	34,  // 146: simplebank.DumpReferencesDetails.stat:type_name -> simplebank.NullInt64
	33,  // 147: simplebank.DumpCenterWorker.lname:type_name -> simplebank.NullString
	33,  // 148: simplebank.DumpCenterWorker.fName:type_name -> simplebank.NullString
	33,  // 149: simplebank.DumpCenterWorker.mname:type_name -> simplebank.NullString
	33,  // 150: simplebank.DumpCenterWorker.phoneNumber:type_name -> simplebank.NullString
	32,  // 151: simplebank.DumpWriteoff.disbDate:type_name -> google.protobuf.Timestamp
	36,  // 152: simplebank.DumpWriteoff.principal:type_name -> simplebank.Decimal
	36,  // 153: simplebank.DumpWriteoff.interest:type_name -> simplebank.Decimal
	36,  // 154: simplebank.DumpWriteoff.balPrin:type_name -> simplebank.Decimal
	36,  // 155: simplebank.DumpWriteoff.balInt:type_name -> simplebank.Decimal
	32,  // 156: simplebank.DumpWriteoff.trnDate:type_name -> google.protobuf.Timestamp
	33,  // 157: simplebank.DumpWriteoff.print:type_name -> simplebank.NullString
	33,  // 158: simplebank.DumpWriteoff.postedBy:type_name -> simplebank.NullString
	33,  // 159: simplebank.DumpWriteoff.verifiedBy:type_name -> simplebank.NullString
	33,  // 160: simplebank.DumpAccounts.mainCD:type_name -> simplebank.NullString
	33,  // 161: simplebank.DumpAccounts.parent:type_name -> simplebank.NullString
	32,  // 162: simplebank.DumpJnlHeaders.trnDate:type_name -> google.protobuf.Timestamp
	33,  // 163: simplebank.DumpJnlHeaders.userName:type_name -> simplebank.NullString
	34,  // 164: simplebank.DumpJnlDetails.series:type_name -> simplebank.NullInt64
	36,  // 165: simplebank.DumpJnlDetails.debit:type_name -> simplebank.Decimal
	36,  // 166: simplebank.DumpJnlDetails.credit:type_name -> simplebank.Decimal
	32,  // 167: simplebank.DumpLedgerDetails.trnDate:type_name -> google.protobuf.Timestamp
	36,  // 168: simplebank.DumpLedgerDetails.balance:type_name -> simplebank.Decimal
	34,  // 169: simplebank.DumpUsersList.accessCode:type_name -> simplebank.NullInt64
	35,  // 170: simplebank.DumpUsersList.dateHired:type_name -> simplebank.NullTime
	35,  // 171: simplebank.DumpUsersList.birthDay:type_name -> simplebank.NullTime
	35,  // 172: simplebank.DumpUsersList.dateGiven:type_name -> simplebank.NullTime
	35,  // 173: simplebank.DumpUsersList.dateExpired:type_name -> simplebank.NullTime
	33,  // 174: simplebank.DumpUsersList.address:type_name -> simplebank.NullString
	33,  // 175: simplebank.DumpUsersList.position:type_name -> simplebank.NullString
	34,  // 176: simplebank.DumpUsersList.areaCode:type_name -> simplebank.NullInt64
	34,  // 177: simplebank.DumpUsersList.manCode:type_name -> simplebank.NullInt64
	33,  // 178: simplebank.DumpUsersList.addInfo:type_name -> simplebank.NullString
	34,  // 179: simplebank.DumpUsersList.attempt:type_name -> simplebank.NullInt64
	35,  // 180: simplebank.DumpUsersList.dateLocked:type_name -> simplebank.NullTime
	33,  // 181: simplebank.DumpUsersList.remarks:type_name -> simplebank.NullString
	35,  // 182: simplebank.DumpUsersList.accountExpirationDt:type_name -> simplebank.NullTime
	32,  // 183: simplebank.DumpMultiplePaymentReceipt.trnDate:type_name -> google.protobuf.Timestamp
	36,  // 184: simplebank.DumpMultiplePaymentReceipt.amtPaid:type_name -> simplebank.Decimal
	32,  // 185: simplebank.DumpInActiveCID.dateStart:type_name -> google.protobuf.Timestamp
	35,  // 186: simplebank.DumpInActiveCID.dateEnd:type_name -> simplebank.NullTime
	33,  // 187: simplebank.DumpInActiveCID.deactivatedBy:type_name -> simplebank.NullString
	32,  // 188: simplebank.DumpLnBeneficiary.bDay:type_name -> google.protobuf.Timestamp
	33,  // 189: simplebank.DumpLnBeneficiary.lastName:type_name -> simplebank.NullString
	33,  // 190: simplebank.DumpLnBeneficiary.firstName:type_name -> simplebank.NullString
	33,  // 191: simplebank.DumpLnBeneficiary.middleName:type_name -> simplebank.NullString
	33,  // 192: simplebank.DumpLnBeneficiary.remarks:type_name -> simplebank.NullString
	33,  // 193: simplebank.DumpReactivateWriteoff.deactivateBy:type_name -> simplebank.NullString
	33,  // 194: simplebank.DumpReactivateWriteoff.reactivateBy:type_name -> simplebank.NullString
	32,  // 195: simplebank.DumpReactivateWriteoff.statusDate:type_name -> google.protobuf.Timestamp
	32,  // 196: simplebank.DumpColSht.disbDate:type_name -> google.protobuf.Timestamp
	32,  // 197: simplebank.DumpColSht.dateStart:type_name -> google.protobuf.Timestamp
	32,  // 198: simplebank.DumpColSht.maturity:type_name -> google.protobuf.Timestamp
	36,  // 199: simplebank.DumpColSht.principal:type_name -> simplebank.Decimal
	36,  // 200: simplebank.DumpColSht.interest:type_name -> simplebank.Decimal
	36,  // 201: simplebank.DumpColSht.balPrin:type_name -> simplebank.Decimal
	36,  // 202: simplebank.DumpColSht.balInt:type_name -> simplebank.Decimal
	36,  // 203: simplebank.DumpColSht.amort:type_name -> simplebank.Decimal
	36,  // 204: simplebank.DumpColSht.duePrin:type_name -> simplebank.Decimal
	36,  // 205: simplebank.DumpColSht.dueInt:type_name -> simplebank.Decimal
	36,  // 206: simplebank.DumpColSht.loanBal:type_name -> simplebank.Decimal
	36,  // 207: simplebank.DumpColSht.saveBal:type_name -> simplebank.Decimal
	36,  // 208: simplebank.DumpColSht.waivedInt:type_name -> simplebank.Decimal
	32,  // 209: simplebank.DumpColSht.meetingDate:type_name -> google.protobuf.Timestamp
	36,  // 210: simplebank.DumpColSht.sharesOfStock:type_name -> simplebank.Decimal
	32,  // 211: simplebank.DumpColSht.dateEstablished:type_name -> google.protobuf.Timestamp
	212, // [212:212] is the sub-list for method output_type
	212, // [212:212] is the sub-list for method input_type
	212, // [212:212] is the sub-list for extension type_name
	212, // [212:212] is the sub-list for extension extendee
	0,   // [0:212] is the sub-list for field type_name
}

func init() { file_esystemdump_message_proto_init() }
func file_esystemdump_message_proto_init() {
	if File_esystemdump_message_proto != nil {
		return
	}
	file_type_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_esystemdump_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpBranchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpModifiedTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpCenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpCustomer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpLnMaster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpSaMaster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpTrnMaster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpSaTrnMaster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpLoanInst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpLnChrgData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpCustAddInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpCustAddInfoGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpCustAddInfoGroupNeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpCustAddInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpMutualFund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpReferencesDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpCenterWorker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpWriteoff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpJnlHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpJnlDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpLedgerDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpUsersList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpMultiplePaymentReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpInActiveCID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpLnBeneficiary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpReactivateWriteoff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_esystemdump_message_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpColSht); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_esystemdump_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_esystemdump_message_proto_goTypes,
		DependencyIndexes: file_esystemdump_message_proto_depIdxs,
		MessageInfos:      file_esystemdump_message_proto_msgTypes,
	}.Build()
	File_esystemdump_message_proto = out.File
	file_esystemdump_message_proto_rawDesc = nil
	file_esystemdump_message_proto_goTypes = nil
	file_esystemdump_message_proto_depIdxs = nil
}
