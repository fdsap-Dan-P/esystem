// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: customer_message.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  int64                  `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid                string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Iiid                int64                  `protobuf:"varint,3,opt,name=iiid,proto3" json:"iiid,omitempty"`
	CentralOfficeId     int64                  `protobuf:"varint,4,opt,name=centralOfficeId,proto3" json:"centralOfficeId,omitempty"`
	Cid                 int64                  `protobuf:"varint,5,opt,name=cid,proto3" json:"cid,omitempty"`
	CustomerAltId       string                 `protobuf:"bytes,6,opt,name=customerAltId,proto3" json:"customerAltId,omitempty"`
	DebitLimit          float64                `protobuf:"fixed64,7,opt,name=debitLimit,proto3" json:"debitLimit,omitempty"`
	CreditLimit         float64                `protobuf:"fixed64,8,opt,name=creditLimit,proto3" json:"creditLimit,omitempty"`
	DateEntry           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=dateEntry,proto3" json:"dateEntry,omitempty"`
	LastActivityDate    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=lastActivityDate,proto3" json:"lastActivityDate,omitempty"`
	Dosri               bool                   `protobuf:"varint,11,opt,name=dosri,proto3" json:"dosri,omitempty"`
	ClassificationId    int64                  `protobuf:"varint,12,opt,name=classificationId,proto3" json:"classificationId,omitempty"`
	Classification      string                 `protobuf:"bytes,13,opt,name=classification,proto3" json:"classification,omitempty"`
	SubClassificationId int64                  `protobuf:"varint,14,opt,name=subClassificationId,proto3" json:"subClassificationId,omitempty"`
	SubClassification   string                 `protobuf:"bytes,15,opt,name=subClassification,proto3" json:"subClassification,omitempty"`
	CenterId            int64                  `protobuf:"varint,16,opt,name=centerId,proto3" json:"centerId,omitempty"`
	CenterCode          int64                  `protobuf:"varint,17,opt,name=centerCode,proto3" json:"centerCode,omitempty"`
	CenterShortName     string                 `protobuf:"bytes,18,opt,name=centerShortName,proto3" json:"centerShortName,omitempty"`
	CenterName          string                 `protobuf:"bytes,19,opt,name=centerName,proto3" json:"centerName,omitempty"`
	OfficeId            int64                  `protobuf:"varint,20,opt,name=officeId,proto3" json:"officeId,omitempty"`
	OfficeName          string                 `protobuf:"bytes,21,opt,name=officeName,proto3" json:"officeName,omitempty"`
	RestrictionId       int64                  `protobuf:"varint,22,opt,name=restrictionId,proto3" json:"restrictionId,omitempty"`
	RestrictionCode     int64                  `protobuf:"varint,23,opt,name=restrictionCode,proto3" json:"restrictionCode,omitempty"`
	Restriction         string                 `protobuf:"bytes,24,opt,name=restriction,proto3" json:"restriction,omitempty"`
	RiskClassId         int64                  `protobuf:"varint,25,opt,name=riskClassId,proto3" json:"riskClassId,omitempty"`
	RiskClassCode       int64                  `protobuf:"varint,26,opt,name=riskClassCode,proto3" json:"riskClassCode,omitempty"`
	RiskClass           string                 `protobuf:"bytes,27,opt,name=riskClass,proto3" json:"riskClass,omitempty"`
	IndustryId          int64                  `protobuf:"varint,28,opt,name=industryId,proto3" json:"industryId,omitempty"`
	IndustryCode        int64                  `protobuf:"varint,29,opt,name=industryCode,proto3" json:"industryCode,omitempty"`
	Industry            string                 `protobuf:"bytes,30,opt,name=industry,proto3" json:"industry,omitempty"`
	StatusCode          int64                  `protobuf:"varint,31,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Status              int64                  `protobuf:"varint,32,opt,name=status,proto3" json:"status,omitempty"`
	OtherInfo           *NullString            `protobuf:"bytes,33,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_customer_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_customer_message_proto_rawDescGZIP(), []int{0}
}

func (x *Customer) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Customer) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Customer) GetIiid() int64 {
	if x != nil {
		return x.Iiid
	}
	return 0
}

func (x *Customer) GetCentralOfficeId() int64 {
	if x != nil {
		return x.CentralOfficeId
	}
	return 0
}

func (x *Customer) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *Customer) GetCustomerAltId() string {
	if x != nil {
		return x.CustomerAltId
	}
	return ""
}

func (x *Customer) GetDebitLimit() float64 {
	if x != nil {
		return x.DebitLimit
	}
	return 0
}

func (x *Customer) GetCreditLimit() float64 {
	if x != nil {
		return x.CreditLimit
	}
	return 0
}

func (x *Customer) GetDateEntry() *timestamppb.Timestamp {
	if x != nil {
		return x.DateEntry
	}
	return nil
}

func (x *Customer) GetLastActivityDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivityDate
	}
	return nil
}

func (x *Customer) GetDosri() bool {
	if x != nil {
		return x.Dosri
	}
	return false
}

func (x *Customer) GetClassificationId() int64 {
	if x != nil {
		return x.ClassificationId
	}
	return 0
}

func (x *Customer) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *Customer) GetSubClassificationId() int64 {
	if x != nil {
		return x.SubClassificationId
	}
	return 0
}

func (x *Customer) GetSubClassification() string {
	if x != nil {
		return x.SubClassification
	}
	return ""
}

func (x *Customer) GetCenterId() int64 {
	if x != nil {
		return x.CenterId
	}
	return 0
}

func (x *Customer) GetCenterCode() int64 {
	if x != nil {
		return x.CenterCode
	}
	return 0
}

func (x *Customer) GetCenterShortName() string {
	if x != nil {
		return x.CenterShortName
	}
	return ""
}

func (x *Customer) GetCenterName() string {
	if x != nil {
		return x.CenterName
	}
	return ""
}

func (x *Customer) GetOfficeId() int64 {
	if x != nil {
		return x.OfficeId
	}
	return 0
}

func (x *Customer) GetOfficeName() string {
	if x != nil {
		return x.OfficeName
	}
	return ""
}

func (x *Customer) GetRestrictionId() int64 {
	if x != nil {
		return x.RestrictionId
	}
	return 0
}

func (x *Customer) GetRestrictionCode() int64 {
	if x != nil {
		return x.RestrictionCode
	}
	return 0
}

func (x *Customer) GetRestriction() string {
	if x != nil {
		return x.Restriction
	}
	return ""
}

func (x *Customer) GetRiskClassId() int64 {
	if x != nil {
		return x.RiskClassId
	}
	return 0
}

func (x *Customer) GetRiskClassCode() int64 {
	if x != nil {
		return x.RiskClassCode
	}
	return 0
}

func (x *Customer) GetRiskClass() string {
	if x != nil {
		return x.RiskClass
	}
	return ""
}

func (x *Customer) GetIndustryId() int64 {
	if x != nil {
		return x.IndustryId
	}
	return 0
}

func (x *Customer) GetIndustryCode() int64 {
	if x != nil {
		return x.IndustryCode
	}
	return 0
}

func (x *Customer) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *Customer) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Customer) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Customer) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type CustomerBeneficiary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CustomerId     int64       `protobuf:"varint,2,opt,name=customerId,proto3" json:"customerId,omitempty"`
	Series         int32       `protobuf:"varint,3,opt,name=series,proto3" json:"series,omitempty"`
	Iiid           int64       `protobuf:"varint,4,opt,name=iiid,proto3" json:"iiid,omitempty"`
	TypeId         int64       `protobuf:"varint,5,opt,name=typeId,proto3" json:"typeId,omitempty"`
	RelationTypeId int64       `protobuf:"varint,6,opt,name=relationTypeId,proto3" json:"relationTypeId,omitempty"`
	OtherInfo      *NullString `protobuf:"bytes,7,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *CustomerBeneficiary) Reset() {
	*x = CustomerBeneficiary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerBeneficiary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerBeneficiary) ProtoMessage() {}

func (x *CustomerBeneficiary) ProtoReflect() protoreflect.Message {
	mi := &file_customer_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerBeneficiary.ProtoReflect.Descriptor instead.
func (*CustomerBeneficiary) Descriptor() ([]byte, []int) {
	return file_customer_message_proto_rawDescGZIP(), []int{1}
}

func (x *CustomerBeneficiary) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CustomerBeneficiary) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *CustomerBeneficiary) GetSeries() int32 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *CustomerBeneficiary) GetIiid() int64 {
	if x != nil {
		return x.Iiid
	}
	return 0
}

func (x *CustomerBeneficiary) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CustomerBeneficiary) GetRelationTypeId() int64 {
	if x != nil {
		return x.RelationTypeId
	}
	return 0
}

func (x *CustomerBeneficiary) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type CustomerGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid           string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CentralId      int64                  `protobuf:"varint,3,opt,name=centralId,proto3" json:"centralId,omitempty"`
	Code           string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	TypeId         int64                  `protobuf:"varint,5,opt,name=typeId,proto3" json:"typeId,omitempty"`
	GroupName      string                 `protobuf:"bytes,6,opt,name=groupName,proto3" json:"groupName,omitempty"`
	ShortName      string                 `protobuf:"bytes,7,opt,name=shortName,proto3" json:"shortName,omitempty"`
	DateStablished *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=dateStablished,proto3" json:"dateStablished,omitempty"`
	MeetingDay     int32                  `protobuf:"varint,9,opt,name=meetingDay,proto3" json:"meetingDay,omitempty"`
	OfficeId       int64                  `protobuf:"varint,10,opt,name=officeId,proto3" json:"officeId,omitempty"`
	OfficerId      int64                  `protobuf:"varint,11,opt,name=officerId,proto3" json:"officerId,omitempty"`
	ParentId       int64                  `protobuf:"varint,12,opt,name=parentId,proto3" json:"parentId,omitempty"`
	AlternateId    string                 `protobuf:"bytes,13,opt,name=alternateId,proto3" json:"alternateId,omitempty"`
	AddressDetail  string                 `protobuf:"bytes,14,opt,name=addressDetail,proto3" json:"addressDetail,omitempty"`
	AddressUrl     string                 `protobuf:"bytes,15,opt,name=addressUrl,proto3" json:"addressUrl,omitempty"`
	GeographyId    int64                  `protobuf:"varint,16,opt,name=geographyId,proto3" json:"geographyId,omitempty"`
	OtherInfo      *NullString            `protobuf:"bytes,17,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *CustomerGroup) Reset() {
	*x = CustomerGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_customer_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerGroup) ProtoMessage() {}

func (x *CustomerGroup) ProtoReflect() protoreflect.Message {
	mi := &file_customer_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerGroup.ProtoReflect.Descriptor instead.
func (*CustomerGroup) Descriptor() ([]byte, []int) {
	return file_customer_message_proto_rawDescGZIP(), []int{2}
}

func (x *CustomerGroup) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomerGroup) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CustomerGroup) GetCentralId() int64 {
	if x != nil {
		return x.CentralId
	}
	return 0
}

func (x *CustomerGroup) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CustomerGroup) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CustomerGroup) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CustomerGroup) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *CustomerGroup) GetDateStablished() *timestamppb.Timestamp {
	if x != nil {
		return x.DateStablished
	}
	return nil
}

func (x *CustomerGroup) GetMeetingDay() int32 {
	if x != nil {
		return x.MeetingDay
	}
	return 0
}

func (x *CustomerGroup) GetOfficeId() int64 {
	if x != nil {
		return x.OfficeId
	}
	return 0
}

func (x *CustomerGroup) GetOfficerId() int64 {
	if x != nil {
		return x.OfficerId
	}
	return 0
}

func (x *CustomerGroup) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *CustomerGroup) GetAlternateId() string {
	if x != nil {
		return x.AlternateId
	}
	return ""
}

func (x *CustomerGroup) GetAddressDetail() string {
	if x != nil {
		return x.AddressDetail
	}
	return ""
}

func (x *CustomerGroup) GetAddressUrl() string {
	if x != nil {
		return x.AddressUrl
	}
	return ""
}

func (x *CustomerGroup) GetGeographyId() int64 {
	if x != nil {
		return x.GeographyId
	}
	return 0
}

func (x *CustomerGroup) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

var File_customer_message_proto protoreflect.FileDescriptor

var file_customer_message_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x09, 0x0a, 0x08, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x69,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x69, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x6c, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x73, 0x72, 0x69, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x6f, 0x73, 0x72, 0x69, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x13, 0x73, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x75, 0x62,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x62,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x69, 0x73,
	0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69,
	0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x69, 0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x69,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x69, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb3, 0x04, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55,
	0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x49,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x20, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x2e, 0x66, 0x64, 0x73, 0x61, 0x70, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x70, 0x62, 0x50, 0x01, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_customer_message_proto_rawDescOnce sync.Once
	file_customer_message_proto_rawDescData = file_customer_message_proto_rawDesc
)

func file_customer_message_proto_rawDescGZIP() []byte {
	file_customer_message_proto_rawDescOnce.Do(func() {
		file_customer_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_customer_message_proto_rawDescData)
	})
	return file_customer_message_proto_rawDescData
}

var file_customer_message_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_customer_message_proto_goTypes = []interface{}{
	(*Customer)(nil),              // 0: simplebank.Customer
	(*CustomerBeneficiary)(nil),   // 1: simplebank.CustomerBeneficiary
	(*CustomerGroup)(nil),         // 2: simplebank.CustomerGroup
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*NullString)(nil),            // 4: simplebank.NullString
}
var file_customer_message_proto_depIdxs = []int32{
	3, // 0: simplebank.Customer.dateEntry:type_name -> google.protobuf.Timestamp
	3, // 1: simplebank.Customer.lastActivityDate:type_name -> google.protobuf.Timestamp
	4, // 2: simplebank.Customer.otherInfo:type_name -> simplebank.NullString
	4, // 3: simplebank.CustomerBeneficiary.otherInfo:type_name -> simplebank.NullString
	3, // 4: simplebank.CustomerGroup.dateStablished:type_name -> google.protobuf.Timestamp
	4, // 5: simplebank.CustomerGroup.otherInfo:type_name -> simplebank.NullString
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_customer_message_proto_init() }
func file_customer_message_proto_init() {
	if File_customer_message_proto != nil {
		return
	}
	file_type_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_customer_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerBeneficiary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_customer_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_customer_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_customer_message_proto_goTypes,
		DependencyIndexes: file_customer_message_proto_depIdxs,
		MessageInfos:      file_customer_message_proto_msgTypes,
	}.Build()
	File_customer_message_proto = out.File
	file_customer_message_proto_rawDesc = nil
	file_customer_message_proto_goTypes = nil
	file_customer_message_proto_depIdxs = nil
}
