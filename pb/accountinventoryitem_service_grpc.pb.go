// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryItemServiceClient is the client API for InventoryItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryItemServiceClient interface {
	CreateInventoryItem(ctx context.Context, in *InventoryItemRequest, opts ...grpc.CallOption) (InventoryItemService_CreateInventoryItemClient, error)
	UpdateInventoryItem(ctx context.Context, in *InventoryItemRequest, opts ...grpc.CallOption) (InventoryItemService_UpdateInventoryItemClient, error)
	GetInventoryItem(ctx context.Context, in *GetInventoryItemRequest, opts ...grpc.CallOption) (InventoryItemService_GetInventoryItemClient, error)
	GetInventoryItembyUuid(ctx context.Context, in *GetInventoryItemRequestbyUuid, opts ...grpc.CallOption) (InventoryItemService_GetInventoryItembyUuidClient, error)
	GetListInventoryItembyGeneric(ctx context.Context, in *GetListInventoryItemRequestbyGeneric, opts ...grpc.CallOption) (InventoryItemService_GetListInventoryItembyGenericClient, error)
	GetListInventoryItembyBrand(ctx context.Context, in *GetListInventoryItemRequestbyBrand, opts ...grpc.CallOption) (InventoryItemService_GetListInventoryItembyBrandClient, error)
	SearchInventoryItem(ctx context.Context, in *SearchInventoryItemRequest, opts ...grpc.CallOption) (InventoryItemService_SearchInventoryItemClient, error)
}

type inventoryItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryItemServiceClient(cc grpc.ClientConnInterface) InventoryItemServiceClient {
	return &inventoryItemServiceClient{cc}
}

func (c *inventoryItemServiceClient) CreateInventoryItem(ctx context.Context, in *InventoryItemRequest, opts ...grpc.CallOption) (InventoryItemService_CreateInventoryItemClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryItemService_ServiceDesc.Streams[0], "/simplebank.InventoryItemService/CreateInventoryItem", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryItemServiceCreateInventoryItemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryItemService_CreateInventoryItemClient interface {
	Recv() (*InventoryItemResponse, error)
	grpc.ClientStream
}

type inventoryItemServiceCreateInventoryItemClient struct {
	grpc.ClientStream
}

func (x *inventoryItemServiceCreateInventoryItemClient) Recv() (*InventoryItemResponse, error) {
	m := new(InventoryItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryItemServiceClient) UpdateInventoryItem(ctx context.Context, in *InventoryItemRequest, opts ...grpc.CallOption) (InventoryItemService_UpdateInventoryItemClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryItemService_ServiceDesc.Streams[1], "/simplebank.InventoryItemService/UpdateInventoryItem", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryItemServiceUpdateInventoryItemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryItemService_UpdateInventoryItemClient interface {
	Recv() (*InventoryItemResponse, error)
	grpc.ClientStream
}

type inventoryItemServiceUpdateInventoryItemClient struct {
	grpc.ClientStream
}

func (x *inventoryItemServiceUpdateInventoryItemClient) Recv() (*InventoryItemResponse, error) {
	m := new(InventoryItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryItemServiceClient) GetInventoryItem(ctx context.Context, in *GetInventoryItemRequest, opts ...grpc.CallOption) (InventoryItemService_GetInventoryItemClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryItemService_ServiceDesc.Streams[2], "/simplebank.InventoryItemService/GetInventoryItem", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryItemServiceGetInventoryItemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryItemService_GetInventoryItemClient interface {
	Recv() (*InventoryItemResponse, error)
	grpc.ClientStream
}

type inventoryItemServiceGetInventoryItemClient struct {
	grpc.ClientStream
}

func (x *inventoryItemServiceGetInventoryItemClient) Recv() (*InventoryItemResponse, error) {
	m := new(InventoryItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryItemServiceClient) GetInventoryItembyUuid(ctx context.Context, in *GetInventoryItemRequestbyUuid, opts ...grpc.CallOption) (InventoryItemService_GetInventoryItembyUuidClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryItemService_ServiceDesc.Streams[3], "/simplebank.InventoryItemService/GetInventoryItembyUuid", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryItemServiceGetInventoryItembyUuidClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryItemService_GetInventoryItembyUuidClient interface {
	Recv() (*InventoryItemResponse, error)
	grpc.ClientStream
}

type inventoryItemServiceGetInventoryItembyUuidClient struct {
	grpc.ClientStream
}

func (x *inventoryItemServiceGetInventoryItembyUuidClient) Recv() (*InventoryItemResponse, error) {
	m := new(InventoryItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryItemServiceClient) GetListInventoryItembyGeneric(ctx context.Context, in *GetListInventoryItemRequestbyGeneric, opts ...grpc.CallOption) (InventoryItemService_GetListInventoryItembyGenericClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryItemService_ServiceDesc.Streams[4], "/simplebank.InventoryItemService/GetListInventoryItembyGeneric", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryItemServiceGetListInventoryItembyGenericClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryItemService_GetListInventoryItembyGenericClient interface {
	Recv() (*GetListInventoryItemResponse, error)
	grpc.ClientStream
}

type inventoryItemServiceGetListInventoryItembyGenericClient struct {
	grpc.ClientStream
}

func (x *inventoryItemServiceGetListInventoryItembyGenericClient) Recv() (*GetListInventoryItemResponse, error) {
	m := new(GetListInventoryItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryItemServiceClient) GetListInventoryItembyBrand(ctx context.Context, in *GetListInventoryItemRequestbyBrand, opts ...grpc.CallOption) (InventoryItemService_GetListInventoryItembyBrandClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryItemService_ServiceDesc.Streams[5], "/simplebank.InventoryItemService/GetListInventoryItembyBrand", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryItemServiceGetListInventoryItembyBrandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryItemService_GetListInventoryItembyBrandClient interface {
	Recv() (*GetListInventoryItemResponse, error)
	grpc.ClientStream
}

type inventoryItemServiceGetListInventoryItembyBrandClient struct {
	grpc.ClientStream
}

func (x *inventoryItemServiceGetListInventoryItembyBrandClient) Recv() (*GetListInventoryItemResponse, error) {
	m := new(GetListInventoryItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryItemServiceClient) SearchInventoryItem(ctx context.Context, in *SearchInventoryItemRequest, opts ...grpc.CallOption) (InventoryItemService_SearchInventoryItemClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryItemService_ServiceDesc.Streams[6], "/simplebank.InventoryItemService/SearchInventoryItem", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryItemServiceSearchInventoryItemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryItemService_SearchInventoryItemClient interface {
	Recv() (*GetListInventoryItemResponse, error)
	grpc.ClientStream
}

type inventoryItemServiceSearchInventoryItemClient struct {
	grpc.ClientStream
}

func (x *inventoryItemServiceSearchInventoryItemClient) Recv() (*GetListInventoryItemResponse, error) {
	m := new(GetListInventoryItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InventoryItemServiceServer is the server API for InventoryItemService service.
// All implementations must embed UnimplementedInventoryItemServiceServer
// for forward compatibility
type InventoryItemServiceServer interface {
	CreateInventoryItem(*InventoryItemRequest, InventoryItemService_CreateInventoryItemServer) error
	UpdateInventoryItem(*InventoryItemRequest, InventoryItemService_UpdateInventoryItemServer) error
	GetInventoryItem(*GetInventoryItemRequest, InventoryItemService_GetInventoryItemServer) error
	GetInventoryItembyUuid(*GetInventoryItemRequestbyUuid, InventoryItemService_GetInventoryItembyUuidServer) error
	GetListInventoryItembyGeneric(*GetListInventoryItemRequestbyGeneric, InventoryItemService_GetListInventoryItembyGenericServer) error
	GetListInventoryItembyBrand(*GetListInventoryItemRequestbyBrand, InventoryItemService_GetListInventoryItembyBrandServer) error
	SearchInventoryItem(*SearchInventoryItemRequest, InventoryItemService_SearchInventoryItemServer) error
	mustEmbedUnimplementedInventoryItemServiceServer()
}

// UnimplementedInventoryItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInventoryItemServiceServer struct {
}

func (UnimplementedInventoryItemServiceServer) CreateInventoryItem(*InventoryItemRequest, InventoryItemService_CreateInventoryItemServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateInventoryItem not implemented")
}
func (UnimplementedInventoryItemServiceServer) UpdateInventoryItem(*InventoryItemRequest, InventoryItemService_UpdateInventoryItemServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateInventoryItem not implemented")
}
func (UnimplementedInventoryItemServiceServer) GetInventoryItem(*GetInventoryItemRequest, InventoryItemService_GetInventoryItemServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInventoryItem not implemented")
}
func (UnimplementedInventoryItemServiceServer) GetInventoryItembyUuid(*GetInventoryItemRequestbyUuid, InventoryItemService_GetInventoryItembyUuidServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInventoryItembyUuid not implemented")
}
func (UnimplementedInventoryItemServiceServer) GetListInventoryItembyGeneric(*GetListInventoryItemRequestbyGeneric, InventoryItemService_GetListInventoryItembyGenericServer) error {
	return status.Errorf(codes.Unimplemented, "method GetListInventoryItembyGeneric not implemented")
}
func (UnimplementedInventoryItemServiceServer) GetListInventoryItembyBrand(*GetListInventoryItemRequestbyBrand, InventoryItemService_GetListInventoryItembyBrandServer) error {
	return status.Errorf(codes.Unimplemented, "method GetListInventoryItembyBrand not implemented")
}
func (UnimplementedInventoryItemServiceServer) SearchInventoryItem(*SearchInventoryItemRequest, InventoryItemService_SearchInventoryItemServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchInventoryItem not implemented")
}
func (UnimplementedInventoryItemServiceServer) mustEmbedUnimplementedInventoryItemServiceServer() {}

// UnsafeInventoryItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryItemServiceServer will
// result in compilation errors.
type UnsafeInventoryItemServiceServer interface {
	mustEmbedUnimplementedInventoryItemServiceServer()
}

func RegisterInventoryItemServiceServer(s grpc.ServiceRegistrar, srv InventoryItemServiceServer) {
	s.RegisterService(&InventoryItemService_ServiceDesc, srv)
}

func _InventoryItemService_CreateInventoryItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InventoryItemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryItemServiceServer).CreateInventoryItem(m, &inventoryItemServiceCreateInventoryItemServer{stream})
}

type InventoryItemService_CreateInventoryItemServer interface {
	Send(*InventoryItemResponse) error
	grpc.ServerStream
}

type inventoryItemServiceCreateInventoryItemServer struct {
	grpc.ServerStream
}

func (x *inventoryItemServiceCreateInventoryItemServer) Send(m *InventoryItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InventoryItemService_UpdateInventoryItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InventoryItemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryItemServiceServer).UpdateInventoryItem(m, &inventoryItemServiceUpdateInventoryItemServer{stream})
}

type InventoryItemService_UpdateInventoryItemServer interface {
	Send(*InventoryItemResponse) error
	grpc.ServerStream
}

type inventoryItemServiceUpdateInventoryItemServer struct {
	grpc.ServerStream
}

func (x *inventoryItemServiceUpdateInventoryItemServer) Send(m *InventoryItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InventoryItemService_GetInventoryItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetInventoryItemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryItemServiceServer).GetInventoryItem(m, &inventoryItemServiceGetInventoryItemServer{stream})
}

type InventoryItemService_GetInventoryItemServer interface {
	Send(*InventoryItemResponse) error
	grpc.ServerStream
}

type inventoryItemServiceGetInventoryItemServer struct {
	grpc.ServerStream
}

func (x *inventoryItemServiceGetInventoryItemServer) Send(m *InventoryItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InventoryItemService_GetInventoryItembyUuid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetInventoryItemRequestbyUuid)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryItemServiceServer).GetInventoryItembyUuid(m, &inventoryItemServiceGetInventoryItembyUuidServer{stream})
}

type InventoryItemService_GetInventoryItembyUuidServer interface {
	Send(*InventoryItemResponse) error
	grpc.ServerStream
}

type inventoryItemServiceGetInventoryItembyUuidServer struct {
	grpc.ServerStream
}

func (x *inventoryItemServiceGetInventoryItembyUuidServer) Send(m *InventoryItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InventoryItemService_GetListInventoryItembyGeneric_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetListInventoryItemRequestbyGeneric)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryItemServiceServer).GetListInventoryItembyGeneric(m, &inventoryItemServiceGetListInventoryItembyGenericServer{stream})
}

type InventoryItemService_GetListInventoryItembyGenericServer interface {
	Send(*GetListInventoryItemResponse) error
	grpc.ServerStream
}

type inventoryItemServiceGetListInventoryItembyGenericServer struct {
	grpc.ServerStream
}

func (x *inventoryItemServiceGetListInventoryItembyGenericServer) Send(m *GetListInventoryItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InventoryItemService_GetListInventoryItembyBrand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetListInventoryItemRequestbyBrand)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryItemServiceServer).GetListInventoryItembyBrand(m, &inventoryItemServiceGetListInventoryItembyBrandServer{stream})
}

type InventoryItemService_GetListInventoryItembyBrandServer interface {
	Send(*GetListInventoryItemResponse) error
	grpc.ServerStream
}

type inventoryItemServiceGetListInventoryItembyBrandServer struct {
	grpc.ServerStream
}

func (x *inventoryItemServiceGetListInventoryItembyBrandServer) Send(m *GetListInventoryItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InventoryItemService_SearchInventoryItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchInventoryItemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryItemServiceServer).SearchInventoryItem(m, &inventoryItemServiceSearchInventoryItemServer{stream})
}

type InventoryItemService_SearchInventoryItemServer interface {
	Send(*GetListInventoryItemResponse) error
	grpc.ServerStream
}

type inventoryItemServiceSearchInventoryItemServer struct {
	grpc.ServerStream
}

func (x *inventoryItemServiceSearchInventoryItemServer) Send(m *GetListInventoryItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InventoryItemService_ServiceDesc is the grpc.ServiceDesc for InventoryItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simplebank.InventoryItemService",
	HandlerType: (*InventoryItemServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateInventoryItem",
			Handler:       _InventoryItemService_CreateInventoryItem_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateInventoryItem",
			Handler:       _InventoryItemService_UpdateInventoryItem_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetInventoryItem",
			Handler:       _InventoryItemService_GetInventoryItem_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetInventoryItembyUuid",
			Handler:       _InventoryItemService_GetInventoryItembyUuid_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetListInventoryItembyGeneric",
			Handler:       _InventoryItemService_GetListInventoryItembyGeneric_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetListInventoryItembyBrand",
			Handler:       _InventoryItemService_GetListInventoryItembyBrand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchInventoryItem",
			Handler:       _InventoryItemService_SearchInventoryItem_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "accountinventoryitem_service.proto",
}
