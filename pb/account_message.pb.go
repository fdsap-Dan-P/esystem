// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: account_message.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               int64                  `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid             string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CustomerId       int64                  `protobuf:"varint,3,opt,name=customerId,proto3" json:"customerId,omitempty"`
	Acc              string                 `protobuf:"bytes,4,opt,name=acc,proto3" json:"acc,omitempty"`
	AlternateAcc     string                 `protobuf:"bytes,5,opt,name=alternateAcc,proto3" json:"alternateAcc,omitempty"`
	AccountName      string                 `protobuf:"bytes,6,opt,name=accountName,proto3" json:"accountName,omitempty"`
	Balance          string                 `protobuf:"bytes,7,opt,name=balance,proto3" json:"balance,omitempty"`
	NonCurrent       string                 `protobuf:"bytes,8,opt,name=nonCurrent,proto3" json:"nonCurrent,omitempty"`
	ContractDate     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=contractDate,proto3" json:"contractDate,omitempty"`
	Credit           string                 `protobuf:"bytes,10,opt,name=credit,proto3" json:"credit,omitempty"`
	Debit            string                 `protobuf:"bytes,11,opt,name=debit,proto3" json:"debit,omitempty"`
	Isbudget         bool                   `protobuf:"varint,12,opt,name=isbudget,proto3" json:"isbudget,omitempty"`
	LastActivityDate *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=lastActivityDate,proto3" json:"lastActivityDate,omitempty"`
	OpenDate         *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=openDate,proto3" json:"openDate,omitempty"`
	PassbookLine     int32                  `protobuf:"varint,15,opt,name=passbookLine,proto3" json:"passbookLine,omitempty"`
	PendingTrnAmt    string                 `protobuf:"bytes,16,opt,name=pendingTrnAmt,proto3" json:"pendingTrnAmt,omitempty"`
	Principal        string                 `protobuf:"bytes,17,opt,name=principal,proto3" json:"principal,omitempty"`
	ClassId          int64                  `protobuf:"varint,18,opt,name=classId,proto3" json:"classId,omitempty"`
	TypeId           int64                  `protobuf:"varint,19,opt,name=typeId,proto3" json:"typeId,omitempty"`
	BudgetAccountId  int64                  `protobuf:"varint,20,opt,name=budgetAccountId,proto3" json:"budgetAccountId,omitempty"`
	Currency         string                 `protobuf:"bytes,21,opt,name=currency,proto3" json:"currency,omitempty"`
	OfficeId         int64                  `protobuf:"varint,22,opt,name=officeId,proto3" json:"officeId,omitempty"`
	ReferredbyId     int64                  `protobuf:"varint,23,opt,name=referredbyId,proto3" json:"referredbyId,omitempty"`
	StatusId         int64                  `protobuf:"varint,24,opt,name=statusId,proto3" json:"statusId,omitempty"`
	Remarks          string                 `protobuf:"bytes,25,opt,name=remarks,proto3" json:"remarks,omitempty"`
	OtherInfo        *NullString            `protobuf:"bytes,26,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Account) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Account) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Account) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

func (x *Account) GetAlternateAcc() string {
	if x != nil {
		return x.AlternateAcc
	}
	return ""
}

func (x *Account) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *Account) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *Account) GetNonCurrent() string {
	if x != nil {
		return x.NonCurrent
	}
	return ""
}

func (x *Account) GetContractDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ContractDate
	}
	return nil
}

func (x *Account) GetCredit() string {
	if x != nil {
		return x.Credit
	}
	return ""
}

func (x *Account) GetDebit() string {
	if x != nil {
		return x.Debit
	}
	return ""
}

func (x *Account) GetIsbudget() bool {
	if x != nil {
		return x.Isbudget
	}
	return false
}

func (x *Account) GetLastActivityDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivityDate
	}
	return nil
}

func (x *Account) GetOpenDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenDate
	}
	return nil
}

func (x *Account) GetPassbookLine() int32 {
	if x != nil {
		return x.PassbookLine
	}
	return 0
}

func (x *Account) GetPendingTrnAmt() string {
	if x != nil {
		return x.PendingTrnAmt
	}
	return ""
}

func (x *Account) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *Account) GetClassId() int64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *Account) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *Account) GetBudgetAccountId() int64 {
	if x != nil {
		return x.BudgetAccountId
	}
	return 0
}

func (x *Account) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Account) GetOfficeId() int64 {
	if x != nil {
		return x.OfficeId
	}
	return 0
}

func (x *Account) GetReferredbyId() int64 {
	if x != nil {
		return x.ReferredbyId
	}
	return 0
}

func (x *Account) GetStatusId() int64 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *Account) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Account) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type AccountBeneficiary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AccountId      int64       `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Series         int32       `protobuf:"varint,3,opt,name=series,proto3" json:"series,omitempty"`
	TypeId         int64       `protobuf:"varint,4,opt,name=typeId,proto3" json:"typeId,omitempty"`
	Iiid           int64       `protobuf:"varint,5,opt,name=iiid,proto3" json:"iiid,omitempty"`
	RelationTypeId int64       `protobuf:"varint,6,opt,name=relationTypeId,proto3" json:"relationTypeId,omitempty"`
	OtherInfo      *NullString `protobuf:"bytes,7,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *AccountBeneficiary) Reset() {
	*x = AccountBeneficiary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBeneficiary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBeneficiary) ProtoMessage() {}

func (x *AccountBeneficiary) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBeneficiary.ProtoReflect.Descriptor instead.
func (*AccountBeneficiary) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{1}
}

func (x *AccountBeneficiary) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AccountBeneficiary) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AccountBeneficiary) GetSeries() int32 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *AccountBeneficiary) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *AccountBeneficiary) GetIiid() int64 {
	if x != nil {
		return x.Iiid
	}
	return 0
}

func (x *AccountBeneficiary) GetRelationTypeId() int64 {
	if x != nil {
		return x.RelationTypeId
	}
	return 0
}

func (x *AccountBeneficiary) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type AccountClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int64       `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid      string      `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ProductId int64       `protobuf:"varint,3,opt,name=productId,proto3" json:"productId,omitempty"`
	GroupId   int64       `protobuf:"varint,4,opt,name=groupId,proto3" json:"groupId,omitempty"`
	ClassId   int64       `protobuf:"varint,5,opt,name=classId,proto3" json:"classId,omitempty"`
	CurId     int64       `protobuf:"varint,6,opt,name=curId,proto3" json:"curId,omitempty"`
	NoncurId  int64       `protobuf:"varint,7,opt,name=noncurId,proto3" json:"noncurId,omitempty"`
	BsAccId   int64       `protobuf:"varint,8,opt,name=bsAccId,proto3" json:"bsAccId,omitempty"`
	IsAccId   int64       `protobuf:"varint,9,opt,name=isAccId,proto3" json:"isAccId,omitempty"`
	OtherInfo *NullString `protobuf:"bytes,10,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *AccountClass) Reset() {
	*x = AccountClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountClass) ProtoMessage() {}

func (x *AccountClass) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountClass.ProtoReflect.Descriptor instead.
func (*AccountClass) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{2}
}

func (x *AccountClass) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AccountClass) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AccountClass) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AccountClass) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AccountClass) GetClassId() int64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *AccountClass) GetCurId() int64 {
	if x != nil {
		return x.CurId
	}
	return 0
}

func (x *AccountClass) GetNoncurId() int64 {
	if x != nil {
		return x.NoncurId
	}
	return 0
}

func (x *AccountClass) GetBsAccId() int64 {
	if x != nil {
		return x.BsAccId
	}
	return 0
}

func (x *AccountClass) GetIsAccId() int64 {
	if x != nil {
		return x.IsAccId
	}
	return 0
}

func (x *AccountClass) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type AccountInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId       int64                  `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Uuid            string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Interest        string                 `protobuf:"bytes,3,opt,name=interest,proto3" json:"interest,omitempty"`
	EffectiveRate   float64                `protobuf:"fixed64,4,opt,name=effectiveRate,proto3" json:"effectiveRate,omitempty"`
	InterestRate    float64                `protobuf:"fixed64,5,opt,name=interestRate,proto3" json:"interestRate,omitempty"`
	Credit          string                 `protobuf:"bytes,6,opt,name=credit,proto3" json:"credit,omitempty"`
	Debit           string                 `protobuf:"bytes,7,opt,name=debit,proto3" json:"debit,omitempty"`
	Accruals        string                 `protobuf:"bytes,8,opt,name=accruals,proto3" json:"accruals,omitempty"`
	WaivedInt       string                 `protobuf:"bytes,9,opt,name=waivedInt,proto3" json:"waivedInt,omitempty"`
	LastAccruedDate *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=lastAccruedDate,proto3" json:"lastAccruedDate,omitempty"`
}

func (x *AccountInterest) Reset() {
	*x = AccountInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInterest) ProtoMessage() {}

func (x *AccountInterest) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInterest.ProtoReflect.Descriptor instead.
func (*AccountInterest) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{3}
}

func (x *AccountInterest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AccountInterest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AccountInterest) GetInterest() string {
	if x != nil {
		return x.Interest
	}
	return ""
}

func (x *AccountInterest) GetEffectiveRate() float64 {
	if x != nil {
		return x.EffectiveRate
	}
	return 0
}

func (x *AccountInterest) GetInterestRate() float64 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *AccountInterest) GetCredit() string {
	if x != nil {
		return x.Credit
	}
	return ""
}

func (x *AccountInterest) GetDebit() string {
	if x != nil {
		return x.Debit
	}
	return ""
}

func (x *AccountInterest) GetAccruals() string {
	if x != nil {
		return x.Accruals
	}
	return ""
}

func (x *AccountInterest) GetWaivedInt() string {
	if x != nil {
		return x.WaivedInt
	}
	return ""
}

func (x *AccountInterest) GetLastAccruedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAccruedDate
	}
	return nil
}

type AccountParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ParamItemId     int64                  `protobuf:"varint,2,opt,name=paramItemId,proto3" json:"paramItemId,omitempty"`
	TypeId          int64                  `protobuf:"varint,3,opt,name=typeId,proto3" json:"typeId,omitempty"`
	DateImplemented *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=dateImplemented,proto3" json:"dateImplemented,omitempty"`
	ValueInt        int64                  `protobuf:"varint,5,opt,name=valueInt,proto3" json:"valueInt,omitempty"`
	ValueDecimal    string                 `protobuf:"bytes,6,opt,name=valueDecimal,proto3" json:"valueDecimal,omitempty"`
	ValueDate       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=valueDate,proto3" json:"valueDate,omitempty"`
	ValueString     string                 `protobuf:"bytes,8,opt,name=valueString,proto3" json:"valueString,omitempty"`
	OtherInfo       *NullString            `protobuf:"bytes,9,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *AccountParam) Reset() {
	*x = AccountParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountParam) ProtoMessage() {}

func (x *AccountParam) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountParam.ProtoReflect.Descriptor instead.
func (*AccountParam) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{4}
}

func (x *AccountParam) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AccountParam) GetParamItemId() int64 {
	if x != nil {
		return x.ParamItemId
	}
	return 0
}

func (x *AccountParam) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *AccountParam) GetDateImplemented() *timestamppb.Timestamp {
	if x != nil {
		return x.DateImplemented
	}
	return nil
}

func (x *AccountParam) GetValueInt() int64 {
	if x != nil {
		return x.ValueInt
	}
	return 0
}

func (x *AccountParam) GetValueDecimal() string {
	if x != nil {
		return x.ValueDecimal
	}
	return ""
}

func (x *AccountParam) GetValueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ValueDate
	}
	return nil
}

func (x *AccountParam) GetValueString() string {
	if x != nil {
		return x.ValueString
	}
	return ""
}

func (x *AccountParam) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type AccountQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64       `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid          string      `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AccountId     int64       `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	PackageId     int64       `protobuf:"varint,4,opt,name=packageId,proto3" json:"packageId,omitempty"`
	ItemName      string      `protobuf:"bytes,5,opt,name=itemName,proto3" json:"itemName,omitempty"`
	GenericNameId int64       `protobuf:"varint,6,opt,name=genericNameId,proto3" json:"genericNameId,omitempty"`
	BrandNameId   int64       `protobuf:"varint,7,opt,name=brandNameId,proto3" json:"brandNameId,omitempty"`
	SupplierId    int64       `protobuf:"varint,8,opt,name=supplierId,proto3" json:"supplierId,omitempty"`
	Quantity      string      `protobuf:"bytes,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	UnitPrice     string      `protobuf:"bytes,10,opt,name=unitPrice,proto3" json:"unitPrice,omitempty"`
	BookValue     string      `protobuf:"bytes,11,opt,name=bookValue,proto3" json:"bookValue,omitempty"`
	Unit          string      `protobuf:"bytes,12,opt,name=unit,proto3" json:"unit,omitempty"`
	MeasureId     int64       `protobuf:"varint,13,opt,name=measureId,proto3" json:"measureId,omitempty"`
	Discount      string      `protobuf:"bytes,14,opt,name=discount,proto3" json:"discount,omitempty"`
	TaxRate       string      `protobuf:"bytes,15,opt,name=taxRate,proto3" json:"taxRate,omitempty"`
	Remarks       string      `protobuf:"bytes,16,opt,name=remarks,proto3" json:"remarks,omitempty"`
	OtherInfo     *NullString `protobuf:"bytes,17,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *AccountQuantity) Reset() {
	*x = AccountQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountQuantity) ProtoMessage() {}

func (x *AccountQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountQuantity.ProtoReflect.Descriptor instead.
func (*AccountQuantity) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{5}
}

func (x *AccountQuantity) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AccountQuantity) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AccountQuantity) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AccountQuantity) GetPackageId() int64 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *AccountQuantity) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *AccountQuantity) GetGenericNameId() int64 {
	if x != nil {
		return x.GenericNameId
	}
	return 0
}

func (x *AccountQuantity) GetBrandNameId() int64 {
	if x != nil {
		return x.BrandNameId
	}
	return 0
}

func (x *AccountQuantity) GetSupplierId() int64 {
	if x != nil {
		return x.SupplierId
	}
	return 0
}

func (x *AccountQuantity) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

func (x *AccountQuantity) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *AccountQuantity) GetBookValue() string {
	if x != nil {
		return x.BookValue
	}
	return ""
}

func (x *AccountQuantity) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *AccountQuantity) GetMeasureId() int64 {
	if x != nil {
		return x.MeasureId
	}
	return 0
}

func (x *AccountQuantity) GetDiscount() string {
	if x != nil {
		return x.Discount
	}
	return ""
}

func (x *AccountQuantity) GetTaxRate() string {
	if x != nil {
		return x.TaxRate
	}
	return ""
}

func (x *AccountQuantity) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *AccountQuantity) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type AccountTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      int64                  `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Uuid           string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Frequency      int32                  `protobuf:"varint,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	N              int32                  `protobuf:"varint,4,opt,name=n,proto3" json:"n,omitempty"`
	PaidN          int32                  `protobuf:"varint,5,opt,name=paidN,proto3" json:"paidN,omitempty"`
	FixedDue       string                 `protobuf:"bytes,6,opt,name=fixedDue,proto3" json:"fixedDue,omitempty"`
	CummulativeDue string                 `protobuf:"bytes,7,opt,name=cummulativeDue,proto3" json:"cummulativeDue,omitempty"`
	DateStart      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=dateStart,proto3" json:"dateStart,omitempty"`
	Maturity       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=maturity,proto3" json:"maturity,omitempty"`
}

func (x *AccountTerm) Reset() {
	*x = AccountTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTerm) ProtoMessage() {}

func (x *AccountTerm) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTerm.ProtoReflect.Descriptor instead.
func (*AccountTerm) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{6}
}

func (x *AccountTerm) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AccountTerm) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AccountTerm) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *AccountTerm) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *AccountTerm) GetPaidN() int32 {
	if x != nil {
		return x.PaidN
	}
	return 0
}

func (x *AccountTerm) GetFixedDue() string {
	if x != nil {
		return x.FixedDue
	}
	return ""
}

func (x *AccountTerm) GetCummulativeDue() string {
	if x != nil {
		return x.CummulativeDue
	}
	return ""
}

func (x *AccountTerm) GetDateStart() *timestamppb.Timestamp {
	if x != nil {
		return x.DateStart
	}
	return nil
}

func (x *AccountTerm) GetMaturity() *timestamppb.Timestamp {
	if x != nil {
		return x.Maturity
	}
	return nil
}

type AccountType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64       `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid          string      `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Code          int64       `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	AccountType   string      `protobuf:"bytes,4,opt,name=accountType,proto3" json:"accountType,omitempty"`
	ProductId     int64       `protobuf:"varint,5,opt,name=productId,proto3" json:"productId,omitempty"`
	GroupId       int64       `protobuf:"varint,6,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Iiid          int64       `protobuf:"varint,7,opt,name=iiid,proto3" json:"iiid,omitempty"`
	NormalBalance bool        `protobuf:"varint,8,opt,name=normalBalance,proto3" json:"normalBalance,omitempty"`
	Isgl          bool        `protobuf:"varint,9,opt,name=isgl,proto3" json:"isgl,omitempty"`
	Active        bool        `protobuf:"varint,10,opt,name=active,proto3" json:"active,omitempty"`
	OtherInfo     *NullString `protobuf:"bytes,11,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *AccountType) Reset() {
	*x = AccountType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountType) ProtoMessage() {}

func (x *AccountType) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountType.ProtoReflect.Descriptor instead.
func (*AccountType) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{7}
}

func (x *AccountType) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AccountType) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AccountType) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AccountType) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *AccountType) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AccountType) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AccountType) GetIiid() int64 {
	if x != nil {
		return x.Iiid
	}
	return 0
}

func (x *AccountType) GetNormalBalance() bool {
	if x != nil {
		return x.NormalBalance
	}
	return false
}

func (x *AccountType) GetIsgl() bool {
	if x != nil {
		return x.Isgl
	}
	return false
}

func (x *AccountType) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *AccountType) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type ChargeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int64       `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid         string      `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ChargeType   string      `protobuf:"bytes,3,opt,name=chargeType,proto3" json:"chargeType,omitempty"`
	UnrealizedId int64       `protobuf:"varint,4,opt,name=unrealizedId,proto3" json:"unrealizedId,omitempty"`
	RealizedId   int64       `protobuf:"varint,5,opt,name=realizedId,proto3" json:"realizedId,omitempty"`
	OtherInfo    *NullString `protobuf:"bytes,6,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *ChargeType) Reset() {
	*x = ChargeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeType) ProtoMessage() {}

func (x *ChargeType) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeType.ProtoReflect.Descriptor instead.
func (*ChargeType) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{8}
}

func (x *ChargeType) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ChargeType) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ChargeType) GetChargeType() string {
	if x != nil {
		return x.ChargeType
	}
	return ""
}

func (x *ChargeType) GetUnrealizedId() int64 {
	if x != nil {
		return x.UnrealizedId
	}
	return 0
}

func (x *ChargeType) GetRealizedId() int64 {
	if x != nil {
		return x.RealizedId
	}
	return 0
}

func (x *ChargeType) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type GlAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64       `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid          string      `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OfficeId      int64       `protobuf:"varint,3,opt,name=officeId,proto3" json:"officeId,omitempty"`
	CoaId         int64       `protobuf:"varint,4,opt,name=coaId,proto3" json:"coaId,omitempty"`
	Balance       string      `protobuf:"bytes,5,opt,name=balance,proto3" json:"balance,omitempty"`
	PendingTrnAmt string      `protobuf:"bytes,6,opt,name=pendingTrnAmt,proto3" json:"pendingTrnAmt,omitempty"`
	TypeId        int64       `protobuf:"varint,7,opt,name=typeId,proto3" json:"typeId,omitempty"`
	Currency      string      `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	PartitionId   int64       `protobuf:"varint,9,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	Remark        string      `protobuf:"bytes,10,opt,name=remark,proto3" json:"remark,omitempty"`
	OtherInfo     *NullString `protobuf:"bytes,11,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *GlAccount) Reset() {
	*x = GlAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlAccount) ProtoMessage() {}

func (x *GlAccount) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlAccount.ProtoReflect.Descriptor instead.
func (*GlAccount) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{9}
}

func (x *GlAccount) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GlAccount) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GlAccount) GetOfficeId() int64 {
	if x != nil {
		return x.OfficeId
	}
	return 0
}

func (x *GlAccount) GetCoaId() int64 {
	if x != nil {
		return x.CoaId
	}
	return 0
}

func (x *GlAccount) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GlAccount) GetPendingTrnAmt() string {
	if x != nil {
		return x.PendingTrnAmt
	}
	return ""
}

func (x *GlAccount) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *GlAccount) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GlAccount) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *GlAccount) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *GlAccount) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type OfficeAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               int64                  `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid             string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OfficeId         int64                  `protobuf:"varint,3,opt,name=officeId,proto3" json:"officeId,omitempty"`
	TypeId           int64                  `protobuf:"varint,4,opt,name=typeId,proto3" json:"typeId,omitempty"`
	Currency         string                 `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	PartitionId      int64                  `protobuf:"varint,6,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	Balance          string                 `protobuf:"bytes,7,opt,name=balance,proto3" json:"balance,omitempty"`
	PendingTrnAmt    string                 `protobuf:"bytes,8,opt,name=pendingTrnAmt,proto3" json:"pendingTrnAmt,omitempty"`
	Budget           string                 `protobuf:"bytes,9,opt,name=budget,proto3" json:"budget,omitempty"`
	LastActivityDate *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=lastActivityDate,proto3" json:"lastActivityDate,omitempty"`
	StatusId         int64                  `protobuf:"varint,11,opt,name=statusId,proto3" json:"statusId,omitempty"`
	Remarks          string                 `protobuf:"bytes,12,opt,name=remarks,proto3" json:"remarks,omitempty"`
	OtherInfo        *NullString            `protobuf:"bytes,13,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *OfficeAccount) Reset() {
	*x = OfficeAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficeAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficeAccount) ProtoMessage() {}

func (x *OfficeAccount) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficeAccount.ProtoReflect.Descriptor instead.
func (*OfficeAccount) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{10}
}

func (x *OfficeAccount) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OfficeAccount) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OfficeAccount) GetOfficeId() int64 {
	if x != nil {
		return x.OfficeId
	}
	return 0
}

func (x *OfficeAccount) GetTypeId() int64 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *OfficeAccount) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OfficeAccount) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *OfficeAccount) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *OfficeAccount) GetPendingTrnAmt() string {
	if x != nil {
		return x.PendingTrnAmt
	}
	return ""
}

func (x *OfficeAccount) GetBudget() string {
	if x != nil {
		return x.Budget
	}
	return ""
}

func (x *OfficeAccount) GetLastActivityDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivityDate
	}
	return nil
}

func (x *OfficeAccount) GetStatusId() int64 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *OfficeAccount) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *OfficeAccount) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type OfficeAccountType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                int64       `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid              string      `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OfficeAccountType string      `protobuf:"bytes,3,opt,name=officeAccountType,proto3" json:"officeAccountType,omitempty"`
	CoaId             int64       `protobuf:"varint,4,opt,name=coaId,proto3" json:"coaId,omitempty"`
	OtherInfo         *NullString `protobuf:"bytes,5,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *OfficeAccountType) Reset() {
	*x = OfficeAccountType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficeAccountType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficeAccountType) ProtoMessage() {}

func (x *OfficeAccountType) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficeAccountType.ProtoReflect.Descriptor instead.
func (*OfficeAccountType) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{11}
}

func (x *OfficeAccountType) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OfficeAccountType) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OfficeAccountType) GetOfficeAccountType() string {
	if x != nil {
		return x.OfficeAccountType
	}
	return ""
}

func (x *OfficeAccountType) GetCoaId() int64 {
	if x != nil {
		return x.CoaId
	}
	return 0
}

func (x *OfficeAccountType) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type OtherSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AccountId  int64                  `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	ChargeId   int64                  `protobuf:"varint,3,opt,name=chargeId,proto3" json:"chargeId,omitempty"`
	Series     int32                  `protobuf:"varint,4,opt,name=series,proto3" json:"series,omitempty"`
	DueDate    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	DueAmt     string                 `protobuf:"bytes,6,opt,name=dueAmt,proto3" json:"dueAmt,omitempty"`
	Realizable string                 `protobuf:"bytes,7,opt,name=realizable,proto3" json:"realizable,omitempty"`
	Endbal     string                 `protobuf:"bytes,8,opt,name=endbal,proto3" json:"endbal,omitempty"`
	OtherInfo  *NullString            `protobuf:"bytes,9,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *OtherSchedule) Reset() {
	*x = OtherSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherSchedule) ProtoMessage() {}

func (x *OtherSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherSchedule.ProtoReflect.Descriptor instead.
func (*OtherSchedule) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{12}
}

func (x *OtherSchedule) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *OtherSchedule) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *OtherSchedule) GetChargeId() int64 {
	if x != nil {
		return x.ChargeId
	}
	return 0
}

func (x *OtherSchedule) GetSeries() int32 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *OtherSchedule) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *OtherSchedule) GetDueAmt() string {
	if x != nil {
		return x.DueAmt
	}
	return ""
}

func (x *OtherSchedule) GetRealizable() string {
	if x != nil {
		return x.Realizable
	}
	return ""
}

func (x *OtherSchedule) GetEndbal() string {
	if x != nil {
		return x.Endbal
	}
	return ""
}

func (x *OtherSchedule) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64       `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid          string      `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Code          int64       `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	ProductName   string      `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	Description   string      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	NormalBalance bool        `protobuf:"varint,6,opt,name=normalBalance,proto3" json:"normalBalance,omitempty"`
	Isgl          bool        `protobuf:"varint,7,opt,name=isgl,proto3" json:"isgl,omitempty"`
	OtherInfo     *NullString `protobuf:"bytes,8,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{13}
}

func (x *Product) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Product) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Product) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Product) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetNormalBalance() bool {
	if x != nil {
		return x.NormalBalance
	}
	return false
}

func (x *Product) GetIsgl() bool {
	if x != nil {
		return x.Isgl
	}
	return false
}

func (x *Product) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64                  `protobuf:"varint,1,opt,name=iD,proto3" json:"iD,omitempty"`
	Uuid          string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	AccountId     int64                  `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Series        int32                  `protobuf:"varint,4,opt,name=series,proto3" json:"series,omitempty"`
	DueDate       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	DuePrin       string                 `protobuf:"bytes,6,opt,name=duePrin,proto3" json:"duePrin,omitempty"`
	DueInt        string                 `protobuf:"bytes,7,opt,name=dueInt,proto3" json:"dueInt,omitempty"`
	EndPrin       string                 `protobuf:"bytes,8,opt,name=endPrin,proto3" json:"endPrin,omitempty"`
	EndInt        string                 `protobuf:"bytes,9,opt,name=endInt,proto3" json:"endInt,omitempty"`
	CarryingValue string                 `protobuf:"bytes,10,opt,name=carryingValue,proto3" json:"carryingValue,omitempty"`
	Realizable    string                 `protobuf:"bytes,11,opt,name=realizable,proto3" json:"realizable,omitempty"`
	OtherInfo     *NullString            `protobuf:"bytes,12,opt,name=otherInfo,proto3" json:"otherInfo,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_account_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_account_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_account_message_proto_rawDescGZIP(), []int{14}
}

func (x *Schedule) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Schedule) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Schedule) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Schedule) GetSeries() int32 {
	if x != nil {
		return x.Series
	}
	return 0
}

func (x *Schedule) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *Schedule) GetDuePrin() string {
	if x != nil {
		return x.DuePrin
	}
	return ""
}

func (x *Schedule) GetDueInt() string {
	if x != nil {
		return x.DueInt
	}
	return ""
}

func (x *Schedule) GetEndPrin() string {
	if x != nil {
		return x.EndPrin
	}
	return ""
}

func (x *Schedule) GetEndInt() string {
	if x != nil {
		return x.EndInt
	}
	return ""
}

func (x *Schedule) GetCarryingValue() string {
	if x != nil {
		return x.CarryingValue
	}
	return ""
}

func (x *Schedule) GetRealizable() string {
	if x != nil {
		return x.Realizable
	}
	return ""
}

func (x *Schedule) GetOtherInfo() *NullString {
	if x != nil {
		return x.OtherInfo
	}
	return nil
}

var File_account_message_proto protoreflect.FileDescriptor

var file_account_message_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62,
	0x61, 0x6e, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x06, 0x0a, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f,
	0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x62, 0x6f, 0x6f, 0x6b,
	0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73,
	0x62, 0x6f, 0x6f, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x6e, 0x41, 0x6d, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x6e, 0x41, 0x6d, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x62, 0x79, 0x49, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x62, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xe8, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x69, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x69, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa0, 0x02, 0x0a, 0x0c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x73, 0x41, 0x63, 0x63, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x73, 0x41, 0x63, 0x63, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x41, 0x63, 0x63, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x69, 0x73, 0x41, 0x63, 0x63, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd7,
	0x02, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x72,
	0x75, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x72,
	0x75, 0x61, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x69, 0x76, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x72, 0x75, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x72, 0x75, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x0c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x38, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x85, 0x04, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e,
	0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb7, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x64, 0x4e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x69, 0x64, 0x4e, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x6d, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x75, 0x6d, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x75, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x22, 0xbb, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x69, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x69, 0x69, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x67, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x67,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xca, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc5, 0x02, 0x0a,
	0x09, 0x47, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x61, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x6e, 0x41, 0x6d, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x6e, 0x41, 0x6d, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x34,
	0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb1, 0x03, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x72, 0x6e, 0x41, 0x6d, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x6e, 0x41, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x61, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb1, 0x02, 0x0a,
	0x0d, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x75,
	0x65, 0x41, 0x6d, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x75, 0x65, 0x41,
	0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x62, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x62, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xf5, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x73, 0x67, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73,
	0x67, 0x6c, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xfa, 0x02, 0x0a, 0x08, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x75, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x72,
	0x72, 0x79, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x34, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x20, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x64, 0x73,
	0x61, 0x70, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x70, 0x62,
	0x50, 0x01, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_account_message_proto_rawDescOnce sync.Once
	file_account_message_proto_rawDescData = file_account_message_proto_rawDesc
)

func file_account_message_proto_rawDescGZIP() []byte {
	file_account_message_proto_rawDescOnce.Do(func() {
		file_account_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_account_message_proto_rawDescData)
	})
	return file_account_message_proto_rawDescData
}

var file_account_message_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_account_message_proto_goTypes = []interface{}{
	(*Account)(nil),               // 0: simplebank.Account
	(*AccountBeneficiary)(nil),    // 1: simplebank.AccountBeneficiary
	(*AccountClass)(nil),          // 2: simplebank.AccountClass
	(*AccountInterest)(nil),       // 3: simplebank.AccountInterest
	(*AccountParam)(nil),          // 4: simplebank.AccountParam
	(*AccountQuantity)(nil),       // 5: simplebank.AccountQuantity
	(*AccountTerm)(nil),           // 6: simplebank.AccountTerm
	(*AccountType)(nil),           // 7: simplebank.AccountType
	(*ChargeType)(nil),            // 8: simplebank.ChargeType
	(*GlAccount)(nil),             // 9: simplebank.GlAccount
	(*OfficeAccount)(nil),         // 10: simplebank.OfficeAccount
	(*OfficeAccountType)(nil),     // 11: simplebank.OfficeAccountType
	(*OtherSchedule)(nil),         // 12: simplebank.OtherSchedule
	(*Product)(nil),               // 13: simplebank.Product
	(*Schedule)(nil),              // 14: simplebank.Schedule
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*NullString)(nil),            // 16: simplebank.NullString
}
var file_account_message_proto_depIdxs = []int32{
	15, // 0: simplebank.Account.contractDate:type_name -> google.protobuf.Timestamp
	15, // 1: simplebank.Account.lastActivityDate:type_name -> google.protobuf.Timestamp
	15, // 2: simplebank.Account.openDate:type_name -> google.protobuf.Timestamp
	16, // 3: simplebank.Account.otherInfo:type_name -> simplebank.NullString
	16, // 4: simplebank.AccountBeneficiary.otherInfo:type_name -> simplebank.NullString
	16, // 5: simplebank.AccountClass.otherInfo:type_name -> simplebank.NullString
	15, // 6: simplebank.AccountInterest.lastAccruedDate:type_name -> google.protobuf.Timestamp
	15, // 7: simplebank.AccountParam.dateImplemented:type_name -> google.protobuf.Timestamp
	15, // 8: simplebank.AccountParam.valueDate:type_name -> google.protobuf.Timestamp
	16, // 9: simplebank.AccountParam.otherInfo:type_name -> simplebank.NullString
	16, // 10: simplebank.AccountQuantity.otherInfo:type_name -> simplebank.NullString
	15, // 11: simplebank.AccountTerm.dateStart:type_name -> google.protobuf.Timestamp
	15, // 12: simplebank.AccountTerm.maturity:type_name -> google.protobuf.Timestamp
	16, // 13: simplebank.AccountType.otherInfo:type_name -> simplebank.NullString
	16, // 14: simplebank.ChargeType.otherInfo:type_name -> simplebank.NullString
	16, // 15: simplebank.GlAccount.otherInfo:type_name -> simplebank.NullString
	15, // 16: simplebank.OfficeAccount.lastActivityDate:type_name -> google.protobuf.Timestamp
	16, // 17: simplebank.OfficeAccount.otherInfo:type_name -> simplebank.NullString
	16, // 18: simplebank.OfficeAccountType.otherInfo:type_name -> simplebank.NullString
	15, // 19: simplebank.OtherSchedule.dueDate:type_name -> google.protobuf.Timestamp
	16, // 20: simplebank.OtherSchedule.otherInfo:type_name -> simplebank.NullString
	16, // 21: simplebank.Product.otherInfo:type_name -> simplebank.NullString
	15, // 22: simplebank.Schedule.dueDate:type_name -> google.protobuf.Timestamp
	16, // 23: simplebank.Schedule.otherInfo:type_name -> simplebank.NullString
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_account_message_proto_init() }
func file_account_message_proto_init() {
	if File_account_message_proto != nil {
		return
	}
	file_type_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_account_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBeneficiary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficeAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficeAccountType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_account_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_account_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_account_message_proto_goTypes,
		DependencyIndexes: file_account_message_proto_depIdxs,
		MessageInfos:      file_account_message_proto_msgTypes,
	}.Build()
	File_account_message_proto = out.File
	file_account_message_proto_rawDesc = nil
	file_account_message_proto_goTypes = nil
	file_account_message_proto_depIdxs = nil
}
