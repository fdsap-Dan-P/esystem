// Code generated by MockGen. DO NOT EDIT.
// Source: simplebank/db/datastore (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	db "simplebank/db/datastore"
	db0 "simplebank/db/datastore/access"
	db1 "simplebank/db/datastore/account"
	db2 "simplebank/db/datastore/customer"
	db3 "simplebank/db/datastore/document"
	db4 "simplebank/db/datastore/identity"
	db5 "simplebank/db/datastore/reference"
	db6 "simplebank/db/datastore/socialmedia"
	db7 "simplebank/db/datastore/transaction"
	db8 "simplebank/db/datastore/user"
	model "simplebank/model"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddAccountBalance mocks base method.
func (m *MockStore) AddAccountBalance(arg0 context.Context, arg1 db1.AddAccountBalanceParams) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccountBalance", arg0, arg1)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccountBalance indicates an expected call of AddAccountBalance.
func (mr *MockStoreMockRecorder) AddAccountBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccountBalance", reflect.TypeOf((*MockStore)(nil).AddAccountBalance), arg0, arg1)
}

// CreateAccessAccountType mocks base method.
func (m *MockStore) CreateAccessAccountType(arg0 context.Context, arg1 db0.AccessAccountTypeRequest) (model.AccessAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessAccountType", arg0, arg1)
	ret0, _ := ret[0].(model.AccessAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessAccountType indicates an expected call of CreateAccessAccountType.
func (mr *MockStoreMockRecorder) CreateAccessAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessAccountType", reflect.TypeOf((*MockStore)(nil).CreateAccessAccountType), arg0, arg1)
}

// CreateAccessConfig mocks base method.
func (m *MockStore) CreateAccessConfig(arg0 context.Context, arg1 db0.AccessConfigRequest) (model.AccessConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessConfig", arg0, arg1)
	ret0, _ := ret[0].(model.AccessConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessConfig indicates an expected call of CreateAccessConfig.
func (mr *MockStoreMockRecorder) CreateAccessConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessConfig", reflect.TypeOf((*MockStore)(nil).CreateAccessConfig), arg0, arg1)
}

// CreateAccessObject mocks base method.
func (m *MockStore) CreateAccessObject(arg0 context.Context, arg1 db0.AccessObjectRequest) (model.AccessObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessObject", arg0, arg1)
	ret0, _ := ret[0].(model.AccessObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessObject indicates an expected call of CreateAccessObject.
func (mr *MockStoreMockRecorder) CreateAccessObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessObject", reflect.TypeOf((*MockStore)(nil).CreateAccessObject), arg0, arg1)
}

// CreateAccessProduct mocks base method.
func (m *MockStore) CreateAccessProduct(arg0 context.Context, arg1 db0.AccessProductRequest) (model.AccessProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessProduct", arg0, arg1)
	ret0, _ := ret[0].(model.AccessProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessProduct indicates an expected call of CreateAccessProduct.
func (mr *MockStoreMockRecorder) CreateAccessProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessProduct", reflect.TypeOf((*MockStore)(nil).CreateAccessProduct), arg0, arg1)
}

// CreateAccessRole mocks base method.
func (m *MockStore) CreateAccessRole(arg0 context.Context, arg1 db0.AccessRoleRequest) (model.AccessRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessRole", arg0, arg1)
	ret0, _ := ret[0].(model.AccessRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessRole indicates an expected call of CreateAccessRole.
func (mr *MockStoreMockRecorder) CreateAccessRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessRole", reflect.TypeOf((*MockStore)(nil).CreateAccessRole), arg0, arg1)
}

// CreateAccount mocks base method.
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 db1.AccountRequest) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateAccountBeneficiary mocks base method.
func (m *MockStore) CreateAccountBeneficiary(arg0 context.Context, arg1 db1.AccountBeneficiaryRequest) (model.AccountBeneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountBeneficiary", arg0, arg1)
	ret0, _ := ret[0].(model.AccountBeneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountBeneficiary indicates an expected call of CreateAccountBeneficiary.
func (mr *MockStoreMockRecorder) CreateAccountBeneficiary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountBeneficiary", reflect.TypeOf((*MockStore)(nil).CreateAccountBeneficiary), arg0, arg1)
}

// CreateAccountClass mocks base method.
func (m *MockStore) CreateAccountClass(arg0 context.Context, arg1 db1.AccountClassRequest) (model.AccountClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountClass", arg0, arg1)
	ret0, _ := ret[0].(model.AccountClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountClass indicates an expected call of CreateAccountClass.
func (mr *MockStoreMockRecorder) CreateAccountClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountClass", reflect.TypeOf((*MockStore)(nil).CreateAccountClass), arg0, arg1)
}

// CreateAccountInterest mocks base method.
func (m *MockStore) CreateAccountInterest(arg0 context.Context, arg1 db1.AccountInterestRequest) (model.AccountInterest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountInterest", arg0, arg1)
	ret0, _ := ret[0].(model.AccountInterest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountInterest indicates an expected call of CreateAccountInterest.
func (mr *MockStoreMockRecorder) CreateAccountInterest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountInterest", reflect.TypeOf((*MockStore)(nil).CreateAccountInterest), arg0, arg1)
}

// CreateAccountInventory mocks base method.
func (m *MockStore) CreateAccountInventory(arg0 context.Context, arg1 db1.AccountInventoryRequest) (model.AccountInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountInventory", arg0, arg1)
	ret0, _ := ret[0].(model.AccountInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountInventory indicates an expected call of CreateAccountInventory.
func (mr *MockStoreMockRecorder) CreateAccountInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountInventory", reflect.TypeOf((*MockStore)(nil).CreateAccountInventory), arg0, arg1)
}

// CreateAccountInventoryTran mocks base method.
func (m *MockStore) CreateAccountInventoryTran(arg0 context.Context, arg1 db7.AccountInventoryTranRequest) (model.AccountInventoryTran, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountInventoryTran", arg0, arg1)
	ret0, _ := ret[0].(model.AccountInventoryTran)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountInventoryTran indicates an expected call of CreateAccountInventoryTran.
func (mr *MockStoreMockRecorder) CreateAccountInventoryTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountInventoryTran", reflect.TypeOf((*MockStore)(nil).CreateAccountInventoryTran), arg0, arg1)
}

// CreateAccountParam mocks base method.
func (m *MockStore) CreateAccountParam(arg0 context.Context, arg1 db1.AccountParamRequest) (model.AccountParam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountParam", arg0, arg1)
	ret0, _ := ret[0].(model.AccountParam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountParam indicates an expected call of CreateAccountParam.
func (mr *MockStoreMockRecorder) CreateAccountParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountParam", reflect.TypeOf((*MockStore)(nil).CreateAccountParam), arg0, arg1)
}

// CreateAccountTerm mocks base method.
func (m *MockStore) CreateAccountTerm(arg0 context.Context, arg1 db1.AccountTermRequest) (model.AccountTerm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountTerm", arg0, arg1)
	ret0, _ := ret[0].(model.AccountTerm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountTerm indicates an expected call of CreateAccountTerm.
func (mr *MockStoreMockRecorder) CreateAccountTerm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountTerm", reflect.TypeOf((*MockStore)(nil).CreateAccountTerm), arg0, arg1)
}

// CreateAccountTran mocks base method.
func (m *MockStore) CreateAccountTran(arg0 context.Context, arg1 db7.AccountTranRequest) (model.AccountTran, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountTran", arg0, arg1)
	ret0, _ := ret[0].(model.AccountTran)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountTran indicates an expected call of CreateAccountTran.
func (mr *MockStoreMockRecorder) CreateAccountTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountTran", reflect.TypeOf((*MockStore)(nil).CreateAccountTran), arg0, arg1)
}

// CreateAccountType mocks base method.
func (m *MockStore) CreateAccountType(arg0 context.Context, arg1 db1.AccountTypeRequest) (model.AccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountType", arg0, arg1)
	ret0, _ := ret[0].(model.AccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountType indicates an expected call of CreateAccountType.
func (mr *MockStoreMockRecorder) CreateAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountType", reflect.TypeOf((*MockStore)(nil).CreateAccountType), arg0, arg1)
}

// CreateActionTicket mocks base method.
func (m *MockStore) CreateActionTicket(arg0 context.Context, arg1 db7.ActionTicketRequest) (model.ActionTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActionTicket", arg0, arg1)
	ret0, _ := ret[0].(model.ActionTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActionTicket indicates an expected call of CreateActionTicket.
func (mr *MockStoreMockRecorder) CreateActionTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionTicket", reflect.TypeOf((*MockStore)(nil).CreateActionTicket), arg0, arg1)
}

// CreateAddressList mocks base method.
func (m *MockStore) CreateAddressList(arg0 context.Context, arg1 db4.AddressListRequest) (model.AddressList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddressList", arg0, arg1)
	ret0, _ := ret[0].(model.AddressList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddressList indicates an expected call of CreateAddressList.
func (mr *MockStoreMockRecorder) CreateAddressList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddressList", reflect.TypeOf((*MockStore)(nil).CreateAddressList), arg0, arg1)
}

// CreateChargeType mocks base method.
func (m *MockStore) CreateChargeType(arg0 context.Context, arg1 db1.ChargeTypeRequest) (model.ChargeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChargeType", arg0, arg1)
	ret0, _ := ret[0].(model.ChargeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChargeType indicates an expected call of CreateChargeType.
func (mr *MockStoreMockRecorder) CreateChargeType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChargeType", reflect.TypeOf((*MockStore)(nil).CreateChargeType), arg0, arg1)
}

// CreateChartofAccount mocks base method.
func (m *MockStore) CreateChartofAccount(arg0 context.Context, arg1 db5.ChartofAccountRequest) (model.ChartofAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChartofAccount", arg0, arg1)
	ret0, _ := ret[0].(model.ChartofAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChartofAccount indicates an expected call of CreateChartofAccount.
func (mr *MockStoreMockRecorder) CreateChartofAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChartofAccount", reflect.TypeOf((*MockStore)(nil).CreateChartofAccount), arg0, arg1)
}

// CreateCoaParent mocks base method.
func (m *MockStore) CreateCoaParent(arg0 context.Context, arg1 db5.CoaParentRequest) (model.CoaParent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoaParent", arg0, arg1)
	ret0, _ := ret[0].(model.CoaParent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCoaParent indicates an expected call of CreateCoaParent.
func (mr *MockStoreMockRecorder) CreateCoaParent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoaParent", reflect.TypeOf((*MockStore)(nil).CreateCoaParent), arg0, arg1)
}

// CreateComment mocks base method.
func (m *MockStore) CreateComment(arg0 context.Context, arg1 db6.CommentRequest) (model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockStoreMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockStore)(nil).CreateComment), arg0, arg1)
}

// CreateContact mocks base method.
func (m *MockStore) CreateContact(arg0 context.Context, arg1 db4.ContactRequest) (model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", arg0, arg1)
	ret0, _ := ret[0].(model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockStoreMockRecorder) CreateContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockStore)(nil).CreateContact), arg0, arg1)
}

// CreateCustomer mocks base method.
func (m *MockStore) CreateCustomer(arg0 context.Context, arg1 db2.CustomerRequest) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0, arg1)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockStoreMockRecorder) CreateCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockStore)(nil).CreateCustomer), arg0, arg1)
}

// CreateCustomerBeneficiary mocks base method.
func (m *MockStore) CreateCustomerBeneficiary(arg0 context.Context, arg1 db2.CustomerBeneficiaryRequest) (model.CustomerBeneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerBeneficiary", arg0, arg1)
	ret0, _ := ret[0].(model.CustomerBeneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerBeneficiary indicates an expected call of CreateCustomerBeneficiary.
func (mr *MockStoreMockRecorder) CreateCustomerBeneficiary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerBeneficiary", reflect.TypeOf((*MockStore)(nil).CreateCustomerBeneficiary), arg0, arg1)
}

// CreateCustomerEvent mocks base method.
func (m *MockStore) CreateCustomerEvent(arg0 context.Context, arg1 db7.CustomerEventRequest) (model.CustomerEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerEvent", arg0, arg1)
	ret0, _ := ret[0].(model.CustomerEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerEvent indicates an expected call of CreateCustomerEvent.
func (mr *MockStoreMockRecorder) CreateCustomerEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerEvent", reflect.TypeOf((*MockStore)(nil).CreateCustomerEvent), arg0, arg1)
}

// CreateCustomerGroup mocks base method.
func (m *MockStore) CreateCustomerGroup(arg0 context.Context, arg1 db2.CustomerGroupRequest) (model.CustomerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomerGroup", arg0, arg1)
	ret0, _ := ret[0].(model.CustomerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomerGroup indicates an expected call of CreateCustomerGroup.
func (mr *MockStoreMockRecorder) CreateCustomerGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomerGroup", reflect.TypeOf((*MockStore)(nil).CreateCustomerGroup), arg0, arg1)
}

// CreateDocument mocks base method.
func (m *MockStore) CreateDocument(arg0 context.Context, arg1 db3.DocumentRequest) (model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDocument", arg0, arg1)
	ret0, _ := ret[0].(model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDocument indicates an expected call of CreateDocument.
func (mr *MockStoreMockRecorder) CreateDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDocument", reflect.TypeOf((*MockStore)(nil).CreateDocument), arg0, arg1)
}

// CreateEducational mocks base method.
func (m *MockStore) CreateEducational(arg0 context.Context, arg1 db4.EducationalRequest) (model.Educational, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEducational", arg0, arg1)
	ret0, _ := ret[0].(model.Educational)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEducational indicates an expected call of CreateEducational.
func (mr *MockStoreMockRecorder) CreateEducational(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEducational", reflect.TypeOf((*MockStore)(nil).CreateEducational), arg0, arg1)
}

// CreateEmployee mocks base method.
func (m *MockStore) CreateEmployee(arg0 context.Context, arg1 db4.EmployeeRequest) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", arg0, arg1)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockStoreMockRecorder) CreateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockStore)(nil).CreateEmployee), arg0, arg1)
}

// CreateEmployeeEvent mocks base method.
func (m *MockStore) CreateEmployeeEvent(arg0 context.Context, arg1 db7.EmployeeEventRequest) (model.EmployeeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployeeEvent", arg0, arg1)
	ret0, _ := ret[0].(model.EmployeeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployeeEvent indicates an expected call of CreateEmployeeEvent.
func (mr *MockStoreMockRecorder) CreateEmployeeEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployeeEvent", reflect.TypeOf((*MockStore)(nil).CreateEmployeeEvent), arg0, arg1)
}

// CreateEmployment mocks base method.
func (m *MockStore) CreateEmployment(arg0 context.Context, arg1 db4.EmploymentRequest) (model.Employment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployment", arg0, arg1)
	ret0, _ := ret[0].(model.Employment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployment indicates an expected call of CreateEmployment.
func (mr *MockStoreMockRecorder) CreateEmployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployment", reflect.TypeOf((*MockStore)(nil).CreateEmployment), arg0, arg1)
}

// CreateEntry mocks base method.
func (m *MockStore) CreateEntry(arg0 context.Context, arg1 db7.CreateEntryParams) (model.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntry", arg0, arg1)
	ret0, _ := ret[0].(model.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry.
func (mr *MockStoreMockRecorder) CreateEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntry", reflect.TypeOf((*MockStore)(nil).CreateEntry), arg0, arg1)
}

// CreateFollower mocks base method.
func (m *MockStore) CreateFollower(arg0 context.Context, arg1 db6.FollowerRequest) (model.Follower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFollower", arg0, arg1)
	ret0, _ := ret[0].(model.Follower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFollower indicates an expected call of CreateFollower.
func (mr *MockStoreMockRecorder) CreateFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFollower", reflect.TypeOf((*MockStore)(nil).CreateFollower), arg0, arg1)
}

// CreateFxrate mocks base method.
func (m *MockStore) CreateFxrate(arg0 context.Context, arg1 db5.FxrateRequest) (model.Fxrate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFxrate", arg0, arg1)
	ret0, _ := ret[0].(model.Fxrate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFxrate indicates an expected call of CreateFxrate.
func (mr *MockStoreMockRecorder) CreateFxrate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFxrate", reflect.TypeOf((*MockStore)(nil).CreateFxrate), arg0, arg1)
}

// CreateGeography mocks base method.
func (m *MockStore) CreateGeography(arg0 context.Context, arg1 db5.GeographyRequest) (model.Geography, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGeography", arg0, arg1)
	ret0, _ := ret[0].(model.Geography)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGeography indicates an expected call of CreateGeography.
func (mr *MockStoreMockRecorder) CreateGeography(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeography", reflect.TypeOf((*MockStore)(nil).CreateGeography), arg0, arg1)
}

// CreateGlAccount mocks base method.
func (m *MockStore) CreateGlAccount(arg0 context.Context, arg1 db1.GlAccountRequest) (model.GlAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlAccount", arg0, arg1)
	ret0, _ := ret[0].(model.GlAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlAccount indicates an expected call of CreateGlAccount.
func (mr *MockStoreMockRecorder) CreateGlAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlAccount", reflect.TypeOf((*MockStore)(nil).CreateGlAccount), arg0, arg1)
}

// CreateIdentityInfo mocks base method.
func (m *MockStore) CreateIdentityInfo(arg0 context.Context, arg1 db4.IdentityInfoRequest) (model.IdentityInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityInfo", arg0, arg1)
	ret0, _ := ret[0].(model.IdentityInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentityInfo indicates an expected call of CreateIdentityInfo.
func (mr *MockStoreMockRecorder) CreateIdentityInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityInfo", reflect.TypeOf((*MockStore)(nil).CreateIdentityInfo), arg0, arg1)
}

// CreateIds mocks base method.
func (m *MockStore) CreateIds(arg0 context.Context, arg1 db4.IdsRequest) (model.Ids, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIds", arg0, arg1)
	ret0, _ := ret[0].(model.Ids)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIds indicates an expected call of CreateIds.
func (mr *MockStoreMockRecorder) CreateIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIds", reflect.TypeOf((*MockStore)(nil).CreateIds), arg0, arg1)
}

// CreateIncomeSource mocks base method.
func (m *MockStore) CreateIncomeSource(arg0 context.Context, arg1 db4.IncomeSourceRequest) (model.IncomeSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIncomeSource", arg0, arg1)
	ret0, _ := ret[0].(model.IncomeSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIncomeSource indicates an expected call of CreateIncomeSource.
func (mr *MockStoreMockRecorder) CreateIncomeSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIncomeSource", reflect.TypeOf((*MockStore)(nil).CreateIncomeSource), arg0, arg1)
}

// CreateJournalDetail mocks base method.
func (m *MockStore) CreateJournalDetail(arg0 context.Context, arg1 db7.JournalDetailRequest) (model.JournalDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJournalDetail", arg0, arg1)
	ret0, _ := ret[0].(model.JournalDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJournalDetail indicates an expected call of CreateJournalDetail.
func (mr *MockStoreMockRecorder) CreateJournalDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJournalDetail", reflect.TypeOf((*MockStore)(nil).CreateJournalDetail), arg0, arg1)
}

// CreateOffice mocks base method.
func (m *MockStore) CreateOffice(arg0 context.Context, arg1 db4.OfficeRequest) (model.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffice", arg0, arg1)
	ret0, _ := ret[0].(model.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffice indicates an expected call of CreateOffice.
func (mr *MockStoreMockRecorder) CreateOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffice", reflect.TypeOf((*MockStore)(nil).CreateOffice), arg0, arg1)
}

// CreateOfficeAccount mocks base method.
func (m *MockStore) CreateOfficeAccount(arg0 context.Context, arg1 db1.OfficeAccountRequest) (model.OfficeAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOfficeAccount", arg0, arg1)
	ret0, _ := ret[0].(model.OfficeAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOfficeAccount indicates an expected call of CreateOfficeAccount.
func (mr *MockStoreMockRecorder) CreateOfficeAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOfficeAccount", reflect.TypeOf((*MockStore)(nil).CreateOfficeAccount), arg0, arg1)
}

// CreateOfficeAccountTran mocks base method.
func (m *MockStore) CreateOfficeAccountTran(arg0 context.Context, arg1 db7.OfficeAccountTranRequest) (model.OfficeAccountTran, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOfficeAccountTran", arg0, arg1)
	ret0, _ := ret[0].(model.OfficeAccountTran)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOfficeAccountTran indicates an expected call of CreateOfficeAccountTran.
func (mr *MockStoreMockRecorder) CreateOfficeAccountTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOfficeAccountTran", reflect.TypeOf((*MockStore)(nil).CreateOfficeAccountTran), arg0, arg1)
}

// CreateOfficeAccountType mocks base method.
func (m *MockStore) CreateOfficeAccountType(arg0 context.Context, arg1 db1.OfficeAccountTypeRequest) (model.OfficeAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOfficeAccountType", arg0, arg1)
	ret0, _ := ret[0].(model.OfficeAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOfficeAccountType indicates an expected call of CreateOfficeAccountType.
func (mr *MockStoreMockRecorder) CreateOfficeAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOfficeAccountType", reflect.TypeOf((*MockStore)(nil).CreateOfficeAccountType), arg0, arg1)
}

// CreateOtherSchedule mocks base method.
func (m *MockStore) CreateOtherSchedule(arg0 context.Context, arg1 db1.OtherScheduleRequest) (model.OtherSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOtherSchedule", arg0, arg1)
	ret0, _ := ret[0].(model.OtherSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOtherSchedule indicates an expected call of CreateOtherSchedule.
func (mr *MockStoreMockRecorder) CreateOtherSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtherSchedule", reflect.TypeOf((*MockStore)(nil).CreateOtherSchedule), arg0, arg1)
}

// CreatePersonalInfo mocks base method.
func (m *MockStore) CreatePersonalInfo(arg0 context.Context, arg1 db4.PersonalInfoRequest) (model.PersonalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePersonalInfo", arg0, arg1)
	ret0, _ := ret[0].(model.PersonalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePersonalInfo indicates an expected call of CreatePersonalInfo.
func (mr *MockStoreMockRecorder) CreatePersonalInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersonalInfo", reflect.TypeOf((*MockStore)(nil).CreatePersonalInfo), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockStore) CreatePost(arg0 context.Context, arg1 db6.PostRequest) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockStoreMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStore)(nil).CreatePost), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(arg0 context.Context, arg1 db1.ProductRequest) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), arg0, arg1)
}

// CreateReference mocks base method.
func (m *MockStore) CreateReference(arg0 context.Context, arg1 db5.ReferenceRequest) (model.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReference", arg0, arg1)
	ret0, _ := ret[0].(model.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReference indicates an expected call of CreateReference.
func (mr *MockStoreMockRecorder) CreateReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReference", reflect.TypeOf((*MockStore)(nil).CreateReference), arg0, arg1)
}

// CreateReferenceType mocks base method.
func (m *MockStore) CreateReferenceType(arg0 context.Context, arg1 db5.ReferenceTypeRequest) (model.ReferenceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferenceType", arg0, arg1)
	ret0, _ := ret[0].(model.ReferenceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReferenceType indicates an expected call of CreateReferenceType.
func (mr *MockStoreMockRecorder) CreateReferenceType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferenceType", reflect.TypeOf((*MockStore)(nil).CreateReferenceType), arg0, arg1)
}

// CreateRelation mocks base method.
func (m *MockStore) CreateRelation(arg0 context.Context, arg1 db4.RelationRequest) (model.Relation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelation", arg0, arg1)
	ret0, _ := ret[0].(model.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRelation indicates an expected call of CreateRelation.
func (mr *MockStoreMockRecorder) CreateRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelation", reflect.TypeOf((*MockStore)(nil).CreateRelation), arg0, arg1)
}

// CreateSchedule mocks base method.
func (m *MockStore) CreateSchedule(arg0 context.Context, arg1 db1.ScheduleRequest) (model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", arg0, arg1)
	ret0, _ := ret[0].(model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockStoreMockRecorder) CreateSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockStore)(nil).CreateSchedule), arg0, arg1)
}

// CreateSocialMediaCredential mocks base method.
func (m *MockStore) CreateSocialMediaCredential(arg0 context.Context, arg1 db8.SocialMediaCredentialRequest) (model.SocialMediaCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSocialMediaCredential", arg0, arg1)
	ret0, _ := ret[0].(model.SocialMediaCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSocialMediaCredential indicates an expected call of CreateSocialMediaCredential.
func (mr *MockStoreMockRecorder) CreateSocialMediaCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSocialMediaCredential", reflect.TypeOf((*MockStore)(nil).CreateSocialMediaCredential), arg0, arg1)
}

// CreateStorage mocks base method.
func (m *MockStore) CreateStorage(arg0 context.Context, arg1 db3.StorageRequest) (model.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorage", arg0, arg1)
	ret0, _ := ret[0].(model.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorage indicates an expected call of CreateStorage.
func (mr *MockStoreMockRecorder) CreateStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorage", reflect.TypeOf((*MockStore)(nil).CreateStorage), arg0, arg1)
}

// CreateSystemConfig mocks base method.
func (m *MockStore) CreateSystemConfig(arg0 context.Context, arg1 db5.SystemConfigRequest) (model.SystemConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSystemConfig", arg0, arg1)
	ret0, _ := ret[0].(model.SystemConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSystemConfig indicates an expected call of CreateSystemConfig.
func (mr *MockStoreMockRecorder) CreateSystemConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSystemConfig", reflect.TypeOf((*MockStore)(nil).CreateSystemConfig), arg0, arg1)
}

// CreateTicket mocks base method.
func (m *MockStore) CreateTicket(arg0 context.Context, arg1 db7.TicketRequest) (model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", arg0, arg1)
	ret0, _ := ret[0].(model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockStoreMockRecorder) CreateTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockStore)(nil).CreateTicket), arg0, arg1)
}

// CreateTransfer mocks base method.
func (m *MockStore) CreateTransfer(arg0 context.Context, arg1 db7.CreateTransferParams) (model.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfer", arg0, arg1)
	ret0, _ := ret[0].(model.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfer indicates an expected call of CreateTransfer.
func (mr *MockStoreMockRecorder) CreateTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfer", reflect.TypeOf((*MockStore)(nil).CreateTransfer), arg0, arg1)
}

// CreateTrnAction mocks base method.
func (m *MockStore) CreateTrnAction(arg0 context.Context, arg1 db7.TrnActionRequest) (model.TrnAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrnAction", arg0, arg1)
	ret0, _ := ret[0].(model.TrnAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrnAction indicates an expected call of CreateTrnAction.
func (mr *MockStoreMockRecorder) CreateTrnAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrnAction", reflect.TypeOf((*MockStore)(nil).CreateTrnAction), arg0, arg1)
}

// CreateTrnHeadRelation mocks base method.
func (m *MockStore) CreateTrnHeadRelation(arg0 context.Context, arg1 db7.TrnHeadRelationRequest) (model.TrnHeadRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrnHeadRelation", arg0, arg1)
	ret0, _ := ret[0].(model.TrnHeadRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrnHeadRelation indicates an expected call of CreateTrnHeadRelation.
func (mr *MockStoreMockRecorder) CreateTrnHeadRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrnHeadRelation", reflect.TypeOf((*MockStore)(nil).CreateTrnHeadRelation), arg0, arg1)
}

// CreateUnitConversion mocks base method.
func (m *MockStore) CreateUnitConversion(arg0 context.Context, arg1 db5.UnitConversionRequest) (model.UnitConversion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnitConversion", arg0, arg1)
	ret0, _ := ret[0].(model.UnitConversion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnitConversion indicates an expected call of CreateUnitConversion.
func (mr *MockStoreMockRecorder) CreateUnitConversion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnitConversion", reflect.TypeOf((*MockStore)(nil).CreateUnitConversion), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db8.UserRequest) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserAccountType mocks base method.
func (m *MockStore) CreateUserAccountType(arg0 context.Context, arg1 db8.UserAccountTypeRequest) (model.UserAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccountType", arg0, arg1)
	ret0, _ := ret[0].(model.UserAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAccountType indicates an expected call of CreateUserAccountType.
func (mr *MockStoreMockRecorder) CreateUserAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccountType", reflect.TypeOf((*MockStore)(nil).CreateUserAccountType), arg0, arg1)
}

// CreateUserConfig mocks base method.
func (m *MockStore) CreateUserConfig(arg0 context.Context, arg1 db8.UserConfigRequest) (model.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserConfig", arg0, arg1)
	ret0, _ := ret[0].(model.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserConfig indicates an expected call of CreateUserConfig.
func (mr *MockStoreMockRecorder) CreateUserConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserConfig", reflect.TypeOf((*MockStore)(nil).CreateUserConfig), arg0, arg1)
}

// CreateUserObject mocks base method.
func (m *MockStore) CreateUserObject(arg0 context.Context, arg1 db8.UserObjectRequest) (model.UserObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserObject", arg0, arg1)
	ret0, _ := ret[0].(model.UserObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserObject indicates an expected call of CreateUserObject.
func (mr *MockStoreMockRecorder) CreateUserObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserObject", reflect.TypeOf((*MockStore)(nil).CreateUserObject), arg0, arg1)
}

// CreateUserOffice mocks base method.
func (m *MockStore) CreateUserOffice(arg0 context.Context, arg1 db8.UserOfficeRequest) (model.UserOffice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserOffice", arg0, arg1)
	ret0, _ := ret[0].(model.UserOffice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserOffice indicates an expected call of CreateUserOffice.
func (mr *MockStoreMockRecorder) CreateUserOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserOffice", reflect.TypeOf((*MockStore)(nil).CreateUserOffice), arg0, arg1)
}

// CreateUserProduct mocks base method.
func (m *MockStore) CreateUserProduct(arg0 context.Context, arg1 db8.UserProductRequest) (model.UserProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProduct", arg0, arg1)
	ret0, _ := ret[0].(model.UserProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserProduct indicates an expected call of CreateUserProduct.
func (mr *MockStoreMockRecorder) CreateUserProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProduct", reflect.TypeOf((*MockStore)(nil).CreateUserProduct), arg0, arg1)
}

// DeleteAccessAccountType mocks base method.
func (m *MockStore) DeleteAccessAccountType(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessAccountType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessAccountType indicates an expected call of DeleteAccessAccountType.
func (mr *MockStoreMockRecorder) DeleteAccessAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessAccountType", reflect.TypeOf((*MockStore)(nil).DeleteAccessAccountType), arg0, arg1)
}

// DeleteAccessConfig mocks base method.
func (m *MockStore) DeleteAccessConfig(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessConfig indicates an expected call of DeleteAccessConfig.
func (mr *MockStoreMockRecorder) DeleteAccessConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessConfig", reflect.TypeOf((*MockStore)(nil).DeleteAccessConfig), arg0, arg1)
}

// DeleteAccessObject mocks base method.
func (m *MockStore) DeleteAccessObject(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessObject indicates an expected call of DeleteAccessObject.
func (mr *MockStoreMockRecorder) DeleteAccessObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessObject", reflect.TypeOf((*MockStore)(nil).DeleteAccessObject), arg0, arg1)
}

// DeleteAccessProduct mocks base method.
func (m *MockStore) DeleteAccessProduct(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessProduct indicates an expected call of DeleteAccessProduct.
func (mr *MockStoreMockRecorder) DeleteAccessProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessProduct", reflect.TypeOf((*MockStore)(nil).DeleteAccessProduct), arg0, arg1)
}

// DeleteAccessRole mocks base method.
func (m *MockStore) DeleteAccessRole(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessRole indicates an expected call of DeleteAccessRole.
func (mr *MockStoreMockRecorder) DeleteAccessRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessRole", reflect.TypeOf((*MockStore)(nil).DeleteAccessRole), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockStore) DeleteAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockStoreMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), arg0, arg1)
}

// DeleteAccountBeneficiary mocks base method.
func (m *MockStore) DeleteAccountBeneficiary(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountBeneficiary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountBeneficiary indicates an expected call of DeleteAccountBeneficiary.
func (mr *MockStoreMockRecorder) DeleteAccountBeneficiary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountBeneficiary", reflect.TypeOf((*MockStore)(nil).DeleteAccountBeneficiary), arg0, arg1)
}

// DeleteAccountClass mocks base method.
func (m *MockStore) DeleteAccountClass(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountClass", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountClass indicates an expected call of DeleteAccountClass.
func (mr *MockStoreMockRecorder) DeleteAccountClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountClass", reflect.TypeOf((*MockStore)(nil).DeleteAccountClass), arg0, arg1)
}

// DeleteAccountInterest mocks base method.
func (m *MockStore) DeleteAccountInterest(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountInterest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountInterest indicates an expected call of DeleteAccountInterest.
func (mr *MockStoreMockRecorder) DeleteAccountInterest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountInterest", reflect.TypeOf((*MockStore)(nil).DeleteAccountInterest), arg0, arg1)
}

// DeleteAccountInventory mocks base method.
func (m *MockStore) DeleteAccountInventory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountInventory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountInventory indicates an expected call of DeleteAccountInventory.
func (mr *MockStoreMockRecorder) DeleteAccountInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountInventory", reflect.TypeOf((*MockStore)(nil).DeleteAccountInventory), arg0, arg1)
}

// DeleteAccountInventoryTran mocks base method.
func (m *MockStore) DeleteAccountInventoryTran(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountInventoryTran", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountInventoryTran indicates an expected call of DeleteAccountInventoryTran.
func (mr *MockStoreMockRecorder) DeleteAccountInventoryTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountInventoryTran", reflect.TypeOf((*MockStore)(nil).DeleteAccountInventoryTran), arg0, arg1)
}

// DeleteAccountParam mocks base method.
func (m *MockStore) DeleteAccountParam(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountParam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountParam indicates an expected call of DeleteAccountParam.
func (mr *MockStoreMockRecorder) DeleteAccountParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountParam", reflect.TypeOf((*MockStore)(nil).DeleteAccountParam), arg0, arg1)
}

// DeleteAccountTerm mocks base method.
func (m *MockStore) DeleteAccountTerm(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountTerm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountTerm indicates an expected call of DeleteAccountTerm.
func (mr *MockStoreMockRecorder) DeleteAccountTerm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountTerm", reflect.TypeOf((*MockStore)(nil).DeleteAccountTerm), arg0, arg1)
}

// DeleteAccountTran mocks base method.
func (m *MockStore) DeleteAccountTran(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountTran", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountTran indicates an expected call of DeleteAccountTran.
func (mr *MockStoreMockRecorder) DeleteAccountTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountTran", reflect.TypeOf((*MockStore)(nil).DeleteAccountTran), arg0, arg1)
}

// DeleteAccountType mocks base method.
func (m *MockStore) DeleteAccountType(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccountType indicates an expected call of DeleteAccountType.
func (mr *MockStoreMockRecorder) DeleteAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountType", reflect.TypeOf((*MockStore)(nil).DeleteAccountType), arg0, arg1)
}

// DeleteActionTicket mocks base method.
func (m *MockStore) DeleteActionTicket(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActionTicket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActionTicket indicates an expected call of DeleteActionTicket.
func (mr *MockStoreMockRecorder) DeleteActionTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActionTicket", reflect.TypeOf((*MockStore)(nil).DeleteActionTicket), arg0, arg1)
}

// DeleteAddressList mocks base method.
func (m *MockStore) DeleteAddressList(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddressList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddressList indicates an expected call of DeleteAddressList.
func (mr *MockStoreMockRecorder) DeleteAddressList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddressList", reflect.TypeOf((*MockStore)(nil).DeleteAddressList), arg0, arg1)
}

// DeleteChargeType mocks base method.
func (m *MockStore) DeleteChargeType(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChargeType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChargeType indicates an expected call of DeleteChargeType.
func (mr *MockStoreMockRecorder) DeleteChargeType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChargeType", reflect.TypeOf((*MockStore)(nil).DeleteChargeType), arg0, arg1)
}

// DeleteChartofAccount mocks base method.
func (m *MockStore) DeleteChartofAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChartofAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChartofAccount indicates an expected call of DeleteChartofAccount.
func (mr *MockStoreMockRecorder) DeleteChartofAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChartofAccount", reflect.TypeOf((*MockStore)(nil).DeleteChartofAccount), arg0, arg1)
}

// DeleteCoaParent mocks base method.
func (m *MockStore) DeleteCoaParent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCoaParent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCoaParent indicates an expected call of DeleteCoaParent.
func (mr *MockStoreMockRecorder) DeleteCoaParent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCoaParent", reflect.TypeOf((*MockStore)(nil).DeleteCoaParent), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockStore) DeleteComment(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockStoreMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockStore)(nil).DeleteComment), arg0, arg1)
}

// DeleteContact mocks base method.
func (m *MockStore) DeleteContact(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContact indicates an expected call of DeleteContact.
func (mr *MockStoreMockRecorder) DeleteContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContact", reflect.TypeOf((*MockStore)(nil).DeleteContact), arg0, arg1)
}

// DeleteCustomer mocks base method.
func (m *MockStore) DeleteCustomer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockStoreMockRecorder) DeleteCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockStore)(nil).DeleteCustomer), arg0, arg1)
}

// DeleteCustomerBeneficiary mocks base method.
func (m *MockStore) DeleteCustomerBeneficiary(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerBeneficiary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerBeneficiary indicates an expected call of DeleteCustomerBeneficiary.
func (mr *MockStoreMockRecorder) DeleteCustomerBeneficiary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerBeneficiary", reflect.TypeOf((*MockStore)(nil).DeleteCustomerBeneficiary), arg0, arg1)
}

// DeleteCustomerEvent mocks base method.
func (m *MockStore) DeleteCustomerEvent(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerEvent indicates an expected call of DeleteCustomerEvent.
func (mr *MockStoreMockRecorder) DeleteCustomerEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerEvent", reflect.TypeOf((*MockStore)(nil).DeleteCustomerEvent), arg0, arg1)
}

// DeleteCustomerGroup mocks base method.
func (m *MockStore) DeleteCustomerGroup(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomerGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomerGroup indicates an expected call of DeleteCustomerGroup.
func (mr *MockStoreMockRecorder) DeleteCustomerGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomerGroup", reflect.TypeOf((*MockStore)(nil).DeleteCustomerGroup), arg0, arg1)
}

// DeleteDocument mocks base method.
func (m *MockStore) DeleteDocument(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocument", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDocument indicates an expected call of DeleteDocument.
func (mr *MockStoreMockRecorder) DeleteDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocument", reflect.TypeOf((*MockStore)(nil).DeleteDocument), arg0, arg1)
}

// DeleteEducational mocks base method.
func (m *MockStore) DeleteEducational(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEducational", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEducational indicates an expected call of DeleteEducational.
func (mr *MockStoreMockRecorder) DeleteEducational(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEducational", reflect.TypeOf((*MockStore)(nil).DeleteEducational), arg0, arg1)
}

// DeleteEmployee mocks base method.
func (m *MockStore) DeleteEmployee(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockStoreMockRecorder) DeleteEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockStore)(nil).DeleteEmployee), arg0, arg1)
}

// DeleteEmployeeEvent mocks base method.
func (m *MockStore) DeleteEmployeeEvent(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployeeEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployeeEvent indicates an expected call of DeleteEmployeeEvent.
func (mr *MockStoreMockRecorder) DeleteEmployeeEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployeeEvent", reflect.TypeOf((*MockStore)(nil).DeleteEmployeeEvent), arg0, arg1)
}

// DeleteEmployment mocks base method.
func (m *MockStore) DeleteEmployment(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployment indicates an expected call of DeleteEmployment.
func (mr *MockStoreMockRecorder) DeleteEmployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployment", reflect.TypeOf((*MockStore)(nil).DeleteEmployment), arg0, arg1)
}

// DeleteFollower mocks base method.
func (m *MockStore) DeleteFollower(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFollower", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFollower indicates an expected call of DeleteFollower.
func (mr *MockStoreMockRecorder) DeleteFollower(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollower", reflect.TypeOf((*MockStore)(nil).DeleteFollower), arg0, arg1, arg2)
}

// DeleteFxrate mocks base method.
func (m *MockStore) DeleteFxrate(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFxrate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFxrate indicates an expected call of DeleteFxrate.
func (mr *MockStoreMockRecorder) DeleteFxrate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFxrate", reflect.TypeOf((*MockStore)(nil).DeleteFxrate), arg0, arg1)
}

// DeleteGeography mocks base method.
func (m *MockStore) DeleteGeography(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGeography", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGeography indicates an expected call of DeleteGeography.
func (mr *MockStoreMockRecorder) DeleteGeography(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeography", reflect.TypeOf((*MockStore)(nil).DeleteGeography), arg0, arg1)
}

// DeleteGlAccount mocks base method.
func (m *MockStore) DeleteGlAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGlAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGlAccount indicates an expected call of DeleteGlAccount.
func (mr *MockStoreMockRecorder) DeleteGlAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGlAccount", reflect.TypeOf((*MockStore)(nil).DeleteGlAccount), arg0, arg1)
}

// DeleteIdentityInfo mocks base method.
func (m *MockStore) DeleteIdentityInfo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentityInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentityInfo indicates an expected call of DeleteIdentityInfo.
func (mr *MockStoreMockRecorder) DeleteIdentityInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityInfo", reflect.TypeOf((*MockStore)(nil).DeleteIdentityInfo), arg0, arg1)
}

// DeleteIds mocks base method.
func (m *MockStore) DeleteIds(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIds", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIds indicates an expected call of DeleteIds.
func (mr *MockStoreMockRecorder) DeleteIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIds", reflect.TypeOf((*MockStore)(nil).DeleteIds), arg0, arg1)
}

// DeleteIncomeSource mocks base method.
func (m *MockStore) DeleteIncomeSource(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIncomeSource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIncomeSource indicates an expected call of DeleteIncomeSource.
func (mr *MockStoreMockRecorder) DeleteIncomeSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncomeSource", reflect.TypeOf((*MockStore)(nil).DeleteIncomeSource), arg0, arg1)
}

// DeleteJournalDetail mocks base method.
func (m *MockStore) DeleteJournalDetail(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJournalDetail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJournalDetail indicates an expected call of DeleteJournalDetail.
func (mr *MockStoreMockRecorder) DeleteJournalDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJournalDetail", reflect.TypeOf((*MockStore)(nil).DeleteJournalDetail), arg0, arg1)
}

// DeleteOffice mocks base method.
func (m *MockStore) DeleteOffice(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOffice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOffice indicates an expected call of DeleteOffice.
func (mr *MockStoreMockRecorder) DeleteOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOffice", reflect.TypeOf((*MockStore)(nil).DeleteOffice), arg0, arg1)
}

// DeleteOfficeAccount mocks base method.
func (m *MockStore) DeleteOfficeAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfficeAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfficeAccount indicates an expected call of DeleteOfficeAccount.
func (mr *MockStoreMockRecorder) DeleteOfficeAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfficeAccount", reflect.TypeOf((*MockStore)(nil).DeleteOfficeAccount), arg0, arg1)
}

// DeleteOfficeAccountTran mocks base method.
func (m *MockStore) DeleteOfficeAccountTran(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfficeAccountTran", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfficeAccountTran indicates an expected call of DeleteOfficeAccountTran.
func (mr *MockStoreMockRecorder) DeleteOfficeAccountTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfficeAccountTran", reflect.TypeOf((*MockStore)(nil).DeleteOfficeAccountTran), arg0, arg1)
}

// DeleteOfficeAccountType mocks base method.
func (m *MockStore) DeleteOfficeAccountType(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOfficeAccountType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOfficeAccountType indicates an expected call of DeleteOfficeAccountType.
func (mr *MockStoreMockRecorder) DeleteOfficeAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOfficeAccountType", reflect.TypeOf((*MockStore)(nil).DeleteOfficeAccountType), arg0, arg1)
}

// DeleteOtherSchedule mocks base method.
func (m *MockStore) DeleteOtherSchedule(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOtherSchedule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOtherSchedule indicates an expected call of DeleteOtherSchedule.
func (mr *MockStoreMockRecorder) DeleteOtherSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOtherSchedule", reflect.TypeOf((*MockStore)(nil).DeleteOtherSchedule), arg0, arg1)
}

// DeletePersonalInfo mocks base method.
func (m *MockStore) DeletePersonalInfo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonalInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePersonalInfo indicates an expected call of DeletePersonalInfo.
func (mr *MockStoreMockRecorder) DeletePersonalInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonalInfo", reflect.TypeOf((*MockStore)(nil).DeletePersonalInfo), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockStore) DeletePost(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockStoreMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), arg0, arg1)
}

// DeleteReference mocks base method.
func (m *MockStore) DeleteReference(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReference", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReference indicates an expected call of DeleteReference.
func (mr *MockStoreMockRecorder) DeleteReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReference", reflect.TypeOf((*MockStore)(nil).DeleteReference), arg0, arg1)
}

// DeleteReferenceType mocks base method.
func (m *MockStore) DeleteReferenceType(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReferenceType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReferenceType indicates an expected call of DeleteReferenceType.
func (mr *MockStoreMockRecorder) DeleteReferenceType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReferenceType", reflect.TypeOf((*MockStore)(nil).DeleteReferenceType), arg0, arg1)
}

// DeleteRelation mocks base method.
func (m *MockStore) DeleteRelation(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelation indicates an expected call of DeleteRelation.
func (mr *MockStoreMockRecorder) DeleteRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelation", reflect.TypeOf((*MockStore)(nil).DeleteRelation), arg0, arg1)
}

// DeleteSchedule mocks base method.
func (m *MockStore) DeleteSchedule(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchedule indicates an expected call of DeleteSchedule.
func (mr *MockStoreMockRecorder) DeleteSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockStore)(nil).DeleteSchedule), arg0, arg1)
}

// DeleteSocialMediaCredential mocks base method.
func (m *MockStore) DeleteSocialMediaCredential(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSocialMediaCredential", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSocialMediaCredential indicates an expected call of DeleteSocialMediaCredential.
func (mr *MockStoreMockRecorder) DeleteSocialMediaCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSocialMediaCredential", reflect.TypeOf((*MockStore)(nil).DeleteSocialMediaCredential), arg0, arg1)
}

// DeleteStorage mocks base method.
func (m *MockStore) DeleteStorage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStorage indicates an expected call of DeleteStorage.
func (mr *MockStoreMockRecorder) DeleteStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorage", reflect.TypeOf((*MockStore)(nil).DeleteStorage), arg0, arg1)
}

// DeleteSystemConfig mocks base method.
func (m *MockStore) DeleteSystemConfig(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSystemConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSystemConfig indicates an expected call of DeleteSystemConfig.
func (mr *MockStoreMockRecorder) DeleteSystemConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSystemConfig", reflect.TypeOf((*MockStore)(nil).DeleteSystemConfig), arg0, arg1)
}

// DeleteTicket mocks base method.
func (m *MockStore) DeleteTicket(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTicket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTicket indicates an expected call of DeleteTicket.
func (mr *MockStoreMockRecorder) DeleteTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTicket", reflect.TypeOf((*MockStore)(nil).DeleteTicket), arg0, arg1)
}

// DeleteTrnAction mocks base method.
func (m *MockStore) DeleteTrnAction(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrnAction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrnAction indicates an expected call of DeleteTrnAction.
func (mr *MockStoreMockRecorder) DeleteTrnAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrnAction", reflect.TypeOf((*MockStore)(nil).DeleteTrnAction), arg0, arg1)
}

// DeleteTrnHeadRelation mocks base method.
func (m *MockStore) DeleteTrnHeadRelation(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrnHeadRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrnHeadRelation indicates an expected call of DeleteTrnHeadRelation.
func (mr *MockStoreMockRecorder) DeleteTrnHeadRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrnHeadRelation", reflect.TypeOf((*MockStore)(nil).DeleteTrnHeadRelation), arg0, arg1)
}

// DeleteUnitConversion mocks base method.
func (m *MockStore) DeleteUnitConversion(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnitConversion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnitConversion indicates an expected call of DeleteUnitConversion.
func (mr *MockStoreMockRecorder) DeleteUnitConversion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnitConversion", reflect.TypeOf((*MockStore)(nil).DeleteUnitConversion), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserAccountType mocks base method.
func (m *MockStore) DeleteUserAccountType(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAccountType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAccountType indicates an expected call of DeleteUserAccountType.
func (mr *MockStoreMockRecorder) DeleteUserAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAccountType", reflect.TypeOf((*MockStore)(nil).DeleteUserAccountType), arg0, arg1)
}

// DeleteUserConfig mocks base method.
func (m *MockStore) DeleteUserConfig(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserConfig indicates an expected call of DeleteUserConfig.
func (mr *MockStoreMockRecorder) DeleteUserConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserConfig", reflect.TypeOf((*MockStore)(nil).DeleteUserConfig), arg0, arg1)
}

// DeleteUserObject mocks base method.
func (m *MockStore) DeleteUserObject(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserObject indicates an expected call of DeleteUserObject.
func (mr *MockStoreMockRecorder) DeleteUserObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserObject", reflect.TypeOf((*MockStore)(nil).DeleteUserObject), arg0, arg1)
}

// DeleteUserOffice mocks base method.
func (m *MockStore) DeleteUserOffice(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserOffice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserOffice indicates an expected call of DeleteUserOffice.
func (mr *MockStoreMockRecorder) DeleteUserOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserOffice", reflect.TypeOf((*MockStore)(nil).DeleteUserOffice), arg0, arg1)
}

// DeleteUserProduct mocks base method.
func (m *MockStore) DeleteUserProduct(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserProduct indicates an expected call of DeleteUserProduct.
func (mr *MockStoreMockRecorder) DeleteUserProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserProduct", reflect.TypeOf((*MockStore)(nil).DeleteUserProduct), arg0, arg1)
}

// GetAccessAccountType mocks base method.
func (m *MockStore) GetAccessAccountType(arg0 context.Context, arg1 uuid.UUID) (db0.AccessAccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessAccountType", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessAccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessAccountType indicates an expected call of GetAccessAccountType.
func (mr *MockStoreMockRecorder) GetAccessAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessAccountType", reflect.TypeOf((*MockStore)(nil).GetAccessAccountType), arg0, arg1)
}

// GetAccessAccountTypebyUuId mocks base method.
func (m *MockStore) GetAccessAccountTypebyUuId(arg0 context.Context, arg1 uuid.UUID) (db0.AccessAccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessAccountTypebyUuId", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessAccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessAccountTypebyUuId indicates an expected call of GetAccessAccountTypebyUuId.
func (mr *MockStoreMockRecorder) GetAccessAccountTypebyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessAccountTypebyUuId", reflect.TypeOf((*MockStore)(nil).GetAccessAccountTypebyUuId), arg0, arg1)
}

// GetAccessConfig mocks base method.
func (m *MockStore) GetAccessConfig(arg0 context.Context, arg1 uuid.UUID) (db0.AccessConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessConfig", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessConfig indicates an expected call of GetAccessConfig.
func (mr *MockStoreMockRecorder) GetAccessConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessConfig", reflect.TypeOf((*MockStore)(nil).GetAccessConfig), arg0, arg1)
}

// GetAccessConfigbyUuId mocks base method.
func (m *MockStore) GetAccessConfigbyUuId(arg0 context.Context, arg1 uuid.UUID) (db0.AccessConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessConfigbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessConfigbyUuId indicates an expected call of GetAccessConfigbyUuId.
func (mr *MockStoreMockRecorder) GetAccessConfigbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessConfigbyUuId", reflect.TypeOf((*MockStore)(nil).GetAccessConfigbyUuId), arg0, arg1)
}

// GetAccessObject mocks base method.
func (m *MockStore) GetAccessObject(arg0 context.Context, arg1 uuid.UUID) (db0.AccessObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessObject", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessObject indicates an expected call of GetAccessObject.
func (mr *MockStoreMockRecorder) GetAccessObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessObject", reflect.TypeOf((*MockStore)(nil).GetAccessObject), arg0, arg1)
}

// GetAccessObjectbyUuId mocks base method.
func (m *MockStore) GetAccessObjectbyUuId(arg0 context.Context, arg1 uuid.UUID) (db0.AccessObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessObjectbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessObjectbyUuId indicates an expected call of GetAccessObjectbyUuId.
func (mr *MockStoreMockRecorder) GetAccessObjectbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessObjectbyUuId", reflect.TypeOf((*MockStore)(nil).GetAccessObjectbyUuId), arg0, arg1)
}

// GetAccessProduct mocks base method.
func (m *MockStore) GetAccessProduct(arg0 context.Context, arg1 uuid.UUID) (db0.AccessProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessProduct", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessProduct indicates an expected call of GetAccessProduct.
func (mr *MockStoreMockRecorder) GetAccessProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessProduct", reflect.TypeOf((*MockStore)(nil).GetAccessProduct), arg0, arg1)
}

// GetAccessProductbyUuId mocks base method.
func (m *MockStore) GetAccessProductbyUuId(arg0 context.Context, arg1 uuid.UUID) (db0.AccessProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessProductbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessProductbyUuId indicates an expected call of GetAccessProductbyUuId.
func (mr *MockStoreMockRecorder) GetAccessProductbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessProductbyUuId", reflect.TypeOf((*MockStore)(nil).GetAccessProductbyUuId), arg0, arg1)
}

// GetAccessRole mocks base method.
func (m *MockStore) GetAccessRole(arg0 context.Context, arg1 int64) (db0.AccessRoleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessRole", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessRoleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessRole indicates an expected call of GetAccessRole.
func (mr *MockStoreMockRecorder) GetAccessRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessRole", reflect.TypeOf((*MockStore)(nil).GetAccessRole), arg0, arg1)
}

// GetAccessRolebyName mocks base method.
func (m *MockStore) GetAccessRolebyName(arg0 context.Context, arg1 string) (db0.AccessRoleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessRolebyName", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessRoleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessRolebyName indicates an expected call of GetAccessRolebyName.
func (mr *MockStoreMockRecorder) GetAccessRolebyName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessRolebyName", reflect.TypeOf((*MockStore)(nil).GetAccessRolebyName), arg0, arg1)
}

// GetAccessRolebyUuId mocks base method.
func (m *MockStore) GetAccessRolebyUuId(arg0 context.Context, arg1 uuid.UUID) (db0.AccessRoleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessRolebyUuId", arg0, arg1)
	ret0, _ := ret[0].(db0.AccessRoleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessRolebyUuId indicates an expected call of GetAccessRolebyUuId.
func (mr *MockStoreMockRecorder) GetAccessRolebyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessRolebyUuId", reflect.TypeOf((*MockStore)(nil).GetAccessRolebyUuId), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockStore) GetAccount(arg0 context.Context, arg1 int64) (db1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStoreMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStore)(nil).GetAccount), arg0, arg1)
}

// GetAccountBeneficiary mocks base method.
func (m *MockStore) GetAccountBeneficiary(arg0 context.Context, arg1 uuid.UUID) (db1.AccountBeneficiaryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBeneficiary", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountBeneficiaryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBeneficiary indicates an expected call of GetAccountBeneficiary.
func (mr *MockStoreMockRecorder) GetAccountBeneficiary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBeneficiary", reflect.TypeOf((*MockStore)(nil).GetAccountBeneficiary), arg0, arg1)
}

// GetAccountBeneficiarybyUuid mocks base method.
func (m *MockStore) GetAccountBeneficiarybyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.AccountBeneficiaryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBeneficiarybyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountBeneficiaryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBeneficiarybyUuid indicates an expected call of GetAccountBeneficiarybyUuid.
func (mr *MockStoreMockRecorder) GetAccountBeneficiarybyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBeneficiarybyUuid", reflect.TypeOf((*MockStore)(nil).GetAccountBeneficiarybyUuid), arg0, arg1)
}

// GetAccountClass mocks base method.
func (m *MockStore) GetAccountClass(arg0 context.Context, arg1 int64) (db1.AccountClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountClass", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountClass indicates an expected call of GetAccountClass.
func (mr *MockStoreMockRecorder) GetAccountClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountClass", reflect.TypeOf((*MockStore)(nil).GetAccountClass), arg0, arg1)
}

// GetAccountClassbyUuid mocks base method.
func (m *MockStore) GetAccountClassbyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.AccountClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountClassbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountClassbyUuid indicates an expected call of GetAccountClassbyUuid.
func (mr *MockStoreMockRecorder) GetAccountClassbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountClassbyUuid", reflect.TypeOf((*MockStore)(nil).GetAccountClassbyUuid), arg0, arg1)
}

// GetAccountInterest mocks base method.
func (m *MockStore) GetAccountInterest(arg0 context.Context, arg1 int64) (db1.AccountInterestInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInterest", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountInterestInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInterest indicates an expected call of GetAccountInterest.
func (mr *MockStoreMockRecorder) GetAccountInterest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInterest", reflect.TypeOf((*MockStore)(nil).GetAccountInterest), arg0, arg1)
}

// GetAccountInterestbyUuid mocks base method.
func (m *MockStore) GetAccountInterestbyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.AccountInterestInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInterestbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountInterestInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInterestbyUuid indicates an expected call of GetAccountInterestbyUuid.
func (mr *MockStoreMockRecorder) GetAccountInterestbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInterestbyUuid", reflect.TypeOf((*MockStore)(nil).GetAccountInterestbyUuid), arg0, arg1)
}

// GetAccountInventory mocks base method.
func (m *MockStore) GetAccountInventory(arg0 context.Context, arg1 int64) (db1.AccountInventoryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInventory", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountInventoryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInventory indicates an expected call of GetAccountInventory.
func (mr *MockStoreMockRecorder) GetAccountInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInventory", reflect.TypeOf((*MockStore)(nil).GetAccountInventory), arg0, arg1)
}

// GetAccountInventoryTran mocks base method.
func (m *MockStore) GetAccountInventoryTran(arg0 context.Context, arg1 uuid.UUID) (db7.AccountInventoryTranInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInventoryTran", arg0, arg1)
	ret0, _ := ret[0].(db7.AccountInventoryTranInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInventoryTran indicates an expected call of GetAccountInventoryTran.
func (mr *MockStoreMockRecorder) GetAccountInventoryTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInventoryTran", reflect.TypeOf((*MockStore)(nil).GetAccountInventoryTran), arg0, arg1)
}

// GetAccountInventoryTranbyUuid mocks base method.
func (m *MockStore) GetAccountInventoryTranbyUuid(arg0 context.Context, arg1 uuid.UUID) (db7.AccountInventoryTranInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInventoryTranbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db7.AccountInventoryTranInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInventoryTranbyUuid indicates an expected call of GetAccountInventoryTranbyUuid.
func (mr *MockStoreMockRecorder) GetAccountInventoryTranbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInventoryTranbyUuid", reflect.TypeOf((*MockStore)(nil).GetAccountInventoryTranbyUuid), arg0, arg1)
}

// GetAccountInventorybyUuid mocks base method.
func (m *MockStore) GetAccountInventorybyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.AccountInventoryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInventorybyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountInventoryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInventorybyUuid indicates an expected call of GetAccountInventorybyUuid.
func (mr *MockStoreMockRecorder) GetAccountInventorybyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInventorybyUuid", reflect.TypeOf((*MockStore)(nil).GetAccountInventorybyUuid), arg0, arg1)
}

// GetAccountParam mocks base method.
func (m *MockStore) GetAccountParam(arg0 context.Context, arg1 uuid.UUID) (db1.AccountParamInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountParam", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountParamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountParam indicates an expected call of GetAccountParam.
func (mr *MockStoreMockRecorder) GetAccountParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountParam", reflect.TypeOf((*MockStore)(nil).GetAccountParam), arg0, arg1)
}

// GetAccountParambyUuid mocks base method.
func (m *MockStore) GetAccountParambyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.AccountParamInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountParambyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountParamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountParambyUuid indicates an expected call of GetAccountParambyUuid.
func (mr *MockStoreMockRecorder) GetAccountParambyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountParambyUuid", reflect.TypeOf((*MockStore)(nil).GetAccountParambyUuid), arg0, arg1)
}

// GetAccountTerm mocks base method.
func (m *MockStore) GetAccountTerm(arg0 context.Context, arg1 int64) (db1.AccountTermInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTerm", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountTermInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTerm indicates an expected call of GetAccountTerm.
func (mr *MockStoreMockRecorder) GetAccountTerm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTerm", reflect.TypeOf((*MockStore)(nil).GetAccountTerm), arg0, arg1)
}

// GetAccountTermbyUuid mocks base method.
func (m *MockStore) GetAccountTermbyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.AccountTermInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTermbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountTermInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTermbyUuid indicates an expected call of GetAccountTermbyUuid.
func (mr *MockStoreMockRecorder) GetAccountTermbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTermbyUuid", reflect.TypeOf((*MockStore)(nil).GetAccountTermbyUuid), arg0, arg1)
}

// GetAccountTran mocks base method.
func (m *MockStore) GetAccountTran(arg0 context.Context, arg1 uuid.UUID) (db7.AccountTranInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTran", arg0, arg1)
	ret0, _ := ret[0].(db7.AccountTranInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTran indicates an expected call of GetAccountTran.
func (mr *MockStoreMockRecorder) GetAccountTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTran", reflect.TypeOf((*MockStore)(nil).GetAccountTran), arg0, arg1)
}

// GetAccountTranbyUuid mocks base method.
func (m *MockStore) GetAccountTranbyUuid(arg0 context.Context, arg1 uuid.UUID) (db7.AccountTranInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTranbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db7.AccountTranInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTranbyUuid indicates an expected call of GetAccountTranbyUuid.
func (mr *MockStoreMockRecorder) GetAccountTranbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTranbyUuid", reflect.TypeOf((*MockStore)(nil).GetAccountTranbyUuid), arg0, arg1)
}

// GetAccountType mocks base method.
func (m *MockStore) GetAccountType(arg0 context.Context, arg1 int64) (db1.AccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountType", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountType indicates an expected call of GetAccountType.
func (mr *MockStoreMockRecorder) GetAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountType", reflect.TypeOf((*MockStore)(nil).GetAccountType), arg0, arg1)
}

// GetAccountTypebyName mocks base method.
func (m *MockStore) GetAccountTypebyName(arg0 context.Context, arg1 string) (db1.AccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTypebyName", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTypebyName indicates an expected call of GetAccountTypebyName.
func (mr *MockStoreMockRecorder) GetAccountTypebyName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTypebyName", reflect.TypeOf((*MockStore)(nil).GetAccountTypebyName), arg0, arg1)
}

// GetAccountTypebyUuid mocks base method.
func (m *MockStore) GetAccountTypebyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.AccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountTypebyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountTypebyUuid indicates an expected call of GetAccountTypebyUuid.
func (mr *MockStoreMockRecorder) GetAccountTypebyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountTypebyUuid", reflect.TypeOf((*MockStore)(nil).GetAccountTypebyUuid), arg0, arg1)
}

// GetAccountbyAcc mocks base method.
func (m *MockStore) GetAccountbyAcc(arg0 context.Context, arg1 string) (db1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountbyAcc", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountbyAcc indicates an expected call of GetAccountbyAcc.
func (mr *MockStoreMockRecorder) GetAccountbyAcc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountbyAcc", reflect.TypeOf((*MockStore)(nil).GetAccountbyAcc), arg0, arg1)
}

// GetAccountbyAltAcc mocks base method.
func (m *MockStore) GetAccountbyAltAcc(arg0 context.Context, arg1 string) (db1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountbyAltAcc", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountbyAltAcc indicates an expected call of GetAccountbyAltAcc.
func (mr *MockStoreMockRecorder) GetAccountbyAltAcc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountbyAltAcc", reflect.TypeOf((*MockStore)(nil).GetAccountbyAltAcc), arg0, arg1)
}

// GetAccountbyUuid mocks base method.
func (m *MockStore) GetAccountbyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountbyUuid indicates an expected call of GetAccountbyUuid.
func (mr *MockStoreMockRecorder) GetAccountbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountbyUuid", reflect.TypeOf((*MockStore)(nil).GetAccountbyUuid), arg0, arg1)
}

// GetActionTicket mocks base method.
func (m *MockStore) GetActionTicket(arg0 context.Context, arg1 uuid.UUID) (db7.ActionTicketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionTicket", arg0, arg1)
	ret0, _ := ret[0].(db7.ActionTicketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionTicket indicates an expected call of GetActionTicket.
func (mr *MockStoreMockRecorder) GetActionTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionTicket", reflect.TypeOf((*MockStore)(nil).GetActionTicket), arg0, arg1)
}

// GetActionTicketbyUuid mocks base method.
func (m *MockStore) GetActionTicketbyUuid(arg0 context.Context, arg1 uuid.UUID) (db7.ActionTicketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionTicketbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db7.ActionTicketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionTicketbyUuid indicates an expected call of GetActionTicketbyUuid.
func (mr *MockStoreMockRecorder) GetActionTicketbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionTicketbyUuid", reflect.TypeOf((*MockStore)(nil).GetActionTicketbyUuid), arg0, arg1)
}

// GetAddressList mocks base method.
func (m *MockStore) GetAddressList(arg0 context.Context, arg1 uuid.UUID) (db4.AddressListInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressList", arg0, arg1)
	ret0, _ := ret[0].(db4.AddressListInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressList indicates an expected call of GetAddressList.
func (mr *MockStoreMockRecorder) GetAddressList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressList", reflect.TypeOf((*MockStore)(nil).GetAddressList), arg0, arg1)
}

// GetAddressListbyUuId mocks base method.
func (m *MockStore) GetAddressListbyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.AddressListInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressListbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.AddressListInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressListbyUuId indicates an expected call of GetAddressListbyUuId.
func (mr *MockStoreMockRecorder) GetAddressListbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressListbyUuId", reflect.TypeOf((*MockStore)(nil).GetAddressListbyUuId), arg0, arg1)
}

// GetChargeType mocks base method.
func (m *MockStore) GetChargeType(arg0 context.Context, arg1 int64) (db1.ChargeTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChargeType", arg0, arg1)
	ret0, _ := ret[0].(db1.ChargeTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChargeType indicates an expected call of GetChargeType.
func (mr *MockStoreMockRecorder) GetChargeType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChargeType", reflect.TypeOf((*MockStore)(nil).GetChargeType), arg0, arg1)
}

// GetChargeTypebyUuid mocks base method.
func (m *MockStore) GetChargeTypebyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.ChargeTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChargeTypebyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.ChargeTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChargeTypebyUuid indicates an expected call of GetChargeTypebyUuid.
func (mr *MockStoreMockRecorder) GetChargeTypebyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChargeTypebyUuid", reflect.TypeOf((*MockStore)(nil).GetChargeTypebyUuid), arg0, arg1)
}

// GetChartofAccount mocks base method.
func (m *MockStore) GetChartofAccount(arg0 context.Context, arg1 int64) (db5.ChartofAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChartofAccount", arg0, arg1)
	ret0, _ := ret[0].(db5.ChartofAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChartofAccount indicates an expected call of GetChartofAccount.
func (mr *MockStoreMockRecorder) GetChartofAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartofAccount", reflect.TypeOf((*MockStore)(nil).GetChartofAccount), arg0, arg1)
}

// GetChartofAccountbyUuId mocks base method.
func (m *MockStore) GetChartofAccountbyUuId(arg0 context.Context, arg1 uuid.UUID) (db5.ChartofAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChartofAccountbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db5.ChartofAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChartofAccountbyUuId indicates an expected call of GetChartofAccountbyUuId.
func (mr *MockStoreMockRecorder) GetChartofAccountbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChartofAccountbyUuId", reflect.TypeOf((*MockStore)(nil).GetChartofAccountbyUuId), arg0, arg1)
}

// GetCoaParent mocks base method.
func (m *MockStore) GetCoaParent(arg0 context.Context, arg1 int64) (db5.CoaParentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoaParent", arg0, arg1)
	ret0, _ := ret[0].(db5.CoaParentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoaParent indicates an expected call of GetCoaParent.
func (mr *MockStoreMockRecorder) GetCoaParent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoaParent", reflect.TypeOf((*MockStore)(nil).GetCoaParent), arg0, arg1)
}

// GetCoaParentbyUuId mocks base method.
func (m *MockStore) GetCoaParentbyUuId(arg0 context.Context, arg1 uuid.UUID) (db5.CoaParentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoaParentbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db5.CoaParentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoaParentbyUuId indicates an expected call of GetCoaParentbyUuId.
func (mr *MockStoreMockRecorder) GetCoaParentbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoaParentbyUuId", reflect.TypeOf((*MockStore)(nil).GetCoaParentbyUuId), arg0, arg1)
}

// GetComment mocks base method.
func (m *MockStore) GetComment(arg0 context.Context, arg1 uuid.UUID) (db6.CommentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1)
	ret0, _ := ret[0].(db6.CommentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockStoreMockRecorder) GetComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockStore)(nil).GetComment), arg0, arg1)
}

// GetCommentbyUuId mocks base method.
func (m *MockStore) GetCommentbyUuId(arg0 context.Context, arg1 uuid.UUID) (db6.CommentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db6.CommentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentbyUuId indicates an expected call of GetCommentbyUuId.
func (mr *MockStoreMockRecorder) GetCommentbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentbyUuId", reflect.TypeOf((*MockStore)(nil).GetCommentbyUuId), arg0, arg1)
}

// GetContact mocks base method.
func (m *MockStore) GetContact(arg0 context.Context, arg1 uuid.UUID) (db4.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", arg0, arg1)
	ret0, _ := ret[0].(db4.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockStoreMockRecorder) GetContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockStore)(nil).GetContact), arg0, arg1)
}

// GetContactbyUuId mocks base method.
func (m *MockStore) GetContactbyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContactbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContactbyUuId indicates an expected call of GetContactbyUuId.
func (mr *MockStoreMockRecorder) GetContactbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContactbyUuId", reflect.TypeOf((*MockStore)(nil).GetContactbyUuId), arg0, arg1)
}

// GetCustomer mocks base method.
func (m *MockStore) GetCustomer(arg0 context.Context, arg1 int64) (db2.CustomerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", arg0, arg1)
	ret0, _ := ret[0].(db2.CustomerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockStoreMockRecorder) GetCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockStore)(nil).GetCustomer), arg0, arg1)
}

// GetCustomerBeneficiary mocks base method.
func (m *MockStore) GetCustomerBeneficiary(arg0 context.Context, arg1 uuid.UUID) (db2.CustomerBeneficiaryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerBeneficiary", arg0, arg1)
	ret0, _ := ret[0].(db2.CustomerBeneficiaryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerBeneficiary indicates an expected call of GetCustomerBeneficiary.
func (mr *MockStoreMockRecorder) GetCustomerBeneficiary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerBeneficiary", reflect.TypeOf((*MockStore)(nil).GetCustomerBeneficiary), arg0, arg1)
}

// GetCustomerBeneficiarybyUuId mocks base method.
func (m *MockStore) GetCustomerBeneficiarybyUuId(arg0 context.Context, arg1 uuid.UUID) (db2.CustomerBeneficiaryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerBeneficiarybyUuId", arg0, arg1)
	ret0, _ := ret[0].(db2.CustomerBeneficiaryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerBeneficiarybyUuId indicates an expected call of GetCustomerBeneficiarybyUuId.
func (mr *MockStoreMockRecorder) GetCustomerBeneficiarybyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerBeneficiarybyUuId", reflect.TypeOf((*MockStore)(nil).GetCustomerBeneficiarybyUuId), arg0, arg1)
}

// GetCustomerEvent mocks base method.
func (m *MockStore) GetCustomerEvent(arg0 context.Context, arg1 uuid.UUID) (db7.CustomerEventInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerEvent", arg0, arg1)
	ret0, _ := ret[0].(db7.CustomerEventInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerEvent indicates an expected call of GetCustomerEvent.
func (mr *MockStoreMockRecorder) GetCustomerEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerEvent", reflect.TypeOf((*MockStore)(nil).GetCustomerEvent), arg0, arg1)
}

// GetCustomerEventbyUuid mocks base method.
func (m *MockStore) GetCustomerEventbyUuid(arg0 context.Context, arg1 uuid.UUID) (db7.CustomerEventInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerEventbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db7.CustomerEventInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerEventbyUuid indicates an expected call of GetCustomerEventbyUuid.
func (mr *MockStoreMockRecorder) GetCustomerEventbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerEventbyUuid", reflect.TypeOf((*MockStore)(nil).GetCustomerEventbyUuid), arg0, arg1)
}

// GetCustomerGroup mocks base method.
func (m *MockStore) GetCustomerGroup(arg0 context.Context, arg1 int64) (db2.CustomerGroupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerGroup", arg0, arg1)
	ret0, _ := ret[0].(db2.CustomerGroupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerGroup indicates an expected call of GetCustomerGroup.
func (mr *MockStoreMockRecorder) GetCustomerGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerGroup", reflect.TypeOf((*MockStore)(nil).GetCustomerGroup), arg0, arg1)
}

// GetCustomerGroupbyUuId mocks base method.
func (m *MockStore) GetCustomerGroupbyUuId(arg0 context.Context, arg1 uuid.UUID) (db2.CustomerGroupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerGroupbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db2.CustomerGroupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerGroupbyUuId indicates an expected call of GetCustomerGroupbyUuId.
func (mr *MockStoreMockRecorder) GetCustomerGroupbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerGroupbyUuId", reflect.TypeOf((*MockStore)(nil).GetCustomerGroupbyUuId), arg0, arg1)
}

// GetCustomerbyAltId mocks base method.
func (m *MockStore) GetCustomerbyAltId(arg0 context.Context, arg1 string) (db2.CustomerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerbyAltId", arg0, arg1)
	ret0, _ := ret[0].(db2.CustomerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerbyAltId indicates an expected call of GetCustomerbyAltId.
func (mr *MockStoreMockRecorder) GetCustomerbyAltId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerbyAltId", reflect.TypeOf((*MockStore)(nil).GetCustomerbyAltId), arg0, arg1)
}

// GetCustomerbyCid mocks base method.
func (m *MockStore) GetCustomerbyCid(arg0 context.Context, arg1, arg2 int64) (db2.CustomerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerbyCid", arg0, arg1, arg2)
	ret0, _ := ret[0].(db2.CustomerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerbyCid indicates an expected call of GetCustomerbyCid.
func (mr *MockStoreMockRecorder) GetCustomerbyCid(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerbyCid", reflect.TypeOf((*MockStore)(nil).GetCustomerbyCid), arg0, arg1, arg2)
}

// GetCustomerbyUuId mocks base method.
func (m *MockStore) GetCustomerbyUuId(arg0 context.Context, arg1 uuid.UUID) (db2.CustomerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db2.CustomerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerbyUuId indicates an expected call of GetCustomerbyUuId.
func (mr *MockStoreMockRecorder) GetCustomerbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerbyUuId", reflect.TypeOf((*MockStore)(nil).GetCustomerbyUuId), arg0, arg1)
}

// GetDocument mocks base method.
func (m *MockStore) GetDocument(arg0 context.Context, arg1 int64) (db3.DocumentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", arg0, arg1)
	ret0, _ := ret[0].(db3.DocumentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockStoreMockRecorder) GetDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockStore)(nil).GetDocument), arg0, arg1)
}

// GetDocumentbyUuId mocks base method.
func (m *MockStore) GetDocumentbyUuId(arg0 context.Context, arg1 uuid.UUID) (db3.DocumentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db3.DocumentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentbyUuId indicates an expected call of GetDocumentbyUuId.
func (mr *MockStoreMockRecorder) GetDocumentbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentbyUuId", reflect.TypeOf((*MockStore)(nil).GetDocumentbyUuId), arg0, arg1)
}

// GetEducational mocks base method.
func (m *MockStore) GetEducational(arg0 context.Context, arg1 uuid.UUID) (db4.EducationalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEducational", arg0, arg1)
	ret0, _ := ret[0].(db4.EducationalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEducational indicates an expected call of GetEducational.
func (mr *MockStoreMockRecorder) GetEducational(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEducational", reflect.TypeOf((*MockStore)(nil).GetEducational), arg0, arg1)
}

// GetEducationalbyUuId mocks base method.
func (m *MockStore) GetEducationalbyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.EducationalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEducationalbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.EducationalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEducationalbyUuId indicates an expected call of GetEducationalbyUuId.
func (mr *MockStoreMockRecorder) GetEducationalbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEducationalbyUuId", reflect.TypeOf((*MockStore)(nil).GetEducationalbyUuId), arg0, arg1)
}

// GetEmployee mocks base method.
func (m *MockStore) GetEmployee(arg0 context.Context, arg1 int64) (db4.EmployeeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployee", arg0, arg1)
	ret0, _ := ret[0].(db4.EmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockStoreMockRecorder) GetEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockStore)(nil).GetEmployee), arg0, arg1)
}

// GetEmployeeEvent mocks base method.
func (m *MockStore) GetEmployeeEvent(arg0 context.Context, arg1 uuid.UUID) (db7.EmployeeEventInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeEvent", arg0, arg1)
	ret0, _ := ret[0].(db7.EmployeeEventInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeEvent indicates an expected call of GetEmployeeEvent.
func (mr *MockStoreMockRecorder) GetEmployeeEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeEvent", reflect.TypeOf((*MockStore)(nil).GetEmployeeEvent), arg0, arg1)
}

// GetEmployeeEventbyUuid mocks base method.
func (m *MockStore) GetEmployeeEventbyUuid(arg0 context.Context, arg1 uuid.UUID) (db7.EmployeeEventInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeEventbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db7.EmployeeEventInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeEventbyUuid indicates an expected call of GetEmployeeEventbyUuid.
func (mr *MockStoreMockRecorder) GetEmployeeEventbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeEventbyUuid", reflect.TypeOf((*MockStore)(nil).GetEmployeeEventbyUuid), arg0, arg1)
}

// GetEmployeebyUuId mocks base method.
func (m *MockStore) GetEmployeebyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.EmployeeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeebyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.EmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeebyUuId indicates an expected call of GetEmployeebyUuId.
func (mr *MockStoreMockRecorder) GetEmployeebyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeebyUuId", reflect.TypeOf((*MockStore)(nil).GetEmployeebyUuId), arg0, arg1)
}

// GetEmployment mocks base method.
func (m *MockStore) GetEmployment(arg0 context.Context, arg1 uuid.UUID) (db4.EmploymentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployment", arg0, arg1)
	ret0, _ := ret[0].(db4.EmploymentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployment indicates an expected call of GetEmployment.
func (mr *MockStoreMockRecorder) GetEmployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployment", reflect.TypeOf((*MockStore)(nil).GetEmployment), arg0, arg1)
}

// GetEmploymentbyUuId mocks base method.
func (m *MockStore) GetEmploymentbyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.EmploymentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmploymentbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.EmploymentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmploymentbyUuId indicates an expected call of GetEmploymentbyUuId.
func (mr *MockStoreMockRecorder) GetEmploymentbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmploymentbyUuId", reflect.TypeOf((*MockStore)(nil).GetEmploymentbyUuId), arg0, arg1)
}

// GetEntry mocks base method.
func (m *MockStore) GetEntry(arg0 context.Context, arg1 int64) (model.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", arg0, arg1)
	ret0, _ := ret[0].(model.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockStoreMockRecorder) GetEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockStore)(nil).GetEntry), arg0, arg1)
}

// GetFollower mocks base method.
func (m *MockStore) GetFollower(arg0 context.Context, arg1, arg2 int64) (db6.FollowerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollower", arg0, arg1, arg2)
	ret0, _ := ret[0].(db6.FollowerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollower indicates an expected call of GetFollower.
func (mr *MockStoreMockRecorder) GetFollower(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollower", reflect.TypeOf((*MockStore)(nil).GetFollower), arg0, arg1, arg2)
}

// GetFxrate mocks base method.
func (m *MockStore) GetFxrate(arg0 context.Context, arg1, arg2 string, arg3 time.Time) (db5.FxrateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFxrate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(db5.FxrateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFxrate indicates an expected call of GetFxrate.
func (mr *MockStoreMockRecorder) GetFxrate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFxrate", reflect.TypeOf((*MockStore)(nil).GetFxrate), arg0, arg1, arg2, arg3)
}

// GetFxratebyUuId mocks base method.
func (m *MockStore) GetFxratebyUuId(arg0 context.Context, arg1 uuid.UUID) (db5.FxrateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFxratebyUuId", arg0, arg1)
	ret0, _ := ret[0].(db5.FxrateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFxratebyUuId indicates an expected call of GetFxratebyUuId.
func (mr *MockStoreMockRecorder) GetFxratebyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFxratebyUuId", reflect.TypeOf((*MockStore)(nil).GetFxratebyUuId), arg0, arg1)
}

// GetGeography mocks base method.
func (m *MockStore) GetGeography(arg0 context.Context, arg1 int64) (db5.GeographyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeography", arg0, arg1)
	ret0, _ := ret[0].(db5.GeographyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeography indicates an expected call of GetGeography.
func (mr *MockStoreMockRecorder) GetGeography(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeography", reflect.TypeOf((*MockStore)(nil).GetGeography), arg0, arg1)
}

// GetGeographybyLocation mocks base method.
func (m *MockStore) GetGeographybyLocation(arg0 context.Context, arg1, arg2 int64, arg3 string) (db5.GeographyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeographybyLocation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(db5.GeographyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeographybyLocation indicates an expected call of GetGeographybyLocation.
func (mr *MockStoreMockRecorder) GetGeographybyLocation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeographybyLocation", reflect.TypeOf((*MockStore)(nil).GetGeographybyLocation), arg0, arg1, arg2, arg3)
}

// GetGeographybyUuId mocks base method.
func (m *MockStore) GetGeographybyUuId(arg0 context.Context, arg1 uuid.UUID) (db5.GeographyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeographybyUuId", arg0, arg1)
	ret0, _ := ret[0].(db5.GeographyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeographybyUuId indicates an expected call of GetGeographybyUuId.
func (mr *MockStoreMockRecorder) GetGeographybyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeographybyUuId", reflect.TypeOf((*MockStore)(nil).GetGeographybyUuId), arg0, arg1)
}

// GetGlAccount mocks base method.
func (m *MockStore) GetGlAccount(arg0 context.Context, arg1 int64) (db1.GlAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlAccount", arg0, arg1)
	ret0, _ := ret[0].(db1.GlAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlAccount indicates an expected call of GetGlAccount.
func (mr *MockStoreMockRecorder) GetGlAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlAccount", reflect.TypeOf((*MockStore)(nil).GetGlAccount), arg0, arg1)
}

// GetGlAccountbyUuid mocks base method.
func (m *MockStore) GetGlAccountbyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.GlAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlAccountbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.GlAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlAccountbyUuid indicates an expected call of GetGlAccountbyUuid.
func (mr *MockStoreMockRecorder) GetGlAccountbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlAccountbyUuid", reflect.TypeOf((*MockStore)(nil).GetGlAccountbyUuid), arg0, arg1)
}

// GetIdentityInfo mocks base method.
func (m *MockStore) GetIdentityInfo(arg0 context.Context, arg1 int64) (db4.IdentityInfoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityInfo", arg0, arg1)
	ret0, _ := ret[0].(db4.IdentityInfoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityInfo indicates an expected call of GetIdentityInfo.
func (mr *MockStoreMockRecorder) GetIdentityInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityInfo", reflect.TypeOf((*MockStore)(nil).GetIdentityInfo), arg0, arg1)
}

// GetIdentityInfobyUuId mocks base method.
func (m *MockStore) GetIdentityInfobyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.IdentityInfoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityInfobyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.IdentityInfoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityInfobyUuId indicates an expected call of GetIdentityInfobyUuId.
func (mr *MockStoreMockRecorder) GetIdentityInfobyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityInfobyUuId", reflect.TypeOf((*MockStore)(nil).GetIdentityInfobyUuId), arg0, arg1)
}

// GetIds mocks base method.
func (m *MockStore) GetIds(arg0 context.Context, arg1 uuid.UUID) (db4.IdsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIds", arg0, arg1)
	ret0, _ := ret[0].(db4.IdsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIds indicates an expected call of GetIds.
func (mr *MockStoreMockRecorder) GetIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIds", reflect.TypeOf((*MockStore)(nil).GetIds), arg0, arg1)
}

// GetIdsbyUuId mocks base method.
func (m *MockStore) GetIdsbyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.IdsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdsbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.IdsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdsbyUuId indicates an expected call of GetIdsbyUuId.
func (mr *MockStoreMockRecorder) GetIdsbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdsbyUuId", reflect.TypeOf((*MockStore)(nil).GetIdsbyUuId), arg0, arg1)
}

// GetIncomeSource mocks base method.
func (m *MockStore) GetIncomeSource(arg0 context.Context, arg1 uuid.UUID) (db4.IncomeSourceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomeSource", arg0, arg1)
	ret0, _ := ret[0].(db4.IncomeSourceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomeSource indicates an expected call of GetIncomeSource.
func (mr *MockStoreMockRecorder) GetIncomeSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomeSource", reflect.TypeOf((*MockStore)(nil).GetIncomeSource), arg0, arg1)
}

// GetIncomeSourcebyUuId mocks base method.
func (m *MockStore) GetIncomeSourcebyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.IncomeSourceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomeSourcebyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.IncomeSourceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomeSourcebyUuId indicates an expected call of GetIncomeSourcebyUuId.
func (mr *MockStoreMockRecorder) GetIncomeSourcebyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomeSourcebyUuId", reflect.TypeOf((*MockStore)(nil).GetIncomeSourcebyUuId), arg0, arg1)
}

// GetJournalDetail mocks base method.
func (m *MockStore) GetJournalDetail(arg0 context.Context, arg1 uuid.UUID) (db7.JournalDetailInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJournalDetail", arg0, arg1)
	ret0, _ := ret[0].(db7.JournalDetailInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJournalDetail indicates an expected call of GetJournalDetail.
func (mr *MockStoreMockRecorder) GetJournalDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJournalDetail", reflect.TypeOf((*MockStore)(nil).GetJournalDetail), arg0, arg1)
}

// GetJournalDetailbyUuid mocks base method.
func (m *MockStore) GetJournalDetailbyUuid(arg0 context.Context, arg1 uuid.UUID) (db7.JournalDetailInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJournalDetailbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db7.JournalDetailInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJournalDetailbyUuid indicates an expected call of GetJournalDetailbyUuid.
func (mr *MockStoreMockRecorder) GetJournalDetailbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJournalDetailbyUuid", reflect.TypeOf((*MockStore)(nil).GetJournalDetailbyUuid), arg0, arg1)
}

// GetOffice mocks base method.
func (m *MockStore) GetOffice(arg0 context.Context, arg1 int64) (db4.OfficeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffice", arg0, arg1)
	ret0, _ := ret[0].(db4.OfficeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffice indicates an expected call of GetOffice.
func (mr *MockStoreMockRecorder) GetOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffice", reflect.TypeOf((*MockStore)(nil).GetOffice), arg0, arg1)
}

// GetOfficeAccount mocks base method.
func (m *MockStore) GetOfficeAccount(arg0 context.Context, arg1 int64) (db1.OfficeAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeAccount", arg0, arg1)
	ret0, _ := ret[0].(db1.OfficeAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeAccount indicates an expected call of GetOfficeAccount.
func (mr *MockStoreMockRecorder) GetOfficeAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeAccount", reflect.TypeOf((*MockStore)(nil).GetOfficeAccount), arg0, arg1)
}

// GetOfficeAccountTran mocks base method.
func (m *MockStore) GetOfficeAccountTran(arg0 context.Context, arg1 uuid.UUID) (db7.OfficeAccountTranInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeAccountTran", arg0, arg1)
	ret0, _ := ret[0].(db7.OfficeAccountTranInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeAccountTran indicates an expected call of GetOfficeAccountTran.
func (mr *MockStoreMockRecorder) GetOfficeAccountTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeAccountTran", reflect.TypeOf((*MockStore)(nil).GetOfficeAccountTran), arg0, arg1)
}

// GetOfficeAccountTranbyUuid mocks base method.
func (m *MockStore) GetOfficeAccountTranbyUuid(arg0 context.Context, arg1 uuid.UUID) (db7.OfficeAccountTranInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeAccountTranbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db7.OfficeAccountTranInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeAccountTranbyUuid indicates an expected call of GetOfficeAccountTranbyUuid.
func (mr *MockStoreMockRecorder) GetOfficeAccountTranbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeAccountTranbyUuid", reflect.TypeOf((*MockStore)(nil).GetOfficeAccountTranbyUuid), arg0, arg1)
}

// GetOfficeAccountType mocks base method.
func (m *MockStore) GetOfficeAccountType(arg0 context.Context, arg1 int64) (db1.OfficeAccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeAccountType", arg0, arg1)
	ret0, _ := ret[0].(db1.OfficeAccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeAccountType indicates an expected call of GetOfficeAccountType.
func (mr *MockStoreMockRecorder) GetOfficeAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeAccountType", reflect.TypeOf((*MockStore)(nil).GetOfficeAccountType), arg0, arg1)
}

// GetOfficeAccountTypebyName mocks base method.
func (m *MockStore) GetOfficeAccountTypebyName(arg0 context.Context, arg1 string) (db1.OfficeAccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeAccountTypebyName", arg0, arg1)
	ret0, _ := ret[0].(db1.OfficeAccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeAccountTypebyName indicates an expected call of GetOfficeAccountTypebyName.
func (mr *MockStoreMockRecorder) GetOfficeAccountTypebyName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeAccountTypebyName", reflect.TypeOf((*MockStore)(nil).GetOfficeAccountTypebyName), arg0, arg1)
}

// GetOfficeAccountTypebyUuid mocks base method.
func (m *MockStore) GetOfficeAccountTypebyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.OfficeAccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeAccountTypebyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.OfficeAccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeAccountTypebyUuid indicates an expected call of GetOfficeAccountTypebyUuid.
func (mr *MockStoreMockRecorder) GetOfficeAccountTypebyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeAccountTypebyUuid", reflect.TypeOf((*MockStore)(nil).GetOfficeAccountTypebyUuid), arg0, arg1)
}

// GetOfficeAccountbyUuid mocks base method.
func (m *MockStore) GetOfficeAccountbyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.OfficeAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeAccountbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.OfficeAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeAccountbyUuid indicates an expected call of GetOfficeAccountbyUuid.
func (mr *MockStoreMockRecorder) GetOfficeAccountbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeAccountbyUuid", reflect.TypeOf((*MockStore)(nil).GetOfficeAccountbyUuid), arg0, arg1)
}

// GetOfficebyUuId mocks base method.
func (m *MockStore) GetOfficebyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.OfficeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficebyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.OfficeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficebyUuId indicates an expected call of GetOfficebyUuId.
func (mr *MockStoreMockRecorder) GetOfficebyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficebyUuId", reflect.TypeOf((*MockStore)(nil).GetOfficebyUuId), arg0, arg1)
}

// GetOtherSchedule mocks base method.
func (m *MockStore) GetOtherSchedule(arg0 context.Context, arg1 uuid.UUID) (db1.OtherScheduleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtherSchedule", arg0, arg1)
	ret0, _ := ret[0].(db1.OtherScheduleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtherSchedule indicates an expected call of GetOtherSchedule.
func (mr *MockStoreMockRecorder) GetOtherSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtherSchedule", reflect.TypeOf((*MockStore)(nil).GetOtherSchedule), arg0, arg1)
}

// GetOtherSchedulebyUuid mocks base method.
func (m *MockStore) GetOtherSchedulebyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.OtherScheduleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOtherSchedulebyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.OtherScheduleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtherSchedulebyUuid indicates an expected call of GetOtherSchedulebyUuid.
func (mr *MockStoreMockRecorder) GetOtherSchedulebyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtherSchedulebyUuid", reflect.TypeOf((*MockStore)(nil).GetOtherSchedulebyUuid), arg0, arg1)
}

// GetPersonalInfo mocks base method.
func (m *MockStore) GetPersonalInfo(arg0 context.Context, arg1 int64) (db4.PersonalInfoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalInfo", arg0, arg1)
	ret0, _ := ret[0].(db4.PersonalInfoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalInfo indicates an expected call of GetPersonalInfo.
func (mr *MockStoreMockRecorder) GetPersonalInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalInfo", reflect.TypeOf((*MockStore)(nil).GetPersonalInfo), arg0, arg1)
}

// GetPersonalInfobyUuId mocks base method.
func (m *MockStore) GetPersonalInfobyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.PersonalInfoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalInfobyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.PersonalInfoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalInfobyUuId indicates an expected call of GetPersonalInfobyUuId.
func (mr *MockStoreMockRecorder) GetPersonalInfobyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalInfobyUuId", reflect.TypeOf((*MockStore)(nil).GetPersonalInfobyUuId), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockStore) GetPost(arg0 context.Context, arg1 uuid.UUID) (db6.PostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(db6.PostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockStoreMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockStore)(nil).GetPost), arg0, arg1)
}

// GetPostbyUuId mocks base method.
func (m *MockStore) GetPostbyUuId(arg0 context.Context, arg1 uuid.UUID) (db6.PostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db6.PostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostbyUuId indicates an expected call of GetPostbyUuId.
func (mr *MockStoreMockRecorder) GetPostbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostbyUuId", reflect.TypeOf((*MockStore)(nil).GetPostbyUuId), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockStore) GetProduct(arg0 context.Context, arg1 int64) (db1.ProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(db1.ProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockStoreMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockStore)(nil).GetProduct), arg0, arg1)
}

// GetProductbyName mocks base method.
func (m *MockStore) GetProductbyName(arg0 context.Context, arg1 string) (db1.ProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductbyName", arg0, arg1)
	ret0, _ := ret[0].(db1.ProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductbyName indicates an expected call of GetProductbyName.
func (mr *MockStoreMockRecorder) GetProductbyName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductbyName", reflect.TypeOf((*MockStore)(nil).GetProductbyName), arg0, arg1)
}

// GetProductbyUuid mocks base method.
func (m *MockStore) GetProductbyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.ProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.ProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductbyUuid indicates an expected call of GetProductbyUuid.
func (mr *MockStoreMockRecorder) GetProductbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductbyUuid", reflect.TypeOf((*MockStore)(nil).GetProductbyUuid), arg0, arg1)
}

// GetReferenceInfo mocks base method.
func (m *MockStore) GetReferenceInfo(arg0 context.Context, arg1 int64) (db5.ReferenceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceInfo", arg0, arg1)
	ret0, _ := ret[0].(db5.ReferenceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceInfo indicates an expected call of GetReferenceInfo.
func (mr *MockStoreMockRecorder) GetReferenceInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceInfo", reflect.TypeOf((*MockStore)(nil).GetReferenceInfo), arg0, arg1)
}

// GetReferenceInfobyCode mocks base method.
func (m *MockStore) GetReferenceInfobyCode(arg0 context.Context, arg1 sql.NullString) (db5.ReferenceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceInfobyCode", arg0, arg1)
	ret0, _ := ret[0].(db5.ReferenceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceInfobyCode indicates an expected call of GetReferenceInfobyCode.
func (mr *MockStoreMockRecorder) GetReferenceInfobyCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceInfobyCode", reflect.TypeOf((*MockStore)(nil).GetReferenceInfobyCode), arg0, arg1)
}

// GetReferenceInfobyTitle mocks base method.
func (m *MockStore) GetReferenceInfobyTitle(arg0 context.Context, arg1 string, arg2 int64, arg3 string) (db5.ReferenceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceInfobyTitle", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(db5.ReferenceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceInfobyTitle indicates an expected call of GetReferenceInfobyTitle.
func (mr *MockStoreMockRecorder) GetReferenceInfobyTitle(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceInfobyTitle", reflect.TypeOf((*MockStore)(nil).GetReferenceInfobyTitle), arg0, arg1, arg2, arg3)
}

// GetReferenceInfobyUuId mocks base method.
func (m *MockStore) GetReferenceInfobyUuId(arg0 context.Context, arg1 uuid.UUID) (db5.ReferenceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceInfobyUuId", arg0, arg1)
	ret0, _ := ret[0].(db5.ReferenceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceInfobyUuId indicates an expected call of GetReferenceInfobyUuId.
func (mr *MockStoreMockRecorder) GetReferenceInfobyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceInfobyUuId", reflect.TypeOf((*MockStore)(nil).GetReferenceInfobyUuId), arg0, arg1)
}

// GetReferenceTypeInfo mocks base method.
func (m *MockStore) GetReferenceTypeInfo(arg0 context.Context, arg1 int64) (db5.ReferenceTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceTypeInfo", arg0, arg1)
	ret0, _ := ret[0].(db5.ReferenceTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceTypeInfo indicates an expected call of GetReferenceTypeInfo.
func (mr *MockStoreMockRecorder) GetReferenceTypeInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceTypeInfo", reflect.TypeOf((*MockStore)(nil).GetReferenceTypeInfo), arg0, arg1)
}

// GetReferenceTypeInfobyCode mocks base method.
func (m *MockStore) GetReferenceTypeInfobyCode(arg0 context.Context, arg1 sql.NullString) (db5.ReferenceTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceTypeInfobyCode", arg0, arg1)
	ret0, _ := ret[0].(db5.ReferenceTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceTypeInfobyCode indicates an expected call of GetReferenceTypeInfobyCode.
func (mr *MockStoreMockRecorder) GetReferenceTypeInfobyCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceTypeInfobyCode", reflect.TypeOf((*MockStore)(nil).GetReferenceTypeInfobyCode), arg0, arg1)
}

// GetReferenceTypeInfobyTitle mocks base method.
func (m *MockStore) GetReferenceTypeInfobyTitle(arg0 context.Context, arg1 string) (db5.ReferenceTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceTypeInfobyTitle", arg0, arg1)
	ret0, _ := ret[0].(db5.ReferenceTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceTypeInfobyTitle indicates an expected call of GetReferenceTypeInfobyTitle.
func (mr *MockStoreMockRecorder) GetReferenceTypeInfobyTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceTypeInfobyTitle", reflect.TypeOf((*MockStore)(nil).GetReferenceTypeInfobyTitle), arg0, arg1)
}

// GetReferenceTypeInfobyUuId mocks base method.
func (m *MockStore) GetReferenceTypeInfobyUuId(arg0 context.Context, arg1 uuid.UUID) (db5.ReferenceTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceTypeInfobyUuId", arg0, arg1)
	ret0, _ := ret[0].(db5.ReferenceTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceTypeInfobyUuId indicates an expected call of GetReferenceTypeInfobyUuId.
func (mr *MockStoreMockRecorder) GetReferenceTypeInfobyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceTypeInfobyUuId", reflect.TypeOf((*MockStore)(nil).GetReferenceTypeInfobyUuId), arg0, arg1)
}

// GetRelation mocks base method.
func (m *MockStore) GetRelation(arg0 context.Context, arg1 uuid.UUID) (db4.RelationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelation", arg0, arg1)
	ret0, _ := ret[0].(db4.RelationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelation indicates an expected call of GetRelation.
func (mr *MockStoreMockRecorder) GetRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelation", reflect.TypeOf((*MockStore)(nil).GetRelation), arg0, arg1)
}

// GetRelationbyUuId mocks base method.
func (m *MockStore) GetRelationbyUuId(arg0 context.Context, arg1 uuid.UUID) (db4.RelationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db4.RelationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationbyUuId indicates an expected call of GetRelationbyUuId.
func (mr *MockStoreMockRecorder) GetRelationbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationbyUuId", reflect.TypeOf((*MockStore)(nil).GetRelationbyUuId), arg0, arg1)
}

// GetSchedule mocks base method.
func (m *MockStore) GetSchedule(arg0 context.Context, arg1 int64) (db1.ScheduleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedule", arg0, arg1)
	ret0, _ := ret[0].(db1.ScheduleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockStoreMockRecorder) GetSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockStore)(nil).GetSchedule), arg0, arg1)
}

// GetSchedulebyUuid mocks base method.
func (m *MockStore) GetSchedulebyUuid(arg0 context.Context, arg1 uuid.UUID) (db1.ScheduleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedulebyUuid", arg0, arg1)
	ret0, _ := ret[0].(db1.ScheduleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedulebyUuid indicates an expected call of GetSchedulebyUuid.
func (mr *MockStoreMockRecorder) GetSchedulebyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedulebyUuid", reflect.TypeOf((*MockStore)(nil).GetSchedulebyUuid), arg0, arg1)
}

// GetSocialMediaCredential mocks base method.
func (m *MockStore) GetSocialMediaCredential(arg0 context.Context, arg1 uuid.UUID) (db8.SocialMediaCredentialInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocialMediaCredential", arg0, arg1)
	ret0, _ := ret[0].(db8.SocialMediaCredentialInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocialMediaCredential indicates an expected call of GetSocialMediaCredential.
func (mr *MockStoreMockRecorder) GetSocialMediaCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocialMediaCredential", reflect.TypeOf((*MockStore)(nil).GetSocialMediaCredential), arg0, arg1)
}

// GetSocialMediaCredentialbyUuId mocks base method.
func (m *MockStore) GetSocialMediaCredentialbyUuId(arg0 context.Context, arg1 uuid.UUID) (db8.SocialMediaCredentialInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSocialMediaCredentialbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db8.SocialMediaCredentialInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSocialMediaCredentialbyUuId indicates an expected call of GetSocialMediaCredentialbyUuId.
func (mr *MockStoreMockRecorder) GetSocialMediaCredentialbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSocialMediaCredentialbyUuId", reflect.TypeOf((*MockStore)(nil).GetSocialMediaCredentialbyUuId), arg0, arg1)
}

// GetStorage mocks base method.
func (m *MockStore) GetStorage(arg0 context.Context, arg1 int64) (db3.StorageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", arg0, arg1)
	ret0, _ := ret[0].(db3.StorageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockStoreMockRecorder) GetStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockStore)(nil).GetStorage), arg0, arg1)
}

// GetStoragebyUuId mocks base method.
func (m *MockStore) GetStoragebyUuId(arg0 context.Context, arg1 uuid.UUID) (db3.StorageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragebyUuId", arg0, arg1)
	ret0, _ := ret[0].(db3.StorageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragebyUuId indicates an expected call of GetStoragebyUuId.
func (mr *MockStoreMockRecorder) GetStoragebyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragebyUuId", reflect.TypeOf((*MockStore)(nil).GetStoragebyUuId), arg0, arg1)
}

// GetSystemConfig mocks base method.
func (m *MockStore) GetSystemConfig(arg0 context.Context, arg1 uuid.UUID) (db5.SystemConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemConfig", arg0, arg1)
	ret0, _ := ret[0].(db5.SystemConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemConfig indicates an expected call of GetSystemConfig.
func (mr *MockStoreMockRecorder) GetSystemConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemConfig", reflect.TypeOf((*MockStore)(nil).GetSystemConfig), arg0, arg1)
}

// GetSystemConfigbyUuId mocks base method.
func (m *MockStore) GetSystemConfigbyUuId(arg0 context.Context, arg1 uuid.UUID) (db5.SystemConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemConfigbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db5.SystemConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemConfigbyUuId indicates an expected call of GetSystemConfigbyUuId.
func (mr *MockStoreMockRecorder) GetSystemConfigbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemConfigbyUuId", reflect.TypeOf((*MockStore)(nil).GetSystemConfigbyUuId), arg0, arg1)
}

// GetTicket mocks base method.
func (m *MockStore) GetTicket(arg0 context.Context, arg1 int64) (db7.TicketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicket", arg0, arg1)
	ret0, _ := ret[0].(db7.TicketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicket indicates an expected call of GetTicket.
func (mr *MockStoreMockRecorder) GetTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicket", reflect.TypeOf((*MockStore)(nil).GetTicket), arg0, arg1)
}

// GetTicketbyUuid mocks base method.
func (m *MockStore) GetTicketbyUuid(arg0 context.Context, arg1 uuid.UUID) (db7.TicketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db7.TicketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketbyUuid indicates an expected call of GetTicketbyUuid.
func (mr *MockStoreMockRecorder) GetTicketbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketbyUuid", reflect.TypeOf((*MockStore)(nil).GetTicketbyUuid), arg0, arg1)
}

// GetTransfer mocks base method.
func (m *MockStore) GetTransfer(arg0 context.Context, arg1 int64) (model.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfer", arg0, arg1)
	ret0, _ := ret[0].(model.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfer indicates an expected call of GetTransfer.
func (mr *MockStoreMockRecorder) GetTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfer", reflect.TypeOf((*MockStore)(nil).GetTransfer), arg0, arg1)
}

// GetTrnAction mocks base method.
func (m *MockStore) GetTrnAction(arg0 context.Context, arg1 uuid.UUID) (db7.TrnActionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrnAction", arg0, arg1)
	ret0, _ := ret[0].(db7.TrnActionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrnAction indicates an expected call of GetTrnAction.
func (mr *MockStoreMockRecorder) GetTrnAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrnAction", reflect.TypeOf((*MockStore)(nil).GetTrnAction), arg0, arg1)
}

// GetTrnActionbyUuid mocks base method.
func (m *MockStore) GetTrnActionbyUuid(arg0 context.Context, arg1 uuid.UUID) (db7.TrnActionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrnActionbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db7.TrnActionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrnActionbyUuid indicates an expected call of GetTrnActionbyUuid.
func (mr *MockStoreMockRecorder) GetTrnActionbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrnActionbyUuid", reflect.TypeOf((*MockStore)(nil).GetTrnActionbyUuid), arg0, arg1)
}

// GetTrnHeadRelation mocks base method.
func (m *MockStore) GetTrnHeadRelation(arg0 context.Context, arg1 uuid.UUID) (db7.TrnHeadRelationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrnHeadRelation", arg0, arg1)
	ret0, _ := ret[0].(db7.TrnHeadRelationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrnHeadRelation indicates an expected call of GetTrnHeadRelation.
func (mr *MockStoreMockRecorder) GetTrnHeadRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrnHeadRelation", reflect.TypeOf((*MockStore)(nil).GetTrnHeadRelation), arg0, arg1)
}

// GetTrnHeadRelationbyUuid mocks base method.
func (m *MockStore) GetTrnHeadRelationbyUuid(arg0 context.Context, arg1 uuid.UUID) (db7.TrnHeadRelationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrnHeadRelationbyUuid", arg0, arg1)
	ret0, _ := ret[0].(db7.TrnHeadRelationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrnHeadRelationbyUuid indicates an expected call of GetTrnHeadRelationbyUuid.
func (mr *MockStoreMockRecorder) GetTrnHeadRelationbyUuid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrnHeadRelationbyUuid", reflect.TypeOf((*MockStore)(nil).GetTrnHeadRelationbyUuid), arg0, arg1)
}

// GetUnitConversion mocks base method.
func (m *MockStore) GetUnitConversion(arg0 context.Context, arg1 int64) (db5.UnitConversionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitConversion", arg0, arg1)
	ret0, _ := ret[0].(db5.UnitConversionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitConversion indicates an expected call of GetUnitConversion.
func (mr *MockStoreMockRecorder) GetUnitConversion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitConversion", reflect.TypeOf((*MockStore)(nil).GetUnitConversion), arg0, arg1)
}

// GetUnitConversionbyUuId mocks base method.
func (m *MockStore) GetUnitConversionbyUuId(arg0 context.Context, arg1 uuid.UUID) (db5.UnitConversionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitConversionbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db5.UnitConversionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitConversionbyUuId indicates an expected call of GetUnitConversionbyUuId.
func (mr *MockStoreMockRecorder) GetUnitConversionbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitConversionbyUuId", reflect.TypeOf((*MockStore)(nil).GetUnitConversionbyUuId), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db8.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db8.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserAccountType mocks base method.
func (m *MockStore) GetUserAccountType(arg0 context.Context, arg1 uuid.UUID) (db8.UserAccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountType", arg0, arg1)
	ret0, _ := ret[0].(db8.UserAccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountType indicates an expected call of GetUserAccountType.
func (mr *MockStoreMockRecorder) GetUserAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountType", reflect.TypeOf((*MockStore)(nil).GetUserAccountType), arg0, arg1)
}

// GetUserAccountTypebyUuId mocks base method.
func (m *MockStore) GetUserAccountTypebyUuId(arg0 context.Context, arg1 uuid.UUID) (db8.UserAccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountTypebyUuId", arg0, arg1)
	ret0, _ := ret[0].(db8.UserAccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountTypebyUuId indicates an expected call of GetUserAccountTypebyUuId.
func (mr *MockStoreMockRecorder) GetUserAccountTypebyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountTypebyUuId", reflect.TypeOf((*MockStore)(nil).GetUserAccountTypebyUuId), arg0, arg1)
}

// GetUserConfig mocks base method.
func (m *MockStore) GetUserConfig(arg0 context.Context, arg1 uuid.UUID) (db8.UserConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConfig", arg0, arg1)
	ret0, _ := ret[0].(db8.UserConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConfig indicates an expected call of GetUserConfig.
func (mr *MockStoreMockRecorder) GetUserConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConfig", reflect.TypeOf((*MockStore)(nil).GetUserConfig), arg0, arg1)
}

// GetUserConfigbyUuId mocks base method.
func (m *MockStore) GetUserConfigbyUuId(arg0 context.Context, arg1 uuid.UUID) (db8.UserConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConfigbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db8.UserConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConfigbyUuId indicates an expected call of GetUserConfigbyUuId.
func (mr *MockStoreMockRecorder) GetUserConfigbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConfigbyUuId", reflect.TypeOf((*MockStore)(nil).GetUserConfigbyUuId), arg0, arg1)
}

// GetUserObject mocks base method.
func (m *MockStore) GetUserObject(arg0 context.Context, arg1 uuid.UUID) (db8.UserObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserObject", arg0, arg1)
	ret0, _ := ret[0].(db8.UserObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserObject indicates an expected call of GetUserObject.
func (mr *MockStoreMockRecorder) GetUserObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserObject", reflect.TypeOf((*MockStore)(nil).GetUserObject), arg0, arg1)
}

// GetUserObjectbyUuId mocks base method.
func (m *MockStore) GetUserObjectbyUuId(arg0 context.Context, arg1 uuid.UUID) (db8.UserObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserObjectbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db8.UserObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserObjectbyUuId indicates an expected call of GetUserObjectbyUuId.
func (mr *MockStoreMockRecorder) GetUserObjectbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserObjectbyUuId", reflect.TypeOf((*MockStore)(nil).GetUserObjectbyUuId), arg0, arg1)
}

// GetUserOffice mocks base method.
func (m *MockStore) GetUserOffice(arg0 context.Context, arg1 uuid.UUID) (db8.UserOfficeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOffice", arg0, arg1)
	ret0, _ := ret[0].(db8.UserOfficeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOffice indicates an expected call of GetUserOffice.
func (mr *MockStoreMockRecorder) GetUserOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOffice", reflect.TypeOf((*MockStore)(nil).GetUserOffice), arg0, arg1)
}

// GetUserOfficebyUuId mocks base method.
func (m *MockStore) GetUserOfficebyUuId(arg0 context.Context, arg1 uuid.UUID) (db8.UserOfficeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOfficebyUuId", arg0, arg1)
	ret0, _ := ret[0].(db8.UserOfficeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOfficebyUuId indicates an expected call of GetUserOfficebyUuId.
func (mr *MockStoreMockRecorder) GetUserOfficebyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOfficebyUuId", reflect.TypeOf((*MockStore)(nil).GetUserOfficebyUuId), arg0, arg1)
}

// GetUserProduct mocks base method.
func (m *MockStore) GetUserProduct(arg0 context.Context, arg1 uuid.UUID) (db8.UserProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProduct", arg0, arg1)
	ret0, _ := ret[0].(db8.UserProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProduct indicates an expected call of GetUserProduct.
func (mr *MockStoreMockRecorder) GetUserProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProduct", reflect.TypeOf((*MockStore)(nil).GetUserProduct), arg0, arg1)
}

// GetUserProductbyUuId mocks base method.
func (m *MockStore) GetUserProductbyUuId(arg0 context.Context, arg1 uuid.UUID) (db8.UserProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProductbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db8.UserProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProductbyUuId indicates an expected call of GetUserProductbyUuId.
func (mr *MockStoreMockRecorder) GetUserProductbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProductbyUuId", reflect.TypeOf((*MockStore)(nil).GetUserProductbyUuId), arg0, arg1)
}

// GetUserbyName mocks base method.
func (m *MockStore) GetUserbyName(arg0 context.Context, arg1 string) (db8.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserbyName", arg0, arg1)
	ret0, _ := ret[0].(db8.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserbyName indicates an expected call of GetUserbyName.
func (mr *MockStoreMockRecorder) GetUserbyName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserbyName", reflect.TypeOf((*MockStore)(nil).GetUserbyName), arg0, arg1)
}

// GetUserbyUuId mocks base method.
func (m *MockStore) GetUserbyUuId(arg0 context.Context, arg1 uuid.UUID) (db8.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserbyUuId", arg0, arg1)
	ret0, _ := ret[0].(db8.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserbyUuId indicates an expected call of GetUserbyUuId.
func (mr *MockStoreMockRecorder) GetUserbyUuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserbyUuId", reflect.TypeOf((*MockStore)(nil).GetUserbyUuId), arg0, arg1)
}

// ListAccessAccountType mocks base method.
func (m *MockStore) ListAccessAccountType(arg0 context.Context, arg1 db0.ListAccessAccountTypeParams) ([]db0.AccessAccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessAccountType", arg0, arg1)
	ret0, _ := ret[0].([]db0.AccessAccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessAccountType indicates an expected call of ListAccessAccountType.
func (mr *MockStoreMockRecorder) ListAccessAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessAccountType", reflect.TypeOf((*MockStore)(nil).ListAccessAccountType), arg0, arg1)
}

// ListAccessConfig mocks base method.
func (m *MockStore) ListAccessConfig(arg0 context.Context, arg1 db0.ListAccessConfigParams) ([]db0.AccessConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessConfig", arg0, arg1)
	ret0, _ := ret[0].([]db0.AccessConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessConfig indicates an expected call of ListAccessConfig.
func (mr *MockStoreMockRecorder) ListAccessConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessConfig", reflect.TypeOf((*MockStore)(nil).ListAccessConfig), arg0, arg1)
}

// ListAccessObject mocks base method.
func (m *MockStore) ListAccessObject(arg0 context.Context, arg1 db0.ListAccessObjectParams) ([]db0.AccessObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessObject", arg0, arg1)
	ret0, _ := ret[0].([]db0.AccessObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessObject indicates an expected call of ListAccessObject.
func (mr *MockStoreMockRecorder) ListAccessObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessObject", reflect.TypeOf((*MockStore)(nil).ListAccessObject), arg0, arg1)
}

// ListAccessProduct mocks base method.
func (m *MockStore) ListAccessProduct(arg0 context.Context, arg1 db0.ListAccessProductParams) ([]db0.AccessProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessProduct", arg0, arg1)
	ret0, _ := ret[0].([]db0.AccessProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessProduct indicates an expected call of ListAccessProduct.
func (mr *MockStoreMockRecorder) ListAccessProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessProduct", reflect.TypeOf((*MockStore)(nil).ListAccessProduct), arg0, arg1)
}

// ListAccessRole mocks base method.
func (m *MockStore) ListAccessRole(arg0 context.Context, arg1 db0.ListAccessRoleParams) ([]db0.AccessRoleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessRole", arg0, arg1)
	ret0, _ := ret[0].([]db0.AccessRoleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessRole indicates an expected call of ListAccessRole.
func (mr *MockStoreMockRecorder) ListAccessRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessRole", reflect.TypeOf((*MockStore)(nil).ListAccessRole), arg0, arg1)
}

// ListAccount mocks base method.
func (m *MockStore) ListAccount(arg0 context.Context, arg1 db1.ListAccountParams) ([]db1.AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccount", arg0, arg1)
	ret0, _ := ret[0].([]db1.AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccount indicates an expected call of ListAccount.
func (mr *MockStoreMockRecorder) ListAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccount", reflect.TypeOf((*MockStore)(nil).ListAccount), arg0, arg1)
}

// ListAccountBeneficiary mocks base method.
func (m *MockStore) ListAccountBeneficiary(arg0 context.Context, arg1 db1.ListAccountBeneficiaryParams) ([]db1.AccountBeneficiaryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountBeneficiary", arg0, arg1)
	ret0, _ := ret[0].([]db1.AccountBeneficiaryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountBeneficiary indicates an expected call of ListAccountBeneficiary.
func (mr *MockStoreMockRecorder) ListAccountBeneficiary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountBeneficiary", reflect.TypeOf((*MockStore)(nil).ListAccountBeneficiary), arg0, arg1)
}

// ListAccountClass mocks base method.
func (m *MockStore) ListAccountClass(arg0 context.Context, arg1 db1.ListAccountClassParams) ([]db1.AccountClassInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountClass", arg0, arg1)
	ret0, _ := ret[0].([]db1.AccountClassInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountClass indicates an expected call of ListAccountClass.
func (mr *MockStoreMockRecorder) ListAccountClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountClass", reflect.TypeOf((*MockStore)(nil).ListAccountClass), arg0, arg1)
}

// ListAccountInterest mocks base method.
func (m *MockStore) ListAccountInterest(arg0 context.Context, arg1 db1.ListAccountInterestParams) ([]db1.AccountInterestInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountInterest", arg0, arg1)
	ret0, _ := ret[0].([]db1.AccountInterestInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountInterest indicates an expected call of ListAccountInterest.
func (mr *MockStoreMockRecorder) ListAccountInterest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountInterest", reflect.TypeOf((*MockStore)(nil).ListAccountInterest), arg0, arg1)
}

// ListAccountInventory mocks base method.
func (m *MockStore) ListAccountInventory(arg0 context.Context, arg1 db1.ListAccountInventoryParams) ([]db1.AccountInventoryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountInventory", arg0, arg1)
	ret0, _ := ret[0].([]db1.AccountInventoryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountInventory indicates an expected call of ListAccountInventory.
func (mr *MockStoreMockRecorder) ListAccountInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountInventory", reflect.TypeOf((*MockStore)(nil).ListAccountInventory), arg0, arg1)
}

// ListAccountInventoryTran mocks base method.
func (m *MockStore) ListAccountInventoryTran(arg0 context.Context, arg1 db7.ListAccountInventoryTranParams) ([]db7.AccountInventoryTranInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountInventoryTran", arg0, arg1)
	ret0, _ := ret[0].([]db7.AccountInventoryTranInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountInventoryTran indicates an expected call of ListAccountInventoryTran.
func (mr *MockStoreMockRecorder) ListAccountInventoryTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountInventoryTran", reflect.TypeOf((*MockStore)(nil).ListAccountInventoryTran), arg0, arg1)
}

// ListAccountParam mocks base method.
func (m *MockStore) ListAccountParam(arg0 context.Context, arg1 db1.ListAccountParamParams) ([]db1.AccountParamInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountParam", arg0, arg1)
	ret0, _ := ret[0].([]db1.AccountParamInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountParam indicates an expected call of ListAccountParam.
func (mr *MockStoreMockRecorder) ListAccountParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountParam", reflect.TypeOf((*MockStore)(nil).ListAccountParam), arg0, arg1)
}

// ListAccountTerm mocks base method.
func (m *MockStore) ListAccountTerm(arg0 context.Context, arg1 db1.ListAccountTermParams) ([]db1.AccountTermInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountTerm", arg0, arg1)
	ret0, _ := ret[0].([]db1.AccountTermInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountTerm indicates an expected call of ListAccountTerm.
func (mr *MockStoreMockRecorder) ListAccountTerm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountTerm", reflect.TypeOf((*MockStore)(nil).ListAccountTerm), arg0, arg1)
}

// ListAccountTran mocks base method.
func (m *MockStore) ListAccountTran(arg0 context.Context, arg1 db7.ListAccountTranParams) ([]db7.AccountTranInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountTran", arg0, arg1)
	ret0, _ := ret[0].([]db7.AccountTranInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountTran indicates an expected call of ListAccountTran.
func (mr *MockStoreMockRecorder) ListAccountTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountTran", reflect.TypeOf((*MockStore)(nil).ListAccountTran), arg0, arg1)
}

// ListAccountType mocks base method.
func (m *MockStore) ListAccountType(arg0 context.Context, arg1 db1.ListAccountTypeParams) ([]db1.AccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountType", arg0, arg1)
	ret0, _ := ret[0].([]db1.AccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountType indicates an expected call of ListAccountType.
func (mr *MockStoreMockRecorder) ListAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountType", reflect.TypeOf((*MockStore)(nil).ListAccountType), arg0, arg1)
}

// ListActionTicket mocks base method.
func (m *MockStore) ListActionTicket(arg0 context.Context, arg1 db7.ListActionTicketParams) ([]db7.ActionTicketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActionTicket", arg0, arg1)
	ret0, _ := ret[0].([]db7.ActionTicketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActionTicket indicates an expected call of ListActionTicket.
func (mr *MockStoreMockRecorder) ListActionTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActionTicket", reflect.TypeOf((*MockStore)(nil).ListActionTicket), arg0, arg1)
}

// ListAddressList mocks base method.
func (m *MockStore) ListAddressList(arg0 context.Context, arg1 db4.ListAddressListParams) ([]db4.AddressListInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddressList", arg0, arg1)
	ret0, _ := ret[0].([]db4.AddressListInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddressList indicates an expected call of ListAddressList.
func (mr *MockStoreMockRecorder) ListAddressList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddressList", reflect.TypeOf((*MockStore)(nil).ListAddressList), arg0, arg1)
}

// ListChargeType mocks base method.
func (m *MockStore) ListChargeType(arg0 context.Context, arg1 db1.ListChargeTypeParams) ([]db1.ChargeTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChargeType", arg0, arg1)
	ret0, _ := ret[0].([]db1.ChargeTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChargeType indicates an expected call of ListChargeType.
func (mr *MockStoreMockRecorder) ListChargeType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChargeType", reflect.TypeOf((*MockStore)(nil).ListChargeType), arg0, arg1)
}

// ListChartofAccount mocks base method.
func (m *MockStore) ListChartofAccount(arg0 context.Context, arg1 db5.ListChartofAccountParams) ([]db5.ChartofAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChartofAccount", arg0, arg1)
	ret0, _ := ret[0].([]db5.ChartofAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChartofAccount indicates an expected call of ListChartofAccount.
func (mr *MockStoreMockRecorder) ListChartofAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChartofAccount", reflect.TypeOf((*MockStore)(nil).ListChartofAccount), arg0, arg1)
}

// ListCoaParent mocks base method.
func (m *MockStore) ListCoaParent(arg0 context.Context, arg1 db5.ListCoaParentParams) ([]db5.CoaParentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoaParent", arg0, arg1)
	ret0, _ := ret[0].([]db5.CoaParentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoaParent indicates an expected call of ListCoaParent.
func (mr *MockStoreMockRecorder) ListCoaParent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoaParent", reflect.TypeOf((*MockStore)(nil).ListCoaParent), arg0, arg1)
}

// ListComment mocks base method.
func (m *MockStore) ListComment(arg0 context.Context, arg1 db6.ListCommentParams) ([]db6.CommentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComment", arg0, arg1)
	ret0, _ := ret[0].([]db6.CommentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComment indicates an expected call of ListComment.
func (mr *MockStoreMockRecorder) ListComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComment", reflect.TypeOf((*MockStore)(nil).ListComment), arg0, arg1)
}

// ListContact mocks base method.
func (m *MockStore) ListContact(arg0 context.Context, arg1 db4.ListContactParams) ([]db4.ContactInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContact", arg0, arg1)
	ret0, _ := ret[0].([]db4.ContactInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContact indicates an expected call of ListContact.
func (mr *MockStoreMockRecorder) ListContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContact", reflect.TypeOf((*MockStore)(nil).ListContact), arg0, arg1)
}

// ListCustomer mocks base method.
func (m *MockStore) ListCustomer(arg0 context.Context, arg1 db2.ListCustomerParams) ([]db2.CustomerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomer", arg0, arg1)
	ret0, _ := ret[0].([]db2.CustomerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomer indicates an expected call of ListCustomer.
func (mr *MockStoreMockRecorder) ListCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomer", reflect.TypeOf((*MockStore)(nil).ListCustomer), arg0, arg1)
}

// ListCustomerBeneficiary mocks base method.
func (m *MockStore) ListCustomerBeneficiary(arg0 context.Context, arg1 db2.ListCustomerBeneficiaryParams) ([]db2.CustomerBeneficiaryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerBeneficiary", arg0, arg1)
	ret0, _ := ret[0].([]db2.CustomerBeneficiaryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerBeneficiary indicates an expected call of ListCustomerBeneficiary.
func (mr *MockStoreMockRecorder) ListCustomerBeneficiary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerBeneficiary", reflect.TypeOf((*MockStore)(nil).ListCustomerBeneficiary), arg0, arg1)
}

// ListCustomerEvent mocks base method.
func (m *MockStore) ListCustomerEvent(arg0 context.Context, arg1 db7.ListCustomerEventParams) ([]db7.CustomerEventInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerEvent", arg0, arg1)
	ret0, _ := ret[0].([]db7.CustomerEventInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerEvent indicates an expected call of ListCustomerEvent.
func (mr *MockStoreMockRecorder) ListCustomerEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerEvent", reflect.TypeOf((*MockStore)(nil).ListCustomerEvent), arg0, arg1)
}

// ListCustomerGroup mocks base method.
func (m *MockStore) ListCustomerGroup(arg0 context.Context, arg1 db2.ListCustomerGroupParams) ([]db2.CustomerGroupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomerGroup", arg0, arg1)
	ret0, _ := ret[0].([]db2.CustomerGroupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomerGroup indicates an expected call of ListCustomerGroup.
func (mr *MockStoreMockRecorder) ListCustomerGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomerGroup", reflect.TypeOf((*MockStore)(nil).ListCustomerGroup), arg0, arg1)
}

// ListDocument mocks base method.
func (m *MockStore) ListDocument(arg0 context.Context, arg1 db3.ListDocumentParams) ([]db3.DocumentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDocument", arg0, arg1)
	ret0, _ := ret[0].([]db3.DocumentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDocument indicates an expected call of ListDocument.
func (mr *MockStoreMockRecorder) ListDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDocument", reflect.TypeOf((*MockStore)(nil).ListDocument), arg0, arg1)
}

// ListEducational mocks base method.
func (m *MockStore) ListEducational(arg0 context.Context, arg1 db4.ListEducationalParams) ([]db4.EducationalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEducational", arg0, arg1)
	ret0, _ := ret[0].([]db4.EducationalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEducational indicates an expected call of ListEducational.
func (mr *MockStoreMockRecorder) ListEducational(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEducational", reflect.TypeOf((*MockStore)(nil).ListEducational), arg0, arg1)
}

// ListEmployee mocks base method.
func (m *MockStore) ListEmployee(arg0 context.Context, arg1 db4.ListEmployeeParams) ([]db4.EmployeeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployee", arg0, arg1)
	ret0, _ := ret[0].([]db4.EmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployee indicates an expected call of ListEmployee.
func (mr *MockStoreMockRecorder) ListEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployee", reflect.TypeOf((*MockStore)(nil).ListEmployee), arg0, arg1)
}

// ListEmployeeEvent mocks base method.
func (m *MockStore) ListEmployeeEvent(arg0 context.Context, arg1 db7.ListEmployeeEventParams) ([]db7.EmployeeEventInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeeEvent", arg0, arg1)
	ret0, _ := ret[0].([]db7.EmployeeEventInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeeEvent indicates an expected call of ListEmployeeEvent.
func (mr *MockStoreMockRecorder) ListEmployeeEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeeEvent", reflect.TypeOf((*MockStore)(nil).ListEmployeeEvent), arg0, arg1)
}

// ListEmployment mocks base method.
func (m *MockStore) ListEmployment(arg0 context.Context, arg1 db4.ListEmploymentParams) ([]db4.EmploymentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployment", arg0, arg1)
	ret0, _ := ret[0].([]db4.EmploymentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployment indicates an expected call of ListEmployment.
func (mr *MockStoreMockRecorder) ListEmployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployment", reflect.TypeOf((*MockStore)(nil).ListEmployment), arg0, arg1)
}

// ListEntries mocks base method.
func (m *MockStore) ListEntries(arg0 context.Context, arg1 db7.ListEntriesParams) ([]model.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", arg0, arg1)
	ret0, _ := ret[0].([]model.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockStoreMockRecorder) ListEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockStore)(nil).ListEntries), arg0, arg1)
}

// ListFollower mocks base method.
func (m *MockStore) ListFollower(arg0 context.Context, arg1 db6.ListFollowerParams) ([]db6.FollowerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollower", arg0, arg1)
	ret0, _ := ret[0].([]db6.FollowerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollower indicates an expected call of ListFollower.
func (mr *MockStoreMockRecorder) ListFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollower", reflect.TypeOf((*MockStore)(nil).ListFollower), arg0, arg1)
}

// ListFxrate mocks base method.
func (m *MockStore) ListFxrate(arg0 context.Context, arg1 db5.ListFxrateParams) ([]db5.FxrateInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFxrate", arg0, arg1)
	ret0, _ := ret[0].([]db5.FxrateInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFxrate indicates an expected call of ListFxrate.
func (mr *MockStoreMockRecorder) ListFxrate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFxrate", reflect.TypeOf((*MockStore)(nil).ListFxrate), arg0, arg1)
}

// ListGeography mocks base method.
func (m *MockStore) ListGeography(arg0 context.Context, arg1 db5.ListGeographyParams) ([]db5.GeographyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGeography", arg0, arg1)
	ret0, _ := ret[0].([]db5.GeographyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGeography indicates an expected call of ListGeography.
func (mr *MockStoreMockRecorder) ListGeography(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeography", reflect.TypeOf((*MockStore)(nil).ListGeography), arg0, arg1)
}

// ListGlAccount mocks base method.
func (m *MockStore) ListGlAccount(arg0 context.Context, arg1 db1.ListGlAccountParams) ([]db1.GlAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGlAccount", arg0, arg1)
	ret0, _ := ret[0].([]db1.GlAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGlAccount indicates an expected call of ListGlAccount.
func (mr *MockStoreMockRecorder) ListGlAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGlAccount", reflect.TypeOf((*MockStore)(nil).ListGlAccount), arg0, arg1)
}

// ListIdentityInfo mocks base method.
func (m *MockStore) ListIdentityInfo(arg0 context.Context, arg1 db4.ListIdentityInfoParams) ([]db4.IdentityInfoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIdentityInfo", arg0, arg1)
	ret0, _ := ret[0].([]db4.IdentityInfoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIdentityInfo indicates an expected call of ListIdentityInfo.
func (mr *MockStoreMockRecorder) ListIdentityInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIdentityInfo", reflect.TypeOf((*MockStore)(nil).ListIdentityInfo), arg0, arg1)
}

// ListIds mocks base method.
func (m *MockStore) ListIds(arg0 context.Context, arg1 db4.ListIdsParams) ([]db4.IdsInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIds", arg0, arg1)
	ret0, _ := ret[0].([]db4.IdsInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIds indicates an expected call of ListIds.
func (mr *MockStoreMockRecorder) ListIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIds", reflect.TypeOf((*MockStore)(nil).ListIds), arg0, arg1)
}

// ListIncomeSource mocks base method.
func (m *MockStore) ListIncomeSource(arg0 context.Context, arg1 db4.ListIncomeSourceParams) ([]db4.IncomeSourceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncomeSource", arg0, arg1)
	ret0, _ := ret[0].([]db4.IncomeSourceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncomeSource indicates an expected call of ListIncomeSource.
func (mr *MockStoreMockRecorder) ListIncomeSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncomeSource", reflect.TypeOf((*MockStore)(nil).ListIncomeSource), arg0, arg1)
}

// ListJournalDetail mocks base method.
func (m *MockStore) ListJournalDetail(arg0 context.Context, arg1 db7.ListJournalDetailParams) ([]db7.JournalDetailInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJournalDetail", arg0, arg1)
	ret0, _ := ret[0].([]db7.JournalDetailInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJournalDetail indicates an expected call of ListJournalDetail.
func (mr *MockStoreMockRecorder) ListJournalDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJournalDetail", reflect.TypeOf((*MockStore)(nil).ListJournalDetail), arg0, arg1)
}

// ListOffice mocks base method.
func (m *MockStore) ListOffice(arg0 context.Context, arg1 db4.ListOfficeParams) ([]db4.OfficeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOffice", arg0, arg1)
	ret0, _ := ret[0].([]db4.OfficeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOffice indicates an expected call of ListOffice.
func (mr *MockStoreMockRecorder) ListOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOffice", reflect.TypeOf((*MockStore)(nil).ListOffice), arg0, arg1)
}

// ListOfficeAccount mocks base method.
func (m *MockStore) ListOfficeAccount(arg0 context.Context, arg1 db1.ListOfficeAccountParams) ([]db1.OfficeAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfficeAccount", arg0, arg1)
	ret0, _ := ret[0].([]db1.OfficeAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfficeAccount indicates an expected call of ListOfficeAccount.
func (mr *MockStoreMockRecorder) ListOfficeAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfficeAccount", reflect.TypeOf((*MockStore)(nil).ListOfficeAccount), arg0, arg1)
}

// ListOfficeAccountTran mocks base method.
func (m *MockStore) ListOfficeAccountTran(arg0 context.Context, arg1 db7.ListOfficeAccountTranParams) ([]db7.OfficeAccountTranInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfficeAccountTran", arg0, arg1)
	ret0, _ := ret[0].([]db7.OfficeAccountTranInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfficeAccountTran indicates an expected call of ListOfficeAccountTran.
func (mr *MockStoreMockRecorder) ListOfficeAccountTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfficeAccountTran", reflect.TypeOf((*MockStore)(nil).ListOfficeAccountTran), arg0, arg1)
}

// ListOfficeAccountType mocks base method.
func (m *MockStore) ListOfficeAccountType(arg0 context.Context, arg1 db1.ListOfficeAccountTypeParams) ([]db1.OfficeAccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOfficeAccountType", arg0, arg1)
	ret0, _ := ret[0].([]db1.OfficeAccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOfficeAccountType indicates an expected call of ListOfficeAccountType.
func (mr *MockStoreMockRecorder) ListOfficeAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOfficeAccountType", reflect.TypeOf((*MockStore)(nil).ListOfficeAccountType), arg0, arg1)
}

// ListOtherSchedule mocks base method.
func (m *MockStore) ListOtherSchedule(arg0 context.Context, arg1 db1.ListOtherScheduleParams) ([]db1.OtherScheduleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOtherSchedule", arg0, arg1)
	ret0, _ := ret[0].([]db1.OtherScheduleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOtherSchedule indicates an expected call of ListOtherSchedule.
func (mr *MockStoreMockRecorder) ListOtherSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOtherSchedule", reflect.TypeOf((*MockStore)(nil).ListOtherSchedule), arg0, arg1)
}

// ListPersonalInfo mocks base method.
func (m *MockStore) ListPersonalInfo(arg0 context.Context, arg1 db4.ListPersonalInfoParams) ([]db4.PersonalInfoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPersonalInfo", arg0, arg1)
	ret0, _ := ret[0].([]db4.PersonalInfoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPersonalInfo indicates an expected call of ListPersonalInfo.
func (mr *MockStoreMockRecorder) ListPersonalInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPersonalInfo", reflect.TypeOf((*MockStore)(nil).ListPersonalInfo), arg0, arg1)
}

// ListPost mocks base method.
func (m *MockStore) ListPost(arg0 context.Context, arg1 db6.ListPostParams) ([]db6.PostInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPost", arg0, arg1)
	ret0, _ := ret[0].([]db6.PostInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPost indicates an expected call of ListPost.
func (mr *MockStoreMockRecorder) ListPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPost", reflect.TypeOf((*MockStore)(nil).ListPost), arg0, arg1)
}

// ListProduct mocks base method.
func (m *MockStore) ListProduct(arg0 context.Context, arg1 db1.ListProductParams) ([]db1.ProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProduct", arg0, arg1)
	ret0, _ := ret[0].([]db1.ProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProduct indicates an expected call of ListProduct.
func (mr *MockStoreMockRecorder) ListProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProduct", reflect.TypeOf((*MockStore)(nil).ListProduct), arg0, arg1)
}

// ListReference mocks base method.
func (m *MockStore) ListReference(arg0 context.Context, arg1 db5.ListReferenceParams) ([]db5.ReferenceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReference", arg0, arg1)
	ret0, _ := ret[0].([]db5.ReferenceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReference indicates an expected call of ListReference.
func (mr *MockStoreMockRecorder) ListReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReference", reflect.TypeOf((*MockStore)(nil).ListReference), arg0, arg1)
}

// ListReferenceType mocks base method.
func (m *MockStore) ListReferenceType(arg0 context.Context, arg1 db5.ListReferenceTypeParams) ([]db5.ReferenceTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReferenceType", arg0, arg1)
	ret0, _ := ret[0].([]db5.ReferenceTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReferenceType indicates an expected call of ListReferenceType.
func (mr *MockStoreMockRecorder) ListReferenceType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReferenceType", reflect.TypeOf((*MockStore)(nil).ListReferenceType), arg0, arg1)
}

// ListRelation mocks base method.
func (m *MockStore) ListRelation(arg0 context.Context, arg1 db4.ListRelationParams) ([]db4.RelationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelation", arg0, arg1)
	ret0, _ := ret[0].([]db4.RelationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelation indicates an expected call of ListRelation.
func (mr *MockStoreMockRecorder) ListRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelation", reflect.TypeOf((*MockStore)(nil).ListRelation), arg0, arg1)
}

// ListSchedule mocks base method.
func (m *MockStore) ListSchedule(arg0 context.Context, arg1 db1.ListScheduleParams) ([]db1.ScheduleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedule", arg0, arg1)
	ret0, _ := ret[0].([]db1.ScheduleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedule indicates an expected call of ListSchedule.
func (mr *MockStoreMockRecorder) ListSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedule", reflect.TypeOf((*MockStore)(nil).ListSchedule), arg0, arg1)
}

// ListSocialMediaCredential mocks base method.
func (m *MockStore) ListSocialMediaCredential(arg0 context.Context, arg1 db8.ListSocialMediaCredentialParams) ([]db8.SocialMediaCredentialInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSocialMediaCredential", arg0, arg1)
	ret0, _ := ret[0].([]db8.SocialMediaCredentialInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSocialMediaCredential indicates an expected call of ListSocialMediaCredential.
func (mr *MockStoreMockRecorder) ListSocialMediaCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSocialMediaCredential", reflect.TypeOf((*MockStore)(nil).ListSocialMediaCredential), arg0, arg1)
}

// ListStorage mocks base method.
func (m *MockStore) ListStorage(arg0 context.Context, arg1 db3.ListStorageParams) ([]db3.StorageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorage", arg0, arg1)
	ret0, _ := ret[0].([]db3.StorageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorage indicates an expected call of ListStorage.
func (mr *MockStoreMockRecorder) ListStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorage", reflect.TypeOf((*MockStore)(nil).ListStorage), arg0, arg1)
}

// ListSystemConfig mocks base method.
func (m *MockStore) ListSystemConfig(arg0 context.Context, arg1 db5.ListSystemConfigParams) ([]db5.SystemConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSystemConfig", arg0, arg1)
	ret0, _ := ret[0].([]db5.SystemConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSystemConfig indicates an expected call of ListSystemConfig.
func (mr *MockStoreMockRecorder) ListSystemConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSystemConfig", reflect.TypeOf((*MockStore)(nil).ListSystemConfig), arg0, arg1)
}

// ListTicket mocks base method.
func (m *MockStore) ListTicket(arg0 context.Context, arg1 db7.ListTicketParams) ([]db7.TicketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTicket", arg0, arg1)
	ret0, _ := ret[0].([]db7.TicketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTicket indicates an expected call of ListTicket.
func (mr *MockStoreMockRecorder) ListTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTicket", reflect.TypeOf((*MockStore)(nil).ListTicket), arg0, arg1)
}

// ListTransfers mocks base method.
func (m *MockStore) ListTransfers(arg0 context.Context, arg1 db7.ListTransfersParams) ([]model.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", arg0, arg1)
	ret0, _ := ret[0].([]model.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockStoreMockRecorder) ListTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockStore)(nil).ListTransfers), arg0, arg1)
}

// ListTrnAction mocks base method.
func (m *MockStore) ListTrnAction(arg0 context.Context, arg1 db7.ListTrnActionParams) ([]db7.TrnActionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrnAction", arg0, arg1)
	ret0, _ := ret[0].([]db7.TrnActionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrnAction indicates an expected call of ListTrnAction.
func (mr *MockStoreMockRecorder) ListTrnAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrnAction", reflect.TypeOf((*MockStore)(nil).ListTrnAction), arg0, arg1)
}

// ListTrnHeadRelation mocks base method.
func (m *MockStore) ListTrnHeadRelation(arg0 context.Context, arg1 db7.ListTrnHeadRelationParams) ([]db7.TrnHeadRelationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTrnHeadRelation", arg0, arg1)
	ret0, _ := ret[0].([]db7.TrnHeadRelationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrnHeadRelation indicates an expected call of ListTrnHeadRelation.
func (mr *MockStoreMockRecorder) ListTrnHeadRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrnHeadRelation", reflect.TypeOf((*MockStore)(nil).ListTrnHeadRelation), arg0, arg1)
}

// ListUnitConversion mocks base method.
func (m *MockStore) ListUnitConversion(arg0 context.Context, arg1 db5.ListUnitConversionParams) ([]db5.UnitConversionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnitConversion", arg0, arg1)
	ret0, _ := ret[0].([]db5.UnitConversionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnitConversion indicates an expected call of ListUnitConversion.
func (mr *MockStoreMockRecorder) ListUnitConversion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnitConversion", reflect.TypeOf((*MockStore)(nil).ListUnitConversion), arg0, arg1)
}

// ListUser mocks base method.
func (m *MockStore) ListUser(arg0 context.Context, arg1 db8.ListUserParams) ([]db8.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", arg0, arg1)
	ret0, _ := ret[0].([]db8.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockStoreMockRecorder) ListUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockStore)(nil).ListUser), arg0, arg1)
}

// ListUserAccountType mocks base method.
func (m *MockStore) ListUserAccountType(arg0 context.Context, arg1 db8.ListUserAccountTypeParams) ([]db8.UserAccountTypeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAccountType", arg0, arg1)
	ret0, _ := ret[0].([]db8.UserAccountTypeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAccountType indicates an expected call of ListUserAccountType.
func (mr *MockStoreMockRecorder) ListUserAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAccountType", reflect.TypeOf((*MockStore)(nil).ListUserAccountType), arg0, arg1)
}

// ListUserConfig mocks base method.
func (m *MockStore) ListUserConfig(arg0 context.Context, arg1 db8.ListUserConfigParams) ([]db8.UserConfigInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserConfig", arg0, arg1)
	ret0, _ := ret[0].([]db8.UserConfigInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserConfig indicates an expected call of ListUserConfig.
func (mr *MockStoreMockRecorder) ListUserConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserConfig", reflect.TypeOf((*MockStore)(nil).ListUserConfig), arg0, arg1)
}

// ListUserObject mocks base method.
func (m *MockStore) ListUserObject(arg0 context.Context, arg1 db8.ListUserObjectParams) ([]db8.UserObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserObject", arg0, arg1)
	ret0, _ := ret[0].([]db8.UserObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserObject indicates an expected call of ListUserObject.
func (mr *MockStoreMockRecorder) ListUserObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserObject", reflect.TypeOf((*MockStore)(nil).ListUserObject), arg0, arg1)
}

// ListUserOffice mocks base method.
func (m *MockStore) ListUserOffice(arg0 context.Context, arg1 db8.ListUserOfficeParams) ([]db8.UserOfficeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserOffice", arg0, arg1)
	ret0, _ := ret[0].([]db8.UserOfficeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserOffice indicates an expected call of ListUserOffice.
func (mr *MockStoreMockRecorder) ListUserOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserOffice", reflect.TypeOf((*MockStore)(nil).ListUserOffice), arg0, arg1)
}

// ListUserProduct mocks base method.
func (m *MockStore) ListUserProduct(arg0 context.Context, arg1 db8.ListUserProductParams) ([]db8.UserProductInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserProduct", arg0, arg1)
	ret0, _ := ret[0].([]db8.UserProductInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserProduct indicates an expected call of ListUserProduct.
func (mr *MockStoreMockRecorder) ListUserProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserProduct", reflect.TypeOf((*MockStore)(nil).ListUserProduct), arg0, arg1)
}

// SearchGeography mocks base method.
func (m *MockStore) SearchGeography(arg0 context.Context, arg1 db5.SearchGeographyParams) ([]db5.GeographyInfoSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchGeography", arg0, arg1)
	ret0, _ := ret[0].([]db5.GeographyInfoSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchGeography indicates an expected call of SearchGeography.
func (mr *MockStoreMockRecorder) SearchGeography(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchGeography", reflect.TypeOf((*MockStore)(nil).SearchGeography), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 db.TransferTxParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateAccessAccountType mocks base method.
func (m *MockStore) UpdateAccessAccountType(arg0 context.Context, arg1 db0.AccessAccountTypeRequest) (model.AccessAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessAccountType", arg0, arg1)
	ret0, _ := ret[0].(model.AccessAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessAccountType indicates an expected call of UpdateAccessAccountType.
func (mr *MockStoreMockRecorder) UpdateAccessAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessAccountType", reflect.TypeOf((*MockStore)(nil).UpdateAccessAccountType), arg0, arg1)
}

// UpdateAccessConfig mocks base method.
func (m *MockStore) UpdateAccessConfig(arg0 context.Context, arg1 db0.AccessConfigRequest) (model.AccessConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessConfig", arg0, arg1)
	ret0, _ := ret[0].(model.AccessConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessConfig indicates an expected call of UpdateAccessConfig.
func (mr *MockStoreMockRecorder) UpdateAccessConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessConfig", reflect.TypeOf((*MockStore)(nil).UpdateAccessConfig), arg0, arg1)
}

// UpdateAccessObject mocks base method.
func (m *MockStore) UpdateAccessObject(arg0 context.Context, arg1 db0.AccessObjectRequest) (model.AccessObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessObject", arg0, arg1)
	ret0, _ := ret[0].(model.AccessObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessObject indicates an expected call of UpdateAccessObject.
func (mr *MockStoreMockRecorder) UpdateAccessObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessObject", reflect.TypeOf((*MockStore)(nil).UpdateAccessObject), arg0, arg1)
}

// UpdateAccessProduct mocks base method.
func (m *MockStore) UpdateAccessProduct(arg0 context.Context, arg1 db0.AccessProductRequest) (model.AccessProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessProduct", arg0, arg1)
	ret0, _ := ret[0].(model.AccessProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessProduct indicates an expected call of UpdateAccessProduct.
func (mr *MockStoreMockRecorder) UpdateAccessProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessProduct", reflect.TypeOf((*MockStore)(nil).UpdateAccessProduct), arg0, arg1)
}

// UpdateAccessRole mocks base method.
func (m *MockStore) UpdateAccessRole(arg0 context.Context, arg1 db0.AccessRoleRequest) (model.AccessRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessRole", arg0, arg1)
	ret0, _ := ret[0].(model.AccessRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessRole indicates an expected call of UpdateAccessRole.
func (mr *MockStoreMockRecorder) UpdateAccessRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessRole", reflect.TypeOf((*MockStore)(nil).UpdateAccessRole), arg0, arg1)
}

// UpdateAccount mocks base method.
func (m *MockStore) UpdateAccount(arg0 context.Context, arg1 db1.AccountRequest) (model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount.
func (mr *MockStoreMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), arg0, arg1)
}

// UpdateAccountBeneficiary mocks base method.
func (m *MockStore) UpdateAccountBeneficiary(arg0 context.Context, arg1 db1.AccountBeneficiaryRequest) (model.AccountBeneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBeneficiary", arg0, arg1)
	ret0, _ := ret[0].(model.AccountBeneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountBeneficiary indicates an expected call of UpdateAccountBeneficiary.
func (mr *MockStoreMockRecorder) UpdateAccountBeneficiary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBeneficiary", reflect.TypeOf((*MockStore)(nil).UpdateAccountBeneficiary), arg0, arg1)
}

// UpdateAccountClass mocks base method.
func (m *MockStore) UpdateAccountClass(arg0 context.Context, arg1 db1.AccountClassRequest) (model.AccountClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountClass", arg0, arg1)
	ret0, _ := ret[0].(model.AccountClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountClass indicates an expected call of UpdateAccountClass.
func (mr *MockStoreMockRecorder) UpdateAccountClass(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountClass", reflect.TypeOf((*MockStore)(nil).UpdateAccountClass), arg0, arg1)
}

// UpdateAccountInterest mocks base method.
func (m *MockStore) UpdateAccountInterest(arg0 context.Context, arg1 db1.AccountInterestRequest) (model.AccountInterest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountInterest", arg0, arg1)
	ret0, _ := ret[0].(model.AccountInterest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountInterest indicates an expected call of UpdateAccountInterest.
func (mr *MockStoreMockRecorder) UpdateAccountInterest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountInterest", reflect.TypeOf((*MockStore)(nil).UpdateAccountInterest), arg0, arg1)
}

// UpdateAccountInventory mocks base method.
func (m *MockStore) UpdateAccountInventory(arg0 context.Context, arg1 db1.AccountInventoryRequest) (model.AccountInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountInventory", arg0, arg1)
	ret0, _ := ret[0].(model.AccountInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountInventory indicates an expected call of UpdateAccountInventory.
func (mr *MockStoreMockRecorder) UpdateAccountInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountInventory", reflect.TypeOf((*MockStore)(nil).UpdateAccountInventory), arg0, arg1)
}

// UpdateAccountInventoryTran mocks base method.
func (m *MockStore) UpdateAccountInventoryTran(arg0 context.Context, arg1 db7.AccountInventoryTranRequest) (model.AccountInventoryTran, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountInventoryTran", arg0, arg1)
	ret0, _ := ret[0].(model.AccountInventoryTran)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountInventoryTran indicates an expected call of UpdateAccountInventoryTran.
func (mr *MockStoreMockRecorder) UpdateAccountInventoryTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountInventoryTran", reflect.TypeOf((*MockStore)(nil).UpdateAccountInventoryTran), arg0, arg1)
}

// UpdateAccountParam mocks base method.
func (m *MockStore) UpdateAccountParam(arg0 context.Context, arg1 db1.AccountParamRequest) (model.AccountParam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountParam", arg0, arg1)
	ret0, _ := ret[0].(model.AccountParam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountParam indicates an expected call of UpdateAccountParam.
func (mr *MockStoreMockRecorder) UpdateAccountParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountParam", reflect.TypeOf((*MockStore)(nil).UpdateAccountParam), arg0, arg1)
}

// UpdateAccountTerm mocks base method.
func (m *MockStore) UpdateAccountTerm(arg0 context.Context, arg1 db1.AccountTermRequest) (model.AccountTerm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountTerm", arg0, arg1)
	ret0, _ := ret[0].(model.AccountTerm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountTerm indicates an expected call of UpdateAccountTerm.
func (mr *MockStoreMockRecorder) UpdateAccountTerm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountTerm", reflect.TypeOf((*MockStore)(nil).UpdateAccountTerm), arg0, arg1)
}

// UpdateAccountTran mocks base method.
func (m *MockStore) UpdateAccountTran(arg0 context.Context, arg1 db7.AccountTranRequest) (model.AccountTran, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountTran", arg0, arg1)
	ret0, _ := ret[0].(model.AccountTran)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountTran indicates an expected call of UpdateAccountTran.
func (mr *MockStoreMockRecorder) UpdateAccountTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountTran", reflect.TypeOf((*MockStore)(nil).UpdateAccountTran), arg0, arg1)
}

// UpdateAccountType mocks base method.
func (m *MockStore) UpdateAccountType(arg0 context.Context, arg1 db1.AccountTypeRequest) (model.AccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountType", arg0, arg1)
	ret0, _ := ret[0].(model.AccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountType indicates an expected call of UpdateAccountType.
func (mr *MockStoreMockRecorder) UpdateAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountType", reflect.TypeOf((*MockStore)(nil).UpdateAccountType), arg0, arg1)
}

// UpdateActionTicket mocks base method.
func (m *MockStore) UpdateActionTicket(arg0 context.Context, arg1 db7.ActionTicketRequest) (model.ActionTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActionTicket", arg0, arg1)
	ret0, _ := ret[0].(model.ActionTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActionTicket indicates an expected call of UpdateActionTicket.
func (mr *MockStoreMockRecorder) UpdateActionTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActionTicket", reflect.TypeOf((*MockStore)(nil).UpdateActionTicket), arg0, arg1)
}

// UpdateAddressList mocks base method.
func (m *MockStore) UpdateAddressList(arg0 context.Context, arg1 db4.AddressListRequest) (model.AddressList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddressList", arg0, arg1)
	ret0, _ := ret[0].(model.AddressList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddressList indicates an expected call of UpdateAddressList.
func (mr *MockStoreMockRecorder) UpdateAddressList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddressList", reflect.TypeOf((*MockStore)(nil).UpdateAddressList), arg0, arg1)
}

// UpdateChargeType mocks base method.
func (m *MockStore) UpdateChargeType(arg0 context.Context, arg1 db1.ChargeTypeRequest) (model.ChargeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChargeType", arg0, arg1)
	ret0, _ := ret[0].(model.ChargeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChargeType indicates an expected call of UpdateChargeType.
func (mr *MockStoreMockRecorder) UpdateChargeType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChargeType", reflect.TypeOf((*MockStore)(nil).UpdateChargeType), arg0, arg1)
}

// UpdateChartofAccount mocks base method.
func (m *MockStore) UpdateChartofAccount(arg0 context.Context, arg1 db5.ChartofAccountRequest) (model.ChartofAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChartofAccount", arg0, arg1)
	ret0, _ := ret[0].(model.ChartofAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChartofAccount indicates an expected call of UpdateChartofAccount.
func (mr *MockStoreMockRecorder) UpdateChartofAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChartofAccount", reflect.TypeOf((*MockStore)(nil).UpdateChartofAccount), arg0, arg1)
}

// UpdateCoaParent mocks base method.
func (m *MockStore) UpdateCoaParent(arg0 context.Context, arg1 db5.CoaParentRequest) (model.CoaParent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoaParent", arg0, arg1)
	ret0, _ := ret[0].(model.CoaParent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoaParent indicates an expected call of UpdateCoaParent.
func (mr *MockStoreMockRecorder) UpdateCoaParent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoaParent", reflect.TypeOf((*MockStore)(nil).UpdateCoaParent), arg0, arg1)
}

// UpdateComment mocks base method.
func (m *MockStore) UpdateComment(arg0 context.Context, arg1 db6.CommentRequest) (model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockStoreMockRecorder) UpdateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockStore)(nil).UpdateComment), arg0, arg1)
}

// UpdateContact mocks base method.
func (m *MockStore) UpdateContact(arg0 context.Context, arg1 db4.ContactRequest) (model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", arg0, arg1)
	ret0, _ := ret[0].(model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockStoreMockRecorder) UpdateContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockStore)(nil).UpdateContact), arg0, arg1)
}

// UpdateCustomer mocks base method.
func (m *MockStore) UpdateCustomer(arg0 context.Context, arg1 db2.CustomerRequest) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", arg0, arg1)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockStoreMockRecorder) UpdateCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockStore)(nil).UpdateCustomer), arg0, arg1)
}

// UpdateCustomerBeneficiary mocks base method.
func (m *MockStore) UpdateCustomerBeneficiary(arg0 context.Context, arg1 db2.CustomerBeneficiaryRequest) (model.CustomerBeneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerBeneficiary", arg0, arg1)
	ret0, _ := ret[0].(model.CustomerBeneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerBeneficiary indicates an expected call of UpdateCustomerBeneficiary.
func (mr *MockStoreMockRecorder) UpdateCustomerBeneficiary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerBeneficiary", reflect.TypeOf((*MockStore)(nil).UpdateCustomerBeneficiary), arg0, arg1)
}

// UpdateCustomerEvent mocks base method.
func (m *MockStore) UpdateCustomerEvent(arg0 context.Context, arg1 db7.CustomerEventRequest) (model.CustomerEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerEvent", arg0, arg1)
	ret0, _ := ret[0].(model.CustomerEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerEvent indicates an expected call of UpdateCustomerEvent.
func (mr *MockStoreMockRecorder) UpdateCustomerEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerEvent", reflect.TypeOf((*MockStore)(nil).UpdateCustomerEvent), arg0, arg1)
}

// UpdateCustomerGroup mocks base method.
func (m *MockStore) UpdateCustomerGroup(arg0 context.Context, arg1 db2.CustomerGroupRequest) (model.CustomerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomerGroup", arg0, arg1)
	ret0, _ := ret[0].(model.CustomerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomerGroup indicates an expected call of UpdateCustomerGroup.
func (mr *MockStoreMockRecorder) UpdateCustomerGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomerGroup", reflect.TypeOf((*MockStore)(nil).UpdateCustomerGroup), arg0, arg1)
}

// UpdateDocument mocks base method.
func (m *MockStore) UpdateDocument(arg0 context.Context, arg1 db3.DocumentRequest) (model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocument", arg0, arg1)
	ret0, _ := ret[0].(model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocument indicates an expected call of UpdateDocument.
func (mr *MockStoreMockRecorder) UpdateDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument", reflect.TypeOf((*MockStore)(nil).UpdateDocument), arg0, arg1)
}

// UpdateEducational mocks base method.
func (m *MockStore) UpdateEducational(arg0 context.Context, arg1 db4.EducationalRequest) (model.Educational, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEducational", arg0, arg1)
	ret0, _ := ret[0].(model.Educational)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEducational indicates an expected call of UpdateEducational.
func (mr *MockStoreMockRecorder) UpdateEducational(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEducational", reflect.TypeOf((*MockStore)(nil).UpdateEducational), arg0, arg1)
}

// UpdateEmployee mocks base method.
func (m *MockStore) UpdateEmployee(arg0 context.Context, arg1 db4.EmployeeRequest) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", arg0, arg1)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockStoreMockRecorder) UpdateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockStore)(nil).UpdateEmployee), arg0, arg1)
}

// UpdateEmployeeEvent mocks base method.
func (m *MockStore) UpdateEmployeeEvent(arg0 context.Context, arg1 db7.EmployeeEventRequest) (model.EmployeeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeEvent", arg0, arg1)
	ret0, _ := ret[0].(model.EmployeeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployeeEvent indicates an expected call of UpdateEmployeeEvent.
func (mr *MockStoreMockRecorder) UpdateEmployeeEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeEvent", reflect.TypeOf((*MockStore)(nil).UpdateEmployeeEvent), arg0, arg1)
}

// UpdateEmployment mocks base method.
func (m *MockStore) UpdateEmployment(arg0 context.Context, arg1 db4.EmploymentRequest) (model.Employment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployment", arg0, arg1)
	ret0, _ := ret[0].(model.Employment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployment indicates an expected call of UpdateEmployment.
func (mr *MockStoreMockRecorder) UpdateEmployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployment", reflect.TypeOf((*MockStore)(nil).UpdateEmployment), arg0, arg1)
}

// UpdateFollower mocks base method.
func (m *MockStore) UpdateFollower(arg0 context.Context, arg1 db6.FollowerRequest) (model.Follower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFollower", arg0, arg1)
	ret0, _ := ret[0].(model.Follower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFollower indicates an expected call of UpdateFollower.
func (mr *MockStoreMockRecorder) UpdateFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFollower", reflect.TypeOf((*MockStore)(nil).UpdateFollower), arg0, arg1)
}

// UpdateFxrate mocks base method.
func (m *MockStore) UpdateFxrate(arg0 context.Context, arg1 db5.FxrateRequest) (model.Fxrate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFxrate", arg0, arg1)
	ret0, _ := ret[0].(model.Fxrate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFxrate indicates an expected call of UpdateFxrate.
func (mr *MockStoreMockRecorder) UpdateFxrate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFxrate", reflect.TypeOf((*MockStore)(nil).UpdateFxrate), arg0, arg1)
}

// UpdateGeography mocks base method.
func (m *MockStore) UpdateGeography(arg0 context.Context, arg1 db5.GeographyRequest) (model.Geography, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGeography", arg0, arg1)
	ret0, _ := ret[0].(model.Geography)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGeography indicates an expected call of UpdateGeography.
func (mr *MockStoreMockRecorder) UpdateGeography(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeography", reflect.TypeOf((*MockStore)(nil).UpdateGeography), arg0, arg1)
}

// UpdateGlAccount mocks base method.
func (m *MockStore) UpdateGlAccount(arg0 context.Context, arg1 db1.GlAccountRequest) (model.GlAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGlAccount", arg0, arg1)
	ret0, _ := ret[0].(model.GlAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGlAccount indicates an expected call of UpdateGlAccount.
func (mr *MockStoreMockRecorder) UpdateGlAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlAccount", reflect.TypeOf((*MockStore)(nil).UpdateGlAccount), arg0, arg1)
}

// UpdateIdentityInfo mocks base method.
func (m *MockStore) UpdateIdentityInfo(arg0 context.Context, arg1 db4.IdentityInfoRequest) (model.IdentityInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityInfo", arg0, arg1)
	ret0, _ := ret[0].(model.IdentityInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentityInfo indicates an expected call of UpdateIdentityInfo.
func (mr *MockStoreMockRecorder) UpdateIdentityInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityInfo", reflect.TypeOf((*MockStore)(nil).UpdateIdentityInfo), arg0, arg1)
}

// UpdateIds mocks base method.
func (m *MockStore) UpdateIds(arg0 context.Context, arg1 db4.IdsRequest) (model.Ids, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIds", arg0, arg1)
	ret0, _ := ret[0].(model.Ids)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIds indicates an expected call of UpdateIds.
func (mr *MockStoreMockRecorder) UpdateIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIds", reflect.TypeOf((*MockStore)(nil).UpdateIds), arg0, arg1)
}

// UpdateIncomeSource mocks base method.
func (m *MockStore) UpdateIncomeSource(arg0 context.Context, arg1 db4.IncomeSourceRequest) (model.IncomeSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIncomeSource", arg0, arg1)
	ret0, _ := ret[0].(model.IncomeSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIncomeSource indicates an expected call of UpdateIncomeSource.
func (mr *MockStoreMockRecorder) UpdateIncomeSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncomeSource", reflect.TypeOf((*MockStore)(nil).UpdateIncomeSource), arg0, arg1)
}

// UpdateJournalDetail mocks base method.
func (m *MockStore) UpdateJournalDetail(arg0 context.Context, arg1 db7.JournalDetailRequest) (model.JournalDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJournalDetail", arg0, arg1)
	ret0, _ := ret[0].(model.JournalDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJournalDetail indicates an expected call of UpdateJournalDetail.
func (mr *MockStoreMockRecorder) UpdateJournalDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJournalDetail", reflect.TypeOf((*MockStore)(nil).UpdateJournalDetail), arg0, arg1)
}

// UpdateOffice mocks base method.
func (m *MockStore) UpdateOffice(arg0 context.Context, arg1 db4.OfficeRequest) (model.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOffice", arg0, arg1)
	ret0, _ := ret[0].(model.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOffice indicates an expected call of UpdateOffice.
func (mr *MockStoreMockRecorder) UpdateOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOffice", reflect.TypeOf((*MockStore)(nil).UpdateOffice), arg0, arg1)
}

// UpdateOfficeAccount mocks base method.
func (m *MockStore) UpdateOfficeAccount(arg0 context.Context, arg1 db1.OfficeAccountRequest) (model.OfficeAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOfficeAccount", arg0, arg1)
	ret0, _ := ret[0].(model.OfficeAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOfficeAccount indicates an expected call of UpdateOfficeAccount.
func (mr *MockStoreMockRecorder) UpdateOfficeAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOfficeAccount", reflect.TypeOf((*MockStore)(nil).UpdateOfficeAccount), arg0, arg1)
}

// UpdateOfficeAccountTran mocks base method.
func (m *MockStore) UpdateOfficeAccountTran(arg0 context.Context, arg1 db7.OfficeAccountTranRequest) (model.OfficeAccountTran, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOfficeAccountTran", arg0, arg1)
	ret0, _ := ret[0].(model.OfficeAccountTran)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOfficeAccountTran indicates an expected call of UpdateOfficeAccountTran.
func (mr *MockStoreMockRecorder) UpdateOfficeAccountTran(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOfficeAccountTran", reflect.TypeOf((*MockStore)(nil).UpdateOfficeAccountTran), arg0, arg1)
}

// UpdateOfficeAccountType mocks base method.
func (m *MockStore) UpdateOfficeAccountType(arg0 context.Context, arg1 db1.OfficeAccountTypeRequest) (model.OfficeAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOfficeAccountType", arg0, arg1)
	ret0, _ := ret[0].(model.OfficeAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOfficeAccountType indicates an expected call of UpdateOfficeAccountType.
func (mr *MockStoreMockRecorder) UpdateOfficeAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOfficeAccountType", reflect.TypeOf((*MockStore)(nil).UpdateOfficeAccountType), arg0, arg1)
}

// UpdateOtherSchedule mocks base method.
func (m *MockStore) UpdateOtherSchedule(arg0 context.Context, arg1 db1.OtherScheduleRequest) (model.OtherSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOtherSchedule", arg0, arg1)
	ret0, _ := ret[0].(model.OtherSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOtherSchedule indicates an expected call of UpdateOtherSchedule.
func (mr *MockStoreMockRecorder) UpdateOtherSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOtherSchedule", reflect.TypeOf((*MockStore)(nil).UpdateOtherSchedule), arg0, arg1)
}

// UpdatePersonalInfo mocks base method.
func (m *MockStore) UpdatePersonalInfo(arg0 context.Context, arg1 db4.PersonalInfoRequest) (model.PersonalInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePersonalInfo", arg0, arg1)
	ret0, _ := ret[0].(model.PersonalInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePersonalInfo indicates an expected call of UpdatePersonalInfo.
func (mr *MockStoreMockRecorder) UpdatePersonalInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePersonalInfo", reflect.TypeOf((*MockStore)(nil).UpdatePersonalInfo), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockStore) UpdatePost(arg0 context.Context, arg1 db6.PostRequest) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockStoreMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockStore)(nil).UpdatePost), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(arg0 context.Context, arg1 db1.ProductRequest) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), arg0, arg1)
}

// UpdateReference mocks base method.
func (m *MockStore) UpdateReference(arg0 context.Context, arg1 db5.ReferenceRequest) (model.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReference", arg0, arg1)
	ret0, _ := ret[0].(model.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReference indicates an expected call of UpdateReference.
func (mr *MockStoreMockRecorder) UpdateReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReference", reflect.TypeOf((*MockStore)(nil).UpdateReference), arg0, arg1)
}

// UpdateReferenceType mocks base method.
func (m *MockStore) UpdateReferenceType(arg0 context.Context, arg1 db5.ReferenceTypeRequest) (model.ReferenceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReferenceType", arg0, arg1)
	ret0, _ := ret[0].(model.ReferenceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReferenceType indicates an expected call of UpdateReferenceType.
func (mr *MockStoreMockRecorder) UpdateReferenceType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReferenceType", reflect.TypeOf((*MockStore)(nil).UpdateReferenceType), arg0, arg1)
}

// UpdateRelation mocks base method.
func (m *MockStore) UpdateRelation(arg0 context.Context, arg1 db4.RelationRequest) (model.Relation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRelation", arg0, arg1)
	ret0, _ := ret[0].(model.Relation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRelation indicates an expected call of UpdateRelation.
func (mr *MockStoreMockRecorder) UpdateRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelation", reflect.TypeOf((*MockStore)(nil).UpdateRelation), arg0, arg1)
}

// UpdateSchedule mocks base method.
func (m *MockStore) UpdateSchedule(arg0 context.Context, arg1 db1.ScheduleRequest) (model.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedule", arg0, arg1)
	ret0, _ := ret[0].(model.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchedule indicates an expected call of UpdateSchedule.
func (mr *MockStoreMockRecorder) UpdateSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockStore)(nil).UpdateSchedule), arg0, arg1)
}

// UpdateSocialMediaCredential mocks base method.
func (m *MockStore) UpdateSocialMediaCredential(arg0 context.Context, arg1 db8.SocialMediaCredentialRequest) (model.SocialMediaCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSocialMediaCredential", arg0, arg1)
	ret0, _ := ret[0].(model.SocialMediaCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSocialMediaCredential indicates an expected call of UpdateSocialMediaCredential.
func (mr *MockStoreMockRecorder) UpdateSocialMediaCredential(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSocialMediaCredential", reflect.TypeOf((*MockStore)(nil).UpdateSocialMediaCredential), arg0, arg1)
}

// UpdateStorage mocks base method.
func (m *MockStore) UpdateStorage(arg0 context.Context, arg1 db3.StorageRequest) (model.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStorage", arg0, arg1)
	ret0, _ := ret[0].(model.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStorage indicates an expected call of UpdateStorage.
func (mr *MockStoreMockRecorder) UpdateStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStorage", reflect.TypeOf((*MockStore)(nil).UpdateStorage), arg0, arg1)
}

// UpdateSystemConfig mocks base method.
func (m *MockStore) UpdateSystemConfig(arg0 context.Context, arg1 db5.SystemConfigRequest) (model.SystemConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSystemConfig", arg0, arg1)
	ret0, _ := ret[0].(model.SystemConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSystemConfig indicates an expected call of UpdateSystemConfig.
func (mr *MockStoreMockRecorder) UpdateSystemConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemConfig", reflect.TypeOf((*MockStore)(nil).UpdateSystemConfig), arg0, arg1)
}

// UpdateTicket mocks base method.
func (m *MockStore) UpdateTicket(arg0 context.Context, arg1 db7.TicketRequest) (model.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTicket", arg0, arg1)
	ret0, _ := ret[0].(model.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTicket indicates an expected call of UpdateTicket.
func (mr *MockStoreMockRecorder) UpdateTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicket", reflect.TypeOf((*MockStore)(nil).UpdateTicket), arg0, arg1)
}

// UpdateTrnAction mocks base method.
func (m *MockStore) UpdateTrnAction(arg0 context.Context, arg1 db7.TrnActionRequest) (model.TrnAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrnAction", arg0, arg1)
	ret0, _ := ret[0].(model.TrnAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrnAction indicates an expected call of UpdateTrnAction.
func (mr *MockStoreMockRecorder) UpdateTrnAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrnAction", reflect.TypeOf((*MockStore)(nil).UpdateTrnAction), arg0, arg1)
}

// UpdateTrnHeadRelation mocks base method.
func (m *MockStore) UpdateTrnHeadRelation(arg0 context.Context, arg1 db7.TrnHeadRelationRequest) (model.TrnHeadRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrnHeadRelation", arg0, arg1)
	ret0, _ := ret[0].(model.TrnHeadRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrnHeadRelation indicates an expected call of UpdateTrnHeadRelation.
func (mr *MockStoreMockRecorder) UpdateTrnHeadRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrnHeadRelation", reflect.TypeOf((*MockStore)(nil).UpdateTrnHeadRelation), arg0, arg1)
}

// UpdateUnitConversion mocks base method.
func (m *MockStore) UpdateUnitConversion(arg0 context.Context, arg1 db5.UnitConversionRequest) (model.UnitConversion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnitConversion", arg0, arg1)
	ret0, _ := ret[0].(model.UnitConversion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUnitConversion indicates an expected call of UpdateUnitConversion.
func (mr *MockStoreMockRecorder) UpdateUnitConversion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnitConversion", reflect.TypeOf((*MockStore)(nil).UpdateUnitConversion), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db8.UserRequest) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserAccountType mocks base method.
func (m *MockStore) UpdateUserAccountType(arg0 context.Context, arg1 db8.UserAccountTypeRequest) (model.UserAccountType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAccountType", arg0, arg1)
	ret0, _ := ret[0].(model.UserAccountType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAccountType indicates an expected call of UpdateUserAccountType.
func (mr *MockStoreMockRecorder) UpdateUserAccountType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAccountType", reflect.TypeOf((*MockStore)(nil).UpdateUserAccountType), arg0, arg1)
}

// UpdateUserConfig mocks base method.
func (m *MockStore) UpdateUserConfig(arg0 context.Context, arg1 db8.UserConfigRequest) (model.UserConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserConfig", arg0, arg1)
	ret0, _ := ret[0].(model.UserConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserConfig indicates an expected call of UpdateUserConfig.
func (mr *MockStoreMockRecorder) UpdateUserConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserConfig", reflect.TypeOf((*MockStore)(nil).UpdateUserConfig), arg0, arg1)
}

// UpdateUserObject mocks base method.
func (m *MockStore) UpdateUserObject(arg0 context.Context, arg1 db8.UserObjectRequest) (model.UserObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserObject", arg0, arg1)
	ret0, _ := ret[0].(model.UserObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserObject indicates an expected call of UpdateUserObject.
func (mr *MockStoreMockRecorder) UpdateUserObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserObject", reflect.TypeOf((*MockStore)(nil).UpdateUserObject), arg0, arg1)
}

// UpdateUserOffice mocks base method.
func (m *MockStore) UpdateUserOffice(arg0 context.Context, arg1 db8.UserOfficeRequest) (model.UserOffice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserOffice", arg0, arg1)
	ret0, _ := ret[0].(model.UserOffice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserOffice indicates an expected call of UpdateUserOffice.
func (mr *MockStoreMockRecorder) UpdateUserOffice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserOffice", reflect.TypeOf((*MockStore)(nil).UpdateUserOffice), arg0, arg1)
}

// UpdateUserProduct mocks base method.
func (m *MockStore) UpdateUserProduct(arg0 context.Context, arg1 db8.UserProductRequest) (model.UserProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProduct", arg0, arg1)
	ret0, _ := ret[0].(model.UserProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProduct indicates an expected call of UpdateUserProduct.
func (mr *MockStoreMockRecorder) UpdateUserProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProduct", reflect.TypeOf((*MockStore)(nil).UpdateUserProduct), arg0, arg1)
}
