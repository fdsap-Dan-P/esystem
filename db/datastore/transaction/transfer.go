// Code generated by sqlc. DO NOT EDIT.
// source: transfer.sql

package db

import (
	"context"
	"log"

	"simplebank/model"

	"github.com/shopspring/decimal"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
  from_account_id,
  to_account_id,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTransferParams struct {
	FromAccountId int64           `json:"fromAccountId"`
	ToAccountId   int64           `json:"toAccountId"`
	Amount        decimal.Decimal `json:"amount"`
}

func (q *QueriesTransaction) CreateTransfer(ctx context.Context, arg CreateTransferParams) (model.Transfer, error) {
	row_ := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountId, arg.ToAccountId, arg.Amount)
	var i model.Transfer
	err := row_.Scan(
		&i.Id,
		&i.FromAccountId,
		&i.ToAccountId,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *QueriesTransaction) GetTransfer(ctx context.Context, id int64) (model.Transfer, error) {
	log.Println("ctx:", id, ctx)
	row_ := q.db.QueryRowContext(ctx, getTransfer, id)
	var i model.Transfer
	err := row_.Scan(
		&i.Id,
		&i.FromAccountId,
		&i.ToAccountId,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE 
    from_account_id = $1 OR
    to_account_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTransfersParams struct {
	FromAccountId int64 `json:"fromAccountId"`
	ToAccountId   int64 `json:"toAccountId"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *QueriesTransaction) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]model.Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers,
		arg.FromAccountId,
		arg.ToAccountId,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []model.Transfer{}
	for rows.Next() {
		var i model.Transfer
		if err := rows.Scan(
			&i.Id,
			&i.FromAccountId,
			&i.ToAccountId,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
